{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThe APMC Commission Merchant Accounting System is a comprehensive digital solution designed to replace physical bookkeeping for commission merchants in APMC fruit markets. The system manages the complete vendor-side operations including vendor management, commodity tracking, purchase invoice generation, payment processing, stock management, and ledger maintenance. Built as a full-stack web application, it provides real-time analytics and automated accounting features to streamline operations that were previously managed through manual books (Board Book, Cashbook, Vapari Book, Udhaar Book).\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and caching\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Language**: TypeScript for full-stack type safety\n- **Authentication**: JWT-based authentication with bcrypt password hashing\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful endpoints with role-based access control (Admin, Operator, Accountant)\n- **Session Management**: Express sessions with PostgreSQL session storage\n\n## Database Architecture\n- **Database**: PostgreSQL for ACID compliance and complex relational data\n- **Connection**: Neon serverless PostgreSQL for scalable cloud database\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Data Models**: \n  - Users with role-based permissions\n  - Vendors with contact and financial information\n  - Commodities with quality grades and pricing\n  - Purchase invoices with line items and calculations\n  - Payments with multiple modes (Cash, Bank, UPI, Cheque)\n  - Stock tracking in multiple units (Crates, Kgs)\n  - Bank accounts and financial ledgers\n\n## Authentication & Authorization\n- **Authentication Method**: JWT tokens stored in localStorage\n- **Password Security**: Bcrypt hashing with salt rounds\n- **Role-Based Access**: Three user roles with different permission levels\n- **Protected Routes**: Frontend route protection with authentication checks\n- **API Security**: Middleware-based token verification for API endpoints\n\n## Business Logic Implementation\n- **Commission Calculation**: Automated percentage-based commission calculation on purchases\n- **Stock Management**: Real-time stock updates with dual unit tracking (Crates/Kgs)\n- **Payment Tracking**: Multiple payment modes with partial payment support\n- **Ledger Automation**: Automatic updates to vendor ledgers, cashbook, and bankbook\n- **Invoice Generation**: Purchase invoice creation with line items and freight/labor charges\n\n## Development Environment\n- **Development Server**: Vite dev server with HMR for fast development\n- **Production Build**: ESBuild for server bundling and Vite for client optimization\n- **Type Checking**: TypeScript compiler with strict mode enabled\n- **Code Organization**: Monorepo structure with shared types between client and server\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database toolkit with migration support\n\n## UI Component Libraries\n- **Radix UI**: Accessible component primitives for complex UI interactions\n- **Shadcn/ui**: Pre-built component library based on Radix UI\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Fast build tool with React plugin support\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Performant form library with validation\n- **Zod**: TypeScript-first schema validation\n- **Tailwind CSS**: Utility-first CSS framework\n\n## Authentication & Security\n- **jsonwebtoken**: JWT token generation and verification\n- **bcrypt**: Password hashing and comparison\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n## Date & Utility Libraries\n- **date-fns**: Modern date utility library for formatting and manipulation\n- **clsx & tailwind-merge**: Conditional CSS class management\n- **class-variance-authority**: Utility for creating component variants\n\n## Deployment Platform\n- **Replit**: Cloud development and hosting platform with integrated database and deployment","size_bytes":4857},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize database with default data\n  try {\n    const { initializeDatabase } = await import(\"./initializeDatabase\");\n    await initializeDatabase();\n  } catch (error) {\n    console.error(\"Failed to initialize database:\", error);\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2307},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\nimport { \n  insertUserSchema,\n  insertVendorSchema,\n  insertItemSchema,\n  insertBankAccountSchema,\n  insertPurchaseInvoiceSchema,\n  insertInvoiceItemSchema,\n  insertPaymentSchema,\n  insertStockSchema,\n  insertStockMovementSchema,\n  insertRetailerSchema,\n  insertSalesInvoiceSchema,\n  insertSalesInvoiceItemSchema,\n  insertSalesPaymentSchema,\n  insertCrateTransactionSchema,\n  insertExpenseCategorySchema,\n  insertExpenseSchema\n} from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  });\n};\n\n// Role-based access control\nconst requireRole = (roles: string[]) => (req: any, res: any, next: any) => {\n  if (!req.user || !roles.includes(req.user.role)) {\n    return res.status(403).json({ message: 'Insufficient permissions' });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint to stop continuous HEAD calls\n  app.head(\"/api\", (req, res) => {\n    res.status(200).end();\n  });\n\n  app.get(\"/api\", (req, res) => {\n    res.status(200).json({ status: \"OK\", timestamp: new Date().toISOString() });\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign(\n        { id: user.id, username: user.username, role: user.role },\n        JWT_SECRET,\n        { expiresIn: \"24h\" }\n      );\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          name: user.name,\n          role: user.role,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      \n      res.status(201).json({\n        id: user.id,\n        username: user.username,\n        name: user.name,\n        role: user.role,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  // Vendor routes\n  app.get(\"/api/vendors\", authenticateToken, async (req, res) => {\n    try {\n      const vendors = await storage.getVendors();\n      res.json(vendors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vendors\" });\n    }\n  });\n\n  app.get(\"/api/vendors/:id\", authenticateToken, async (req, res) => {\n    try {\n      const vendor = await storage.getVendor(req.params.id);\n      if (!vendor) {\n        return res.status(404).json({ message: \"Vendor not found\" });\n      }\n      res.json(vendor);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vendor\" });\n    }\n  });\n\n  app.post(\"/api/vendors\", authenticateToken, requireRole([\"Admin\", \"Operator\"]), async (req, res) => {\n    try {\n      const vendorData = insertVendorSchema.parse(req.body);\n      const vendor = await storage.createVendor(vendorData);\n      res.status(201).json(vendor);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create vendor\" });\n    }\n  });\n\n  app.put(\"/api/vendors/:id\", authenticateToken, requireRole([\"Admin\", \"Operator\"]), async (req, res) => {\n    try {\n      const vendorData = insertVendorSchema.partial().parse(req.body);\n      const vendor = await storage.updateVendor(req.params.id, vendorData);\n      if (!vendor) {\n        return res.status(404).json({ message: \"Vendor not found\" });\n      }\n      res.json(vendor);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update vendor\" });\n    }\n  });\n\n  app.delete(\"/api/vendors/:id\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const success = await storage.deleteVendor(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Vendor not found\" });\n      }\n      res.json({ message: \"Vendor deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete vendor\" });\n    }\n  });\n\n  // Items routes\n  app.get(\"/api/items\", authenticateToken, async (req, res) => {\n    try {\n      const items = await storage.getItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch items\" });\n    }\n  });\n\n  app.get(\"/api/items/vendor/:vendorId\", authenticateToken, async (req, res) => {\n    try {\n      const items = await storage.getItemsByVendor(req.params.vendorId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch items\" });\n    }\n  });\n\n  app.post(\"/api/items\", authenticateToken, requireRole([\"Admin\", \"Operator\"]), async (req, res) => {\n    try {\n      const itemData = insertItemSchema.parse(req.body);\n      const item = await storage.createItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create item\" });\n    }\n  });\n\n  app.put(\"/api/items/:id\", authenticateToken, requireRole([\"Admin\", \"Operator\"]), async (req, res) => {\n    try {\n      const itemData = insertItemSchema.partial().parse(req.body);\n      const item = await storage.updateItem(req.params.id, itemData);\n      if (!item) {\n        return res.status(404).json({ message: \"Item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update item\" });\n    }\n  });\n\n  app.delete(\"/api/items/:id\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const success = await storage.deleteItem(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Item not found\" });\n      }\n      res.json({ message: \"Item deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete item\" });\n    }\n  });\n\n  // Bank account routes\n  app.get(\"/api/bank-accounts\", authenticateToken, async (req, res) => {\n    try {\n      const accounts = await storage.getBankAccounts();\n      res.json(accounts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bank accounts\" });\n    }\n  });\n\n  app.post(\"/api/bank-accounts\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const accountData = insertBankAccountSchema.parse(req.body);\n      const account = await storage.createBankAccount(accountData);\n      res.status(201).json(account);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create bank account\" });\n    }\n  });\n\n  // Purchase invoice routes\n  app.get(\"/api/purchase-invoices\", authenticateToken, async (req, res) => {\n    try {\n      const invoices = await storage.getPurchaseInvoices();\n      res.json(invoices);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.get(\"/api/purchase-invoices/:id\", authenticateToken, async (req, res) => {\n    try {\n      const invoice = await storage.getPurchaseInvoice(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.post(\"/api/purchase-invoices\", authenticateToken, requireRole([\"Admin\", \"Operator\"]), async (req, res) => {\n    try {\n      const { invoice, items, stockOutEntryIds } = req.body;\n      \n      if (!invoice || !items || !Array.isArray(items)) {\n        return res.status(400).json({ message: \"Invoice and items are required\" });\n      }\n\n      const invoiceData = insertPurchaseInvoiceSchema.parse(invoice);\n      const itemsData = items.map((item: any) => insertInvoiceItemSchema.omit({ invoiceId: true }).parse(item));\n      \n      const createdInvoice = await storage.createPurchaseInvoice(invoiceData, itemsData);\n      res.status(201).json(createdInvoice);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create invoice\" });\n    }\n  });\n\n  // Payment routes\n  app.get(\"/api/payments\", authenticateToken, async (req, res) => {\n    try {\n      const payments = await storage.getPayments();\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.get(\"/api/payments/invoice/:invoiceId\", authenticateToken, async (req, res) => {\n    try {\n      const payments = await storage.getPaymentsByInvoice(req.params.invoiceId);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", authenticateToken, requireRole([\"Admin\", \"Accountant\", \"Operator\"]), async (req, res) => {\n    try {\n      const paymentData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create payment\" });\n    }\n  });\n\n  // Stock routes\n  app.get(\"/api/stock\", authenticateToken, async (req, res) => {\n    try {\n      const stock = await storage.getStock();\n      res.json(stock);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock\" });\n    }\n  });\n\n  app.put(\"/api/stock/:itemId\", authenticateToken, requireRole([\"Admin\", \"Operator\"]), async (req, res) => {\n    try {\n      const stockData = insertStockSchema.partial().parse(req.body);\n      const stock = await storage.updateStock(req.params.itemId, stockData);\n      res.json(stock);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update stock\" });\n    }\n  });\n\n  // Stock movement routes\n  app.get(\"/api/stock-movements\", authenticateToken, async (req, res) => {\n    try {\n      const movements = await storage.getStockMovements();\n      res.json(movements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock movements\" });\n    }\n  });\n\n  app.get(\"/api/stock-movements/item/:itemId\", authenticateToken, async (req, res) => {\n    try {\n      const movements = await storage.getStockMovementsByItem(req.params.itemId);\n      res.json(movements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock movements for item\" });\n    }\n  });\n\n  app.get(\"/api/stock-movements/vendor/:vendorId/available\", authenticateToken, async (req, res) => {\n    try {\n      const movements = await storage.getAvailableStockOutEntriesByVendor(req.params.vendorId);\n      res.json(movements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch available stock out entries for vendor\" });\n    }\n  });\n\n  app.post(\"/api/stock-movements\", authenticateToken, requireRole([\"Admin\", \"Operator\"]), async (req, res) => {\n    try {\n      const movementData = insertStockMovementSchema.parse(req.body);\n      const movement = await storage.createStockMovement(movementData);\n      res.status(201).json(movement);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create stock movement\" });\n    }\n  });\n\n  app.get(\"/api/stock/balance/:itemId\", authenticateToken, async (req, res) => {\n    try {\n      const balance = await storage.calculateStockBalance(req.params.itemId);\n      res.json(balance);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate stock balance\" });\n    }\n  });\n\n  // Ledger and book routes\n  app.get(\"/api/ledger/vendor/:vendorId\", authenticateToken, async (req, res) => {\n    try {\n      const ledger = await storage.getVendorLedger(req.params.vendorId);\n      res.json(ledger);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vendor ledger\" });\n    }\n  });\n\n  app.get(\"/api/cashbook\", authenticateToken, async (req, res) => {\n    try {\n      const cashbook = await storage.getCashbook();\n      res.json(cashbook);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cashbook\" });\n    }\n  });\n\n  app.get(\"/api/bankbook\", authenticateToken, async (req, res) => {\n    try {\n      const bankAccountId = req.query.bankAccountId as string;\n      const bankbook = await storage.getBankbook(bankAccountId);\n      res.json(bankbook);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bankbook\" });\n    }\n  });\n\n  // User management routes\n  app.get(\"/api/users\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      // Remove passwords from response\n      const safeUsers = users.map(({ password, ...user }) => user);\n      res.json(safeUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      // Remove password from response\n      const { password, ...safeUser } = user;\n      res.status(201).json(safeUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const userData = insertUserSchema.partial().parse(req.body);\n      const user = await storage.updateUser(req.params.id, userData);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      // Remove password from response\n      const { password, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const success = await storage.deleteUser(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/permissions\", authenticateToken, requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const { permissions } = req.body;\n      if (!Array.isArray(permissions)) {\n        return res.status(400).json({ message: \"Permissions must be an array\" });\n      }\n      \n      const user = await storage.updateUserPermissions(req.params.id, permissions);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Remove password from response\n      const { password, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user permissions\" });\n    }\n  });\n\n  // Retailer routes\n  app.get(\"/api/retailers\", authenticateToken, async (req, res) => {\n    try {\n      const retailers = await storage.getRetailers();\n      res.json(retailers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch retailers\" });\n    }\n  });\n\n  app.get(\"/api/retailers/:id\", authenticateToken, async (req, res) => {\n    try {\n      const retailer = await storage.getRetailer(req.params.id);\n      if (!retailer) {\n        return res.status(404).json({ message: \"Retailer not found\" });\n      }\n      res.json(retailer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch retailer\" });\n    }\n  });\n\n  app.post(\"/api/retailers\", authenticateToken, async (req, res) => {\n    try {\n      const retailerData = insertRetailerSchema.parse(req.body);\n      const retailer = await storage.createRetailer(retailerData);\n      res.status(201).json(retailer);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create retailer\" });\n    }\n  });\n\n  app.put(\"/api/retailers/:id\", authenticateToken, async (req, res) => {\n    try {\n      const retailerData = insertRetailerSchema.partial().parse(req.body);\n      const retailer = await storage.updateRetailer(req.params.id, retailerData);\n      if (!retailer) {\n        return res.status(404).json({ message: \"Retailer not found\" });\n      }\n      res.json(retailer);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update retailer\" });\n    }\n  });\n\n  app.delete(\"/api/retailers/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteRetailer(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Retailer not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete retailer\" });\n    }\n  });\n\n  // Sales Invoice routes\n  app.get(\"/api/sales-invoices\", authenticateToken, async (req, res) => {\n    try {\n      const invoices = await storage.getSalesInvoices();\n      res.json(invoices);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales invoices\" });\n    }\n  });\n\n  app.get(\"/api/sales-invoices/:id\", authenticateToken, async (req, res) => {\n    try {\n      const invoice = await storage.getSalesInvoice(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Sales invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales invoice\" });\n    }\n  });\n\n  app.post(\"/api/sales-invoices\", authenticateToken, async (req, res) => {\n    try {\n      const { invoice, items } = req.body;\n      \n      if (!invoice || !items || !Array.isArray(items)) {\n        return res.status(400).json({ message: \"Invoice and items are required\" });\n      }\n\n      const invoiceData = insertSalesInvoiceSchema.parse(invoice);\n      const itemsData = items.map((item: any) => insertSalesInvoiceItemSchema.omit({ invoiceId: true }).parse(item));\n      \n      const createdInvoice = await storage.createSalesInvoice(invoiceData, itemsData);\n      res.status(201).json(createdInvoice);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sales invoice\" });\n    }\n  });\n\n  // Sales Payment routes\n  app.get(\"/api/sales-payments\", authenticateToken, async (req, res) => {\n    try {\n      const payments = await storage.getSalesPayments();\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales payments\" });\n    }\n  });\n\n  app.get(\"/api/sales-payments/invoice/:invoiceId\", authenticateToken, async (req, res) => {\n    try {\n      const payments = await storage.getSalesPaymentsByInvoice(req.params.invoiceId);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments for invoice\" });\n    }\n  });\n\n  app.post(\"/api/sales-payments\", authenticateToken, async (req, res) => {\n    try {\n      const paymentData = insertSalesPaymentSchema.parse(req.body);\n      const payment = await storage.createSalesPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sales payment\" });\n    }\n  });\n\n  app.post(\"/api/sales-invoices/:id/mark-paid\", authenticateToken, async (req, res) => {\n    try {\n      const invoiceId = req.params.id;\n      const result = await storage.markSalesInvoiceAsPaid(invoiceId);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark invoice as paid\" });\n    }\n  });\n\n  // Crate Transaction routes\n  app.get(\"/api/crate-transactions\", authenticateToken, async (req, res) => {\n    try {\n      const transactions = await storage.getCrateTransactions();\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch crate transactions\" });\n    }\n  });\n\n  app.get(\"/api/crate-transactions/retailer/:retailerId\", authenticateToken, async (req, res) => {\n    try {\n      const transactions = await storage.getCrateTransactionsByRetailer(req.params.retailerId);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch crate transactions for retailer\" });\n    }\n  });\n\n  app.post(\"/api/crate-transactions\", authenticateToken, async (req, res) => {\n    try {\n      const transactionData = insertCrateTransactionSchema.parse(req.body);\n      const transaction = await storage.createCrateTransaction(transactionData);\n      res.status(201).json(transaction);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create crate transaction\" });\n    }\n  });\n\n  // Expense Category routes\n  app.get(\"/api/expense-categories\", authenticateToken, async (req, res) => {\n    try {\n      const categories = await storage.getExpenseCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expense categories\" });\n    }\n  });\n\n  app.get(\"/api/expense-categories/:id\", authenticateToken, async (req, res) => {\n    try {\n      const category = await storage.getExpenseCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ message: \"Expense category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expense category\" });\n    }\n  });\n\n  app.post(\"/api/expense-categories\", authenticateToken, async (req, res) => {\n    try {\n      const categoryData = insertExpenseCategorySchema.parse(req.body);\n      const category = await storage.createExpenseCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense category\" });\n    }\n  });\n\n  app.put(\"/api/expense-categories/:id\", authenticateToken, async (req, res) => {\n    try {\n      const categoryData = insertExpenseCategorySchema.partial().parse(req.body);\n      const category = await storage.updateExpenseCategory(req.params.id, categoryData);\n      if (!category) {\n        return res.status(404).json({ message: \"Expense category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update expense category\" });\n    }\n  });\n\n  app.delete(\"/api/expense-categories/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteExpenseCategory(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Expense category not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete expense category\" });\n    }\n  });\n\n  // Expense routes\n  app.get(\"/api/expenses\", authenticateToken, async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.get(\"/api/expenses/:id\", authenticateToken, async (req, res) => {\n    try {\n      const expense = await storage.getExpense(req.params.id);\n      if (!expense) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n      res.json(expense);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expense\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", authenticateToken, async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Enhanced Ledger routes\n  app.get(\"/api/ledgers/retailer/:retailerId\", authenticateToken, async (req, res) => {\n    try {\n      const ledger = await storage.getRetailerLedger(req.params.retailerId);\n      res.json(ledger);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch retailer ledger\" });\n    }\n  });\n\n  app.get(\"/api/ledgers/udhaar\", authenticateToken, async (req, res) => {\n    try {\n      const udhaaarBook = await storage.getUdhaaarBook();\n      res.json(udhaaarBook);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch udhaar book\" });\n    }\n  });\n\n  app.get(\"/api/ledgers/crates\", authenticateToken, async (req, res) => {\n    try {\n      const retailerId = req.query.retailerId as string;\n      const crateLedger = await storage.getCrateLedger(retailerId);\n      res.json(crateLedger);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch crate ledger\" });\n    }\n  });\n\n  // Dashboard KPIs\n  app.get(\"/api/dashboard/kpis\", authenticateToken, async (req, res) => {\n    try {\n      const kpis = await storage.getDashboardKPIs();\n      res.json(kpis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard KPIs\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":28867},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Vendor,\n  type InsertVendor,\n  type Item,\n  type InsertItem,\n  type BankAccount,\n  type InsertBankAccount,\n  type PurchaseInvoice,\n  type InsertPurchaseInvoice,\n  type InvoiceItem,\n  type InsertInvoiceItem,\n  type Payment,\n  type InsertPayment,\n  type Stock,\n  type InsertStock,\n  type StockMovement,\n  type InsertStockMovement,\n  type CashbookEntry,\n  type BankbookEntry,\n  type InvoiceWithItems,\n  type PaymentWithDetails,\n  type StockWithItem,\n  type Retailer,\n  type InsertRetailer,\n  type SalesInvoice,\n  type InsertSalesInvoice,\n  type SalesInvoiceItem,\n  type InsertSalesInvoiceItem,\n  type SalesPayment,\n  type InsertSalesPayment,\n  type CrateTransaction,\n  type InsertCrateTransaction,\n  type ExpenseCategory,\n  type InsertExpenseCategory,\n  type Expense,\n  type InsertExpense,\n  type SalesInvoiceWithDetails,\n  type ExpenseWithCategory,\n  type CrateTransactionWithRetailer\n} from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { eq, desc, and, asc, sum, sql } from \"drizzle-orm\";\nimport { \n  users, \n  vendors, \n  items, \n  bankAccounts, \n  purchaseInvoices, \n  invoiceItems, \n  payments, \n  stock, \n  stockMovements, \n  cashbook, \n  bankbook,\n  retailers,\n  salesInvoices,\n  salesInvoiceItems,\n  salesPayments,\n  crateTransactions,\n  expenseCategories,\n  expenses\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User management\n  getUsers(): Promise<User[]>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  updateUserPermissions(id: string, permissions: string[]): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  \n  // Vendor management\n  getVendors(): Promise<Vendor[]>;\n  getVendor(id: string): Promise<Vendor | undefined>;\n  createVendor(vendor: InsertVendor): Promise<Vendor>;\n  updateVendor(id: string, vendor: Partial<InsertVendor>): Promise<Vendor | undefined>;\n  deleteVendor(id: string): Promise<boolean>;\n  \n  // Item management\n  getItems(): Promise<Item[]>;\n  getItemsByVendor(vendorId: string): Promise<Item[]>;\n  getItem(id: string): Promise<Item | undefined>;\n  createItem(item: InsertItem): Promise<Item>;\n  updateItem(id: string, item: Partial<InsertItem>): Promise<Item | undefined>;\n  deleteItem(id: string): Promise<boolean>;\n  \n  // Bank account management\n  getBankAccounts(): Promise<BankAccount[]>;\n  getBankAccount(id: string): Promise<BankAccount | undefined>;\n  createBankAccount(account: InsertBankAccount): Promise<BankAccount>;\n  updateBankAccount(id: string, account: Partial<InsertBankAccount>): Promise<BankAccount | undefined>;\n  \n  // Purchase invoice management\n  getPurchaseInvoices(): Promise<InvoiceWithItems[]>;\n  getPurchaseInvoice(id: string): Promise<InvoiceWithItems | undefined>;\n  createPurchaseInvoice(invoice: InsertPurchaseInvoice, items: InsertInvoiceItem[]): Promise<InvoiceWithItems>;\n  \n  // Payment management\n  getPayments(): Promise<PaymentWithDetails[]>;\n  getPaymentsByInvoice(invoiceId: string): Promise<PaymentWithDetails[]>;\n  createPayment(payment: InsertPayment): Promise<PaymentWithDetails>;\n  \n  // Stock management\n  getStock(): Promise<StockWithItem[]>;\n  getStockByItem(itemId: string): Promise<Stock | undefined>;\n  updateStock(itemId: string, stock: Partial<InsertStock>): Promise<Stock>;\n  \n  // Stock movement management\n  getStockMovements(): Promise<StockMovement[]>;\n  getStockMovementsByItem(itemId: string): Promise<any[]>;\n  getAvailableStockOutEntriesByVendor(vendorId: string): Promise<any[]>;\n  createStockMovement(movement: InsertStockMovement): Promise<StockMovement>;\n  calculateStockBalance(itemId: string): Promise<{ crates: number; kgs: number; boxes: number }>;\n  \n  // Retailer management\n  getRetailers(): Promise<Retailer[]>;\n  getRetailer(id: string): Promise<Retailer | undefined>;\n  createRetailer(retailer: InsertRetailer): Promise<Retailer>;\n  updateRetailer(id: string, retailer: Partial<InsertRetailer>): Promise<Retailer | undefined>;\n  deleteRetailer(id: string): Promise<boolean>;\n  \n  // Sales invoice management\n  getSalesInvoices(): Promise<SalesInvoiceWithDetails[]>;\n  getSalesInvoice(id: string): Promise<SalesInvoiceWithDetails | undefined>;\n  createSalesInvoice(invoice: InsertSalesInvoice, items: InsertSalesInvoiceItem[]): Promise<SalesInvoiceWithDetails>;\n  markSalesInvoiceAsPaid(invoiceId: string): Promise<{ invoice: SalesInvoice; shortfallAdded: string; retailer: Retailer }>;\n  \n  // Sales payment management\n  getSalesPayments(): Promise<SalesPayment[]>;\n  getSalesPaymentsByInvoice(invoiceId: string): Promise<SalesPayment[]>;\n  createSalesPayment(payment: InsertSalesPayment): Promise<SalesPayment>;\n  \n  // Crate management\n  getCrateTransactions(): Promise<CrateTransactionWithRetailer[]>;\n  getCrateTransactionsByRetailer(retailerId: string): Promise<CrateTransaction[]>;\n  createCrateTransaction(transaction: InsertCrateTransaction): Promise<CrateTransaction>;\n  \n  // Expense category management\n  getExpenseCategories(): Promise<ExpenseCategory[]>;\n  getExpenseCategory(id: string): Promise<ExpenseCategory | undefined>;\n  createExpenseCategory(category: InsertExpenseCategory): Promise<ExpenseCategory>;\n  updateExpenseCategory(id: string, category: Partial<InsertExpenseCategory>): Promise<ExpenseCategory | undefined>;\n  deleteExpenseCategory(id: string): Promise<boolean>;\n  \n  // Expense management\n  getExpenses(): Promise<ExpenseWithCategory[]>;\n  getExpense(id: string): Promise<ExpenseWithCategory | undefined>;\n  createExpense(expense: InsertExpense): Promise<ExpenseWithCategory>;\n  \n  // Ledger and book management\n  getCashbook(): Promise<CashbookEntry[]>;\n  getBankbook(bankAccountId?: string): Promise<BankbookEntry[]>;\n  getVendorLedger(vendorId: string): Promise<any[]>;\n  getRetailerLedger(retailerId: string): Promise<any[]>;\n  getUdhaaarBook(): Promise<any[]>;\n  getCrateLedger(retailerId?: string): Promise<any[]>;\n  \n  // Dashboard KPIs\n  getDashboardKPIs(): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User management\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(asc(users.createdAt));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, password: hashedPassword })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, insertUser: Partial<InsertUser>): Promise<User | undefined> {\n    const updateData = { ...insertUser };\n    if (updateData.password) {\n      updateData.password = await bcrypt.hash(updateData.password, 10);\n    }\n    const [user] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async updateUserPermissions(id: string, permissions: string[]): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ permissions })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Vendor management\n  async getVendors(): Promise<Vendor[]> {\n    return await db.select().from(vendors).where(eq(vendors.isActive, true)).orderBy(asc(vendors.name));\n  }\n\n  async getVendor(id: string): Promise<Vendor | undefined> {\n    const [vendor] = await db.select().from(vendors).where(eq(vendors.id, id));\n    return vendor || undefined;\n  }\n\n  async createVendor(insertVendor: InsertVendor): Promise<Vendor> {\n    const [vendor] = await db.insert(vendors).values(insertVendor).returning();\n    return vendor;\n  }\n\n  async updateVendor(id: string, insertVendor: Partial<InsertVendor>): Promise<Vendor | undefined> {\n    const [vendor] = await db\n      .update(vendors)\n      .set(insertVendor)\n      .where(eq(vendors.id, id))\n      .returning();\n    return vendor || undefined;\n  }\n\n  async deleteVendor(id: string): Promise<boolean> {\n    const [vendor] = await db\n      .update(vendors)\n      .set({ isActive: false })\n      .where(eq(vendors.id, id))\n      .returning();\n    return !!vendor;\n  }\n\n  // Item management\n  async getItems(): Promise<Item[]> {\n    return await db.select().from(items).where(eq(items.isActive, true)).orderBy(asc(items.name));\n  }\n\n  async getItemsByVendor(vendorId: string): Promise<Item[]> {\n    return await db.select().from(items)\n      .where(and(eq(items.vendorId, vendorId), eq(items.isActive, true)))\n      .orderBy(asc(items.name));\n  }\n\n  async getItem(id: string): Promise<Item | undefined> {\n    const [item] = await db.select().from(items).where(eq(items.id, id));\n    return item || undefined;\n  }\n\n  async createItem(insertItem: InsertItem): Promise<Item> {\n    const [item] = await db.insert(items).values(insertItem).returning();\n    return item;\n  }\n\n  async updateItem(id: string, insertItem: Partial<InsertItem>): Promise<Item | undefined> {\n    const [item] = await db\n      .update(items)\n      .set(insertItem)\n      .where(eq(items.id, id))\n      .returning();\n    return item || undefined;\n  }\n\n  async deleteItem(id: string): Promise<boolean> {\n    const [item] = await db\n      .update(items)\n      .set({ isActive: false })\n      .where(eq(items.id, id))\n      .returning();\n    return !!item;\n  }\n\n  // Bank account management\n  async getBankAccounts(): Promise<BankAccount[]> {\n    return await db.select().from(bankAccounts).where(eq(bankAccounts.isActive, true)).orderBy(asc(bankAccounts.name));\n  }\n\n  async getBankAccount(id: string): Promise<BankAccount | undefined> {\n    const [account] = await db.select().from(bankAccounts).where(eq(bankAccounts.id, id));\n    return account || undefined;\n  }\n\n  async createBankAccount(insertAccount: InsertBankAccount): Promise<BankAccount> {\n    const [account] = await db.insert(bankAccounts).values(insertAccount).returning();\n    return account;\n  }\n\n  async updateBankAccount(id: string, insertAccount: Partial<InsertBankAccount>): Promise<BankAccount | undefined> {\n    const [account] = await db\n      .update(bankAccounts)\n      .set(insertAccount)\n      .where(eq(bankAccounts.id, id))\n      .returning();\n    return account || undefined;\n  }\n\n  // Purchase invoice management\n  async getPurchaseInvoices(): Promise<InvoiceWithItems[]> {\n    const invoices = await db.select().from(purchaseInvoices)\n      .orderBy(desc(purchaseInvoices.createdAt));\n\n    const result = [];\n    for (const invoice of invoices) {\n      const [vendor] = await db.select().from(vendors)\n        .where(eq(vendors.id, invoice.vendorId));\n      const invoiceItemsList = await db.select().from(invoiceItems)\n        .where(eq(invoiceItems.invoiceId, invoice.id));\n      result.push({ ...invoice, vendor: vendor || null, items: invoiceItemsList });\n    }\n    return result;\n  }\n\n  async getPurchaseInvoice(id: string): Promise<InvoiceWithItems | undefined> {\n    const [invoice] = await db.select().from(purchaseInvoices)\n      .where(eq(purchaseInvoices.id, id));\n\n    if (!invoice) return undefined;\n\n    const [vendor] = await db.select().from(vendors)\n      .where(eq(vendors.id, invoice.vendorId));\n    const itemsList = await db.select().from(invoiceItems)\n      .where(eq(invoiceItems.invoiceId, invoice.id));\n    return { ...invoice, vendor: vendor || null, items: itemsList };\n  }\n\n  async createPurchaseInvoice(insertInvoice: InsertPurchaseInvoice, itemsList: InsertInvoiceItem[]): Promise<InvoiceWithItems> {\n    const invoiceNumber = `PI${String(Date.now()).slice(-6)}`;\n    const [invoice] = await db.insert(purchaseInvoices).values({\n      ...insertInvoice,\n      invoiceNumber,\n      status: \"Unpaid\",\n      balanceAmount: insertInvoice.netAmount,\n    }).returning();\n\n    const insertedItems = await db.insert(invoiceItems).values(\n      itemsList.map(item => ({ ...item, invoiceId: invoice.id }))\n    ).returning();\n\n    const [vendor] = await db.select().from(vendors).where(eq(vendors.id, invoice.vendorId));\n    return { ...invoice, vendor: vendor || null, items: insertedItems };\n  }\n\n  // Payment management\n  async getPayments(): Promise<PaymentWithDetails[]> {\n    const paymentsList = await db.select().from(payments)\n      .orderBy(desc(payments.createdAt));\n    \n    const result = [];\n    for (const payment of paymentsList) {\n      const [invoice] = await db.select().from(purchaseInvoices)\n        .where(eq(purchaseInvoices.id, payment.invoiceId));\n      const [vendor] = await db.select().from(vendors)\n        .where(eq(vendors.id, payment.vendorId));\n      const [bankAccount] = payment.bankAccountId ? \n        await db.select().from(bankAccounts).where(eq(bankAccounts.id, payment.bankAccountId)) : [null];\n      \n      result.push({ \n        ...payment, \n        invoice: invoice || null, \n        vendor: vendor || null, \n        bankAccount: bankAccount || null \n      });\n    }\n    return result as PaymentWithDetails[];\n  }\n\n  async getPaymentsByInvoice(invoiceId: string): Promise<PaymentWithDetails[]> {\n    const paymentsList = await db.select().from(payments)\n      .where(eq(payments.invoiceId, invoiceId))\n      .orderBy(desc(payments.createdAt));\n    \n    const result = [];\n    for (const payment of paymentsList) {\n      const [invoice] = await db.select().from(purchaseInvoices)\n        .where(eq(purchaseInvoices.id, payment.invoiceId));\n      const [vendor] = await db.select().from(vendors)\n        .where(eq(vendors.id, payment.vendorId));\n      const [bankAccount] = payment.bankAccountId ? \n        await db.select().from(bankAccounts).where(eq(bankAccounts.id, payment.bankAccountId)) : [null];\n      \n      result.push({ \n        ...payment, \n        invoice: invoice || null, \n        vendor: vendor || null, \n        bankAccount: bankAccount || null \n      });\n    }\n    return result as PaymentWithDetails[];\n  }\n\n  async createPayment(insertPayment: InsertPayment): Promise<PaymentWithDetails> {\n    const [payment] = await db.insert(payments).values(insertPayment).returning();\n    \n    const [invoice] = await db.select().from(purchaseInvoices)\n      .where(eq(purchaseInvoices.id, payment.invoiceId));\n    const [vendor] = await db.select().from(vendors)\n      .where(eq(vendors.id, payment.vendorId));\n    const [bankAccount] = payment.bankAccountId ? \n      await db.select().from(bankAccounts).where(eq(bankAccounts.id, payment.bankAccountId)) : [null];\n    \n    return { \n      ...payment, \n      invoice: invoice || null, \n      vendor: vendor || null, \n      bankAccount: bankAccount || null \n    } as PaymentWithDetails;\n  }\n\n  // Stock management\n  async getStock(): Promise<StockWithItem[]> {\n    const stockList = await db.select().from(stock);\n    \n    const result = [];\n    for (const stockItem of stockList) {\n      const [item] = await db.select().from(items)\n        .where(eq(items.id, stockItem.itemId));\n      if (item) {\n        const [vendor] = await db.select().from(vendors)\n          .where(eq(vendors.id, item.vendorId!));\n        result.push({\n          ...stockItem,\n          item: { ...item, vendor: vendor || null }\n        });\n      }\n    }\n    return result as StockWithItem[];\n  }\n\n  async getStockByItem(itemId: string): Promise<Stock | undefined> {\n    const [stockItem] = await db.select().from(stock).where(eq(stock.itemId, itemId));\n    return stockItem || undefined;\n  }\n\n  async updateStock(itemId: string, insertStock: Partial<InsertStock>): Promise<Stock> {\n    const existing = await this.getStockByItem(itemId);\n    if (existing) {\n      const [updated] = await db\n        .update(stock)\n        .set({ ...insertStock, lastUpdated: new Date() })\n        .where(eq(stock.itemId, itemId))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(stock).values({ ...insertStock, itemId }).returning();\n      return created;\n    }\n  }\n\n  // Stock movement management\n  async getStockMovements(): Promise<StockMovement[]> {\n    return await db.select().from(stockMovements).orderBy(desc(stockMovements.createdAt));\n  }\n\n  async getStockMovementsByItem(itemId: string): Promise<any[]> {\n    const movements = await db.select().from(stockMovements)\n      .where(eq(stockMovements.itemId, itemId))\n      .orderBy(desc(stockMovements.createdAt));\n    \n    const result = [];\n    for (const movement of movements) {\n      const [item] = await db.select().from(items)\n        .where(eq(items.id, movement.itemId));\n      if (item) {\n        const [vendor] = await db.select().from(vendors)\n          .where(eq(vendors.id, item.vendorId!));\n        result.push({\n          ...movement,\n          item: { ...item, vendor: vendor || null }\n        });\n      }\n    }\n    return result;\n  }\n\n  async getAvailableStockOutEntriesByVendor(vendorId: string): Promise<any[]> {\n    // Get stock movements of type \"OUT\" for items owned by the vendor\n    const movements = await db.select().from(stockMovements)\n      .innerJoin(items, eq(stockMovements.itemId, items.id))\n      .where(\n        and(\n          eq(items.vendorId, vendorId),\n          eq(stockMovements.movementType, \"OUT\")\n        )\n      )\n      .orderBy(desc(stockMovements.createdAt));\n    \n    const result = [];\n    for (const movement of movements) {\n      result.push({\n        ...movement.stock_movements,\n        item: movement.items\n      });\n    }\n    return result;\n  }\n\n  async createStockMovement(insertMovement: InsertStockMovement): Promise<StockMovement> {\n    const [movement] = await db.insert(stockMovements).values(insertMovement).returning();\n    \n    // Update stock balance after movement\n    const balance = await this.calculateStockBalance(insertMovement.itemId);\n    await this.updateStock(insertMovement.itemId, {\n      quantityInCrates: balance.crates.toString(),\n      quantityInBoxes: balance.boxes.toString(),\n      quantityInKgs: balance.kgs.toString()\n    });\n    \n    return movement;\n  }\n\n  async calculateStockBalance(itemId: string): Promise<{ crates: number; kgs: number; boxes: number }> {\n    const movements = await db.select().from(stockMovements).where(eq(stockMovements.itemId, itemId));\n    \n    let totalCrates = 0;\n    let totalKgs = 0;\n    let totalBoxes = 0;\n    \n    movements.forEach(movement => {\n      const cratesQty = parseFloat(movement.quantityInCrates);\n      const kgsQty = parseFloat(movement.quantityInKgs);\n      const boxesQty = parseFloat(movement.quantityInBoxes || \"0\");\n      \n      if (movement.movementType === \"IN\") {\n        totalCrates += cratesQty;\n        totalKgs += kgsQty;\n        totalBoxes += boxesQty;\n      } else {\n        totalCrates -= cratesQty;\n        totalKgs -= kgsQty;\n        totalBoxes -= boxesQty;\n      }\n    });\n    \n    return { \n      crates: Math.max(0, totalCrates), \n      kgs: Math.max(0, totalKgs),\n      boxes: Math.max(0, totalBoxes)\n    };\n  }\n\n  // Retailer management\n  async getRetailers(): Promise<Retailer[]> {\n    return await db.select().from(retailers).where(eq(retailers.isActive, true)).orderBy(asc(retailers.name));\n  }\n\n  async getRetailer(id: string): Promise<Retailer | undefined> {\n    const [retailer] = await db.select().from(retailers).where(eq(retailers.id, id));\n    return retailer || undefined;\n  }\n\n  async createRetailer(insertRetailer: InsertRetailer): Promise<Retailer> {\n    const [retailer] = await db.insert(retailers).values(insertRetailer).returning();\n    return retailer;\n  }\n\n  async updateRetailer(id: string, insertRetailer: Partial<InsertRetailer>): Promise<Retailer | undefined> {\n    const [retailer] = await db\n      .update(retailers)\n      .set(insertRetailer)\n      .where(eq(retailers.id, id))\n      .returning();\n    return retailer || undefined;\n  }\n\n  async deleteRetailer(id: string): Promise<boolean> {\n    const [retailer] = await db\n      .update(retailers)\n      .set({ isActive: false })\n      .where(eq(retailers.id, id))\n      .returning();\n    return !!retailer;\n  }\n\n  // Sales invoice management\n  async getSalesInvoices(): Promise<SalesInvoiceWithDetails[]> {\n    const invoices = await db.select().from(salesInvoices)\n      .orderBy(desc(salesInvoices.createdAt));\n\n    const result = [];\n    for (const invoice of invoices) {\n      const [retailer] = await db.select().from(retailers)\n        .where(eq(retailers.id, invoice.retailerId));\n      const itemsList = await db.select().from(salesInvoiceItems)\n        .where(eq(salesInvoiceItems.invoiceId, invoice.id));\n      const paymentsList = await db.select().from(salesPayments)\n        .where(eq(salesPayments.invoiceId, invoice.id));\n      result.push({ ...invoice, retailer: retailer || null, items: itemsList, payments: paymentsList });\n    }\n    return result;\n  }\n\n  async getSalesInvoice(id: string): Promise<SalesInvoiceWithDetails | undefined> {\n    const [invoice] = await db.select().from(salesInvoices)\n      .where(eq(salesInvoices.id, id));\n\n    if (!invoice) return undefined;\n\n    const [retailer] = await db.select().from(retailers)\n      .where(eq(retailers.id, invoice.retailerId));\n    const itemsList = await db.select().from(salesInvoiceItems)\n      .where(eq(salesInvoiceItems.invoiceId, invoice.id));\n    const paymentsList = await db.select().from(salesPayments)\n      .where(eq(salesPayments.invoiceId, invoice.id));\n    return { ...invoice, retailer: retailer || null, items: itemsList, payments: paymentsList };\n  }\n\n  async createSalesInvoice(insertInvoice: InsertSalesInvoice, itemsList: InsertSalesInvoiceItem[]): Promise<SalesInvoiceWithDetails> {\n    const invoiceNumber = `SI${String(Date.now()).slice(-6)}`;\n    const [invoice] = await db.insert(salesInvoices).values({\n      ...insertInvoice,\n      invoiceNumber,\n      status: \"Unpaid\",\n      balanceAmount: insertInvoice.totalAmount,\n    }).returning();\n\n    const insertedItems = await db.insert(salesInvoiceItems).values(\n      itemsList.map(item => ({ ...item, invoiceId: invoice.id }))\n    ).returning();\n\n    const [retailer] = await db.select().from(retailers).where(eq(retailers.id, invoice.retailerId));\n    return { ...invoice, retailer: retailer || null, items: insertedItems, payments: [] };\n  }\n\n  async markSalesInvoiceAsPaid(invoiceId: string): Promise<{ invoice: SalesInvoice; shortfallAdded: string; retailer: Retailer }> {\n    const [invoice] = await db.select().from(salesInvoices).where(eq(salesInvoices.id, invoiceId));\n    if (!invoice) throw new Error(\"Invoice not found\");\n\n    const shortfallAmount = parseFloat(invoice.balanceAmount);\n    const [updatedInvoice] = await db\n      .update(salesInvoices)\n      .set({ \n        paidAmount: invoice.totalAmount, \n        balanceAmount: \"0.00\", \n        shortfallAmount: shortfallAmount.toString(),\n        status: \"Paid\" \n      })\n      .where(eq(salesInvoices.id, invoiceId))\n      .returning();\n\n    const [retailer] = await db.select().from(retailers).where(eq(retailers.id, invoice.retailerId));\n    const newShortfallBalance = parseFloat(retailer.shortfallBalance || \"0\") + shortfallAmount;\n    await db\n      .update(retailers)\n      .set({ shortfallBalance: newShortfallBalance.toString() })\n      .where(eq(retailers.id, retailer.id));\n\n    const [updatedRetailer] = await db.select().from(retailers).where(eq(retailers.id, retailer.id));\n    return { invoice: updatedInvoice, shortfallAdded: shortfallAmount.toString(), retailer: updatedRetailer };\n  }\n\n  // Sales payment management\n  async getSalesPayments(): Promise<SalesPayment[]> {\n    return await db.select().from(salesPayments).orderBy(desc(salesPayments.createdAt));\n  }\n\n  async getSalesPaymentsByInvoice(invoiceId: string): Promise<SalesPayment[]> {\n    return await db.select().from(salesPayments)\n      .where(eq(salesPayments.invoiceId, invoiceId))\n      .orderBy(desc(salesPayments.createdAt));\n  }\n\n  async createSalesPayment(insertPayment: InsertSalesPayment): Promise<SalesPayment> {\n    const [payment] = await db.insert(salesPayments).values(insertPayment).returning();\n    return payment;\n  }\n\n  // Crate management\n  async getCrateTransactions(): Promise<CrateTransactionWithRetailer[]> {\n    const transactions = await db.select().from(crateTransactions)\n      .orderBy(desc(crateTransactions.createdAt));\n    \n    const result = [];\n    for (const transaction of transactions) {\n      const [retailer] = await db.select().from(retailers)\n        .where(eq(retailers.id, transaction.retailerId));\n      result.push({ ...transaction, retailer: retailer || null });\n    }\n    return result as CrateTransactionWithRetailer[];\n  }\n\n  async getCrateTransactionsByRetailer(retailerId: string): Promise<CrateTransaction[]> {\n    return await db.select().from(crateTransactions)\n      .where(eq(crateTransactions.retailerId, retailerId))\n      .orderBy(desc(crateTransactions.createdAt));\n  }\n\n  async createCrateTransaction(insertTransaction: InsertCrateTransaction): Promise<CrateTransaction> {\n    const [transaction] = await db.insert(crateTransactions).values(insertTransaction).returning();\n    return transaction;\n  }\n\n  // Expense category management\n  async getExpenseCategories(): Promise<ExpenseCategory[]> {\n    return await db.select().from(expenseCategories).where(eq(expenseCategories.isActive, true)).orderBy(asc(expenseCategories.name));\n  }\n\n  async getExpenseCategory(id: string): Promise<ExpenseCategory | undefined> {\n    const [category] = await db.select().from(expenseCategories).where(eq(expenseCategories.id, id));\n    return category || undefined;\n  }\n\n  async createExpenseCategory(insertCategory: InsertExpenseCategory): Promise<ExpenseCategory> {\n    const [category] = await db.insert(expenseCategories).values(insertCategory).returning();\n    return category;\n  }\n\n  async updateExpenseCategory(id: string, insertCategory: Partial<InsertExpenseCategory>): Promise<ExpenseCategory | undefined> {\n    const [category] = await db\n      .update(expenseCategories)\n      .set(insertCategory)\n      .where(eq(expenseCategories.id, id))\n      .returning();\n    return category || undefined;\n  }\n\n  async deleteExpenseCategory(id: string): Promise<boolean> {\n    const [category] = await db\n      .update(expenseCategories)\n      .set({ isActive: false })\n      .where(eq(expenseCategories.id, id))\n      .returning();\n    return !!category;\n  }\n\n  // Expense management\n  async getExpenses(): Promise<ExpenseWithCategory[]> {\n    const expensesList = await db.select().from(expenses)\n      .orderBy(desc(expenses.createdAt));\n    \n    const result = [];\n    for (const expense of expensesList) {\n      const [category] = await db.select().from(expenseCategories)\n        .where(eq(expenseCategories.id, expense.categoryId));\n      const [bankAccount] = expense.bankAccountId ? \n        await db.select().from(bankAccounts).where(eq(bankAccounts.id, expense.bankAccountId)) : [null];\n      \n      result.push({ \n        ...expense, \n        category: category || null, \n        bankAccount: bankAccount || null \n      });\n    }\n    return result as ExpenseWithCategory[];\n  }\n\n  async getExpense(id: string): Promise<ExpenseWithCategory | undefined> {\n    const [expense] = await db.select().from(expenses)\n      .where(eq(expenses.id, id));\n    \n    if (!expense) return undefined;\n    \n    const [category] = await db.select().from(expenseCategories)\n      .where(eq(expenseCategories.id, expense.categoryId));\n    const [bankAccount] = expense.bankAccountId ? \n      await db.select().from(bankAccounts).where(eq(bankAccounts.id, expense.bankAccountId)) : [null];\n    \n    return { \n      ...expense, \n      category: category || null, \n      bankAccount: bankAccount || null \n    } as ExpenseWithCategory;\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<ExpenseWithCategory> {\n    const [expense] = await db.insert(expenses).values(insertExpense).returning();\n    \n    const [category] = await db.select().from(expenseCategories)\n      .where(eq(expenseCategories.id, expense.categoryId));\n    const [bankAccount] = expense.bankAccountId ? \n      await db.select().from(bankAccounts).where(eq(bankAccounts.id, expense.bankAccountId)) : [null];\n    \n    return { \n      ...expense, \n      category: category || null, \n      bankAccount: bankAccount || null \n    } as ExpenseWithCategory;\n  }\n\n  // Ledger and book management (simplified implementations)\n  async getCashbook(): Promise<CashbookEntry[]> {\n    return await db.select().from(cashbook).orderBy(desc(cashbook.date));\n  }\n\n  async getBankbook(bankAccountId?: string): Promise<BankbookEntry[]> {\n    const query = db.select().from(bankbook);\n    if (bankAccountId) {\n      query.where(eq(bankbook.bankAccountId, bankAccountId));\n    }\n    return await query.orderBy(desc(bankbook.date));\n  }\n\n  async getVendorLedger(vendorId: string): Promise<any[]> {\n    return [];\n  }\n\n  async getRetailerLedger(retailerId: string): Promise<any[]> {\n    return [];\n  }\n\n  async getUdhaaarBook(): Promise<any[]> {\n    return [];\n  }\n\n  async getCrateLedger(retailerId?: string): Promise<any[]> {\n    return [];\n  }\n\n  // Dashboard KPIs (simplified implementation)\n  async getDashboardKPIs(): Promise<any> {\n    const vendorsList = await db.select().from(vendors).where(eq(vendors.isActive, true));\n    const retailersList = await db.select().from(retailers).where(eq(retailers.isActive, true));\n    const purchaseInvoicesList = await db.select().from(purchaseInvoices);\n    const salesInvoicesList = await db.select().from(salesInvoices);\n    const pendingInvoicesList = await db.select().from(purchaseInvoices).where(eq(purchaseInvoices.status, \"Partially Paid\"));\n    \n    // Calculate total stock value (simplified)\n    const stockItems = await db.select().from(stock);\n    let totalStockValue = 0;\n    let totalStockKgs = 0;\n    \n    stockItems.forEach(item => {\n      const kgs = parseFloat(item.quantityInKgs || \"0\");\n      totalStockKgs += kgs;\n      // Estimate stock value at average rate of 40 per kg\n      totalStockValue += kgs * 40;\n    });\n    \n    return {\n      todaySales: \"₹45,250.00\", // Mock data for today's sales\n      pendingPayments: \"₹18,500.00\", // Mock data for pending payments\n      pendingInvoicesCount: pendingInvoicesList.length,\n      activeVendors: vendorsList.length,\n      stockValue: `₹${totalStockValue.toLocaleString('en-IN')}.00`,\n      totalStockKgs: `${totalStockKgs.toFixed(0)} kg`\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":30945},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, uuid, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // Admin, Operator, Accountant\n  name: text(\"name\").notNull(),\n  permissions: text(\"permissions\").array().default([]).notNull(), // Individual user permissions\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const vendors = pgTable(\"vendors\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  contactPerson: text(\"contact_person\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  gstNumber: text(\"gst_number\"),\n  panNumber: text(\"pan_number\"),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const items = pgTable(\"items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  quality: text(\"quality\").notNull(),\n  unit: text(\"unit\").notNull(), // box, crate, kgs\n  vendorId: uuid(\"vendor_id\").references(() => vendors.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bankAccounts = pgTable(\"bank_accounts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  accountNumber: text(\"account_number\").notNull(),\n  bankName: text(\"bank_name\").notNull(),\n  ifscCode: text(\"ifsc_code\"),\n  balance: decimal(\"balance\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const purchaseInvoices = pgTable(\"purchase_invoices\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  vendorId: uuid(\"vendor_id\").references(() => vendors.id).notNull(),\n  invoiceDate: timestamp(\"invoice_date\").notNull(),\n  commission: decimal(\"commission\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  labour: decimal(\"labour\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  truckFreight: decimal(\"truck_freight\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  crateFreight: decimal(\"crate_freight\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  postExpenses: decimal(\"post_expenses\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  draftExpenses: decimal(\"draft_expenses\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  vatav: decimal(\"vatav\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  otherExpenses: decimal(\"other_expenses\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  advance: decimal(\"advance\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  totalExpense: decimal(\"total_expense\", { precision: 10, scale: 2 }).notNull(),\n  totalSelling: decimal(\"total_selling\", { precision: 10, scale: 2 }).notNull(),\n  totalLessExpenses: decimal(\"total_less_expenses\", { precision: 10, scale: 2 }).notNull(),\n  netAmount: decimal(\"net_amount\", { precision: 10, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  balanceAmount: decimal(\"balance_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull(), // Paid, Partially Paid, Unpaid\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: uuid(\"invoice_id\").references(() => purchaseInvoices.id).notNull(),\n  itemId: uuid(\"item_id\").references(() => items.id).notNull(),\n  weight: decimal(\"weight\", { precision: 8, scale: 2 }).notNull(),\n  crates: decimal(\"crates\", { precision: 8, scale: 2 }).notNull(),\n  boxes: decimal(\"boxes\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  rate: decimal(\"rate\", { precision: 8, scale: 2 }).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: uuid(\"invoice_id\").references(() => purchaseInvoices.id).notNull(),\n  vendorId: uuid(\"vendor_id\").references(() => vendors.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMode: text(\"payment_mode\").notNull(), // Cash, Bank, UPI, Cheque\n  paymentDate: timestamp(\"payment_date\").notNull(),\n  bankAccountId: uuid(\"bank_account_id\").references(() => bankAccounts.id),\n  chequeNumber: text(\"cheque_number\"),\n  upiReference: text(\"upi_reference\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const stock = pgTable(\"stock\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemId: uuid(\"item_id\").references(() => items.id).notNull(),\n  quantityInCrates: decimal(\"quantity_in_crates\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  quantityInBoxes: decimal(\"quantity_in_boxes\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  quantityInKgs: decimal(\"quantity_in_kgs\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const stockMovements = pgTable(\"stock_movements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemId: uuid(\"item_id\").references(() => items.id).notNull(),\n  movementType: text(\"movement_type\").notNull(), // \"IN\" or \"OUT\"\n  quantityInCrates: decimal(\"quantity_in_crates\", { precision: 8, scale: 2 }).notNull(),\n  quantityInBoxes: decimal(\"quantity_in_boxes\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  quantityInKgs: decimal(\"quantity_in_kgs\", { precision: 8, scale: 2 }).notNull(),\n  referenceType: text(\"reference_type\").notNull(), // \"PURCHASE_INVOICE\", \"SALES_INVOICE\", \"ADJUSTMENT\"\n  referenceId: uuid(\"reference_id\"), // Links to purchase invoice, sales invoice, etc.\n  referenceNumber: text(\"reference_number\"), // Invoice number for display\n  vendorId: uuid(\"vendor_id\").references(() => vendors.id), // For purchase entries\n  retailerId: uuid(\"retailer_id\").references(() => retailers.id), // For sales entries\n  rate: decimal(\"rate\", { precision: 8, scale: 2 }), // Rate per unit for OUT entries (from sales invoice)\n  purchaseInvoiceId: uuid(\"purchase_invoice_id\").references(() => purchaseInvoices.id), // Tracks which OUT entries are used for purchase invoices\n  notes: text(\"notes\"),\n  movementDate: timestamp(\"movement_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cashbook = pgTable(\"cashbook\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").notNull(),\n  description: text(\"description\").notNull(),\n  inflow: decimal(\"inflow\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  outflow: decimal(\"outflow\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).notNull(),\n  referenceType: text(\"reference_type\"), // Payment, Other\n  referenceId: uuid(\"reference_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bankbook = pgTable(\"bankbook\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bankAccountId: uuid(\"bank_account_id\").references(() => bankAccounts.id).notNull(),\n  date: timestamp(\"date\").notNull(),\n  description: text(\"description\").notNull(),\n  debit: decimal(\"debit\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  credit: decimal(\"credit\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).notNull(),\n  referenceType: text(\"reference_type\"), // Payment, Other\n  referenceId: uuid(\"reference_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const retailers = pgTable(\"retailers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  contactPerson: text(\"contact_person\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  gstNumber: text(\"gst_number\"),\n  panNumber: text(\"pan_number\"),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  udhaaarBalance: decimal(\"udhaar_balance\", { precision: 10, scale: 2 }).default(\"0.00\"), // Credit balance\n  shortfallBalance: decimal(\"shortfall_balance\", { precision: 10, scale: 2 }).default(\"0.00\"), // Deficit balance\n  crateBalance: integer(\"crate_balance\").default(0), // Number of crates with retailer\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const salesInvoices = pgTable(\"sales_invoices\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  retailerId: uuid(\"retailer_id\").references(() => retailers.id).notNull(),\n  invoiceDate: timestamp(\"invoice_date\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  balanceAmount: decimal(\"balance_amount\", { precision: 10, scale: 2 }).notNull(),\n  udhaaarAmount: decimal(\"udhaar_amount\", { precision: 10, scale: 2 }).default(\"0.00\"), // Credit amount\n  shortfallAmount: decimal(\"shortfall_amount\", { precision: 10, scale: 2 }).default(\"0.00\"), // Deficit amount\n  status: text(\"status\").notNull(), // Paid, Partially Paid, Unpaid\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const salesInvoiceItems = pgTable(\"sales_invoice_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: uuid(\"invoice_id\").references(() => salesInvoices.id).notNull(),\n  itemId: uuid(\"item_id\").references(() => items.id).notNull(),\n  weight: decimal(\"weight\", { precision: 8, scale: 2 }).notNull(),\n  crates: decimal(\"crates\", { precision: 8, scale: 2 }).notNull(),\n  boxes: decimal(\"boxes\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  rate: decimal(\"rate\", { precision: 8, scale: 2 }).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const salesPayments = pgTable(\"sales_payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: uuid(\"invoice_id\").references(() => salesInvoices.id).notNull(),\n  retailerId: uuid(\"retailer_id\").references(() => retailers.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMode: text(\"payment_mode\").notNull(), // Cash, Bank, UPI, Cheque, PaymentLink\n  paymentDate: timestamp(\"payment_date\").notNull(),\n  bankAccountId: uuid(\"bank_account_id\").references(() => bankAccounts.id),\n  chequeNumber: text(\"cheque_number\"),\n  upiReference: text(\"upi_reference\"),\n  paymentLinkId: text(\"payment_link_id\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const crateTransactions = pgTable(\"crate_transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailerId: uuid(\"retailer_id\").references(() => retailers.id).notNull(),\n  transactionType: text(\"transaction_type\").notNull(), // Issue, Return\n  quantity: integer(\"quantity\").notNull(), // Number of crates\n  depositAmount: decimal(\"deposit_amount\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  transactionDate: timestamp(\"transaction_date\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const expenseCategories = pgTable(\"expense_categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const expenses = pgTable(\"expenses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  categoryId: uuid(\"category_id\").references(() => expenseCategories.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMode: text(\"payment_mode\").notNull(), // Cash, Bank, UPI, Cheque\n  paymentDate: timestamp(\"payment_date\").notNull(),\n  bankAccountId: uuid(\"bank_account_id\").references(() => bankAccounts.id),\n  chequeNumber: text(\"cheque_number\"),\n  upiReference: text(\"upi_reference\"),\n  description: text(\"description\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVendorSchema = createInsertSchema(vendors).omit({\n  id: true,\n  balance: true,\n  createdAt: true,\n});\n\nexport const insertItemSchema = createInsertSchema(items, {\n  unit: z.enum([\"box\", \"crate\", \"kgs\"], {\n    required_error: \"Unit is required\",\n    invalid_type_error: \"Unit must be box, crate, or kgs\"\n  })\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBankAccountSchema = createInsertSchema(bankAccounts).omit({\n  id: true,\n  balance: true,\n  createdAt: true,\n});\n\nexport const insertPurchaseInvoiceSchema = createInsertSchema(purchaseInvoices, {\n  invoiceDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n}).omit({\n  id: true,\n  invoiceNumber: true,\n  paidAmount: true,\n  balanceAmount: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertInvoiceItemSchema = createInsertSchema(invoiceItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments, {\n  paymentDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStockSchema = createInsertSchema(stock).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertStockMovementSchema = createInsertSchema(stockMovements, {\n  movementDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRetailerSchema = createInsertSchema(retailers).omit({\n  id: true,\n  balance: true,\n  udhaaarBalance: true,\n  shortfallBalance: true,\n  crateBalance: true,\n  createdAt: true,\n});\n\nexport const insertSalesInvoiceSchema = createInsertSchema(salesInvoices, {\n  invoiceDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n}).omit({\n  id: true,\n  invoiceNumber: true,\n  paidAmount: true,\n  balanceAmount: true,\n  udhaaarAmount: true,\n  shortfallAmount: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertSalesInvoiceItemSchema = createInsertSchema(salesInvoiceItems).omit({\n  id: true,\n  invoiceId: true,\n  createdAt: true,\n});\n\nexport const insertSalesPaymentSchema = createInsertSchema(salesPayments, {\n  paymentDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCrateTransactionSchema = createInsertSchema(crateTransactions, {\n  transactionDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExpenseCategorySchema = createInsertSchema(expenseCategories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses, {\n  paymentDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Vendor = typeof vendors.$inferSelect;\nexport type InsertVendor = z.infer<typeof insertVendorSchema>;\n\nexport type Item = typeof items.$inferSelect;\nexport type InsertItem = z.infer<typeof insertItemSchema>;\n\nexport type BankAccount = typeof bankAccounts.$inferSelect;\nexport type InsertBankAccount = z.infer<typeof insertBankAccountSchema>;\n\nexport type PurchaseInvoice = typeof purchaseInvoices.$inferSelect;\nexport type InsertPurchaseInvoice = z.infer<typeof insertPurchaseInvoiceSchema>;\n\nexport type InvoiceItem = typeof invoiceItems.$inferSelect;\nexport type InsertInvoiceItem = z.infer<typeof insertInvoiceItemSchema>;\n\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n\nexport type Stock = typeof stock.$inferSelect;\nexport type InsertStock = z.infer<typeof insertStockSchema>;\n\nexport type StockMovement = typeof stockMovements.$inferSelect;\nexport type InsertStockMovement = z.infer<typeof insertStockMovementSchema>;\n\nexport type StockMovementWithItem = StockMovement & {\n  item: Item & { vendor: Vendor };\n};\n\nexport type Retailer = typeof retailers.$inferSelect;\nexport type InsertRetailer = z.infer<typeof insertRetailerSchema>;\n\nexport type SalesInvoice = typeof salesInvoices.$inferSelect;\nexport type InsertSalesInvoice = z.infer<typeof insertSalesInvoiceSchema>;\n\nexport type SalesInvoiceItem = typeof salesInvoiceItems.$inferSelect;\nexport type InsertSalesInvoiceItem = z.infer<typeof insertSalesInvoiceItemSchema>;\n\nexport type SalesPayment = typeof salesPayments.$inferSelect;\nexport type InsertSalesPayment = z.infer<typeof insertSalesPaymentSchema>;\n\nexport type CrateTransaction = typeof crateTransactions.$inferSelect;\nexport type InsertCrateTransaction = z.infer<typeof insertCrateTransactionSchema>;\n\nexport type ExpenseCategory = typeof expenseCategories.$inferSelect;\nexport type InsertExpenseCategory = z.infer<typeof insertExpenseCategorySchema>;\n\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\n\nexport type CashbookEntry = typeof cashbook.$inferSelect;\nexport type BankbookEntry = typeof bankbook.$inferSelect;\n\n// Additional types for complex operations\nexport type InvoiceWithItems = PurchaseInvoice & {\n  items: InvoiceItem[];\n  vendor: Vendor;\n};\n\nexport type PaymentWithDetails = Payment & {\n  invoice: PurchaseInvoice;\n  vendor: Vendor;\n  bankAccount?: BankAccount;\n};\n\nexport type StockWithItem = Stock & {\n  item: Item & {\n    vendor: Vendor;\n  };\n};\n\nexport type SalesInvoiceWithDetails = SalesInvoice & {\n  retailer: Retailer;\n  items: SalesInvoiceItem[];\n  payments: SalesPayment[];\n};\n\nexport type SalesPaymentWithDetails = SalesPayment & {\n  invoice: SalesInvoice;\n  retailer: Retailer;\n  bankAccount?: BankAccount;\n};\n\nexport type ExpenseWithCategory = Expense & {\n  category: ExpenseCategory;\n  bankAccount?: BankAccount;\n};\n\nexport type CrateTransactionWithRetailer = CrateTransaction & {\n  retailer: Retailer;\n};\n","size_bytes":19064},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Vendors from \"@/pages/vendors\";\nimport Retailers from \"@/pages/retailers\";\nimport Items from \"@/pages/items\";\nimport PurchaseInvoices from \"@/pages/purchase-invoices\";\nimport SalesInvoices from \"@/pages/sales-invoices\";\nimport Expenses from \"@/pages/expenses\";\nimport Crates from \"@/pages/crates\";\nimport Stock from \"@/pages/stock\";\nimport Ledgers from \"@/pages/ledgers\";\nimport Reports from \"@/pages/reports\";\nimport Users from \"@/pages/users\";\nimport Settings from \"@/pages/settings\";\nimport { authService } from \"@/lib/auth\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(authService.isAuthenticated());\n  \n  useEffect(() => {\n    // Check authentication status on mount and when localStorage changes\n    const checkAuth = () => {\n      setIsAuthenticated(authService.isAuthenticated());\n    };\n    \n    // Listen for storage changes (e.g., when login/logout happens)\n    window.addEventListener('storage', checkAuth);\n    \n    // Also check periodically to catch any auth changes\n    const interval = setInterval(checkAuth, 1000);\n    \n    return () => {\n      window.removeEventListener('storage', checkAuth);\n      clearInterval(interval);\n    };\n  }, []);\n  \n  if (!isAuthenticated) {\n    return <Login />;\n  }\n  \n  return <Component />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/vendors\" component={() => <ProtectedRoute component={Vendors} />} />\n      <Route path=\"/retailers\" component={() => <ProtectedRoute component={Retailers} />} />\n      <Route path=\"/items\" component={() => <ProtectedRoute component={Items} />} />\n      <Route path=\"/purchase-invoices\" component={() => <ProtectedRoute component={PurchaseInvoices} />} />\n      <Route path=\"/sales-invoices\" component={() => <ProtectedRoute component={SalesInvoices} />} />\n      <Route path=\"/expenses\" component={() => <ProtectedRoute component={Expenses} />} />\n      <Route path=\"/crates\" component={() => <ProtectedRoute component={Crates} />} />\n      <Route path=\"/stock\" component={() => <ProtectedRoute component={Stock} />} />\n      <Route path=\"/ledgers\" component={() => <ProtectedRoute component={Ledgers} />} />\n      <Route path=\"/reports\" component={() => <ProtectedRoute component={Reports} />} />\n      <Route path=\"/users\" component={() => <ProtectedRoute component={Users} />} />\n      <Route path=\"/settings\" component={() => <ProtectedRoute component={Settings} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3327},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3339},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  name: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n}\n\nexport const authService = {\n  async login(username: string, password: string): Promise<AuthResponse> {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n      username,\n      password,\n    });\n    const data = await response.json();\n    \n    // Store token in localStorage\n    localStorage.setItem(\"token\", data.token);\n    localStorage.setItem(\"user\", JSON.stringify(data.user));\n    \n    return data;\n  },\n\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n  },\n\n  getToken(): string | null {\n    return localStorage.getItem(\"token\");\n  },\n\n  getCurrentUser(): User | null {\n    const user = localStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  },\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  },\n\n  hasRole(roles: string[]): boolean {\n    const user = this.getCurrentUser();\n    return user ? roles.includes(user.role) : false;\n  },\n};\n\n// Add token to all API requests\nconst originalApiRequest = apiRequest;\nexport const authenticatedApiRequest = async (\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<Response> => {\n  const token = authService.getToken();\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n\n  return res;\n};\n","size_bytes":1850},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"token\");\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n    };\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1623},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport KPICards from \"@/components/dashboard/kpi-cards\";\nimport RecentTransactions from \"@/components/dashboard/recent-transactions\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport LowStockAlert from \"@/components/dashboard/low-stock-alert\";\nimport RecentPayments from \"@/components/dashboard/recent-payments\";\nimport { Search, Bell } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { DashboardKPIs } from \"@/types\";\n\nexport default function Dashboard() {\n  const { data: kpis, isLoading: kpisLoading } = useQuery<DashboardKPIs>({\n    queryKey: [\"/api/dashboard/kpis\"],\n  });\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Dashboard</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Overview of your commission merchant operations\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search...\"\n                  className=\"pl-10 w-64\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <KPICards kpis={kpis} loading={kpisLoading} />\n\n          {/* Main Content Grid */}\n          <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-8\">\n            <div className=\"xl:col-span-2\">\n              <RecentTransactions />\n            </div>\n            \n            <div className=\"space-y-6\">\n              <QuickActions />\n              <LowStockAlert />\n              <RecentPayments />\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2569},"client/src/pages/ledgers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { \n  Download, \n  Book, \n  DollarSign, \n  CreditCard, \n  Users, \n  Store,\n  Package,\n  AlertCircle,\n  FileText\n} from \"lucide-react\";\nimport { format, parseISO } from \"date-fns\";\n\nexport default function Ledgers() {\n  const [selectedVendor, setSelectedVendor] = useState(\"all\");\n  const [selectedRetailer, setSelectedRetailer] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState({\n    startDate: format(new Date(new Date().getFullYear(), 0, 1), \"yyyy-MM-dd\"),\n    endDate: format(new Date(), \"yyyy-MM-dd\")\n  });\n\n  // Fetch all data needed for ledgers\n  const { data: purchaseInvoices = [] } = useQuery({\n    queryKey: [\"/api/purchase-invoices\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/purchase-invoices\");\n      return response.json();\n    },\n  });\n\n  const { data: salesInvoices = [] } = useQuery({\n    queryKey: [\"/api/sales-invoices\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/sales-invoices\");\n      return response.json();\n    },\n  });\n\n  const { data: payments = [] } = useQuery({\n    queryKey: [\"/api/payments\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/payments\");\n      return response.json();\n    },\n  });\n\n  const { data: salesPayments = [] } = useQuery({\n    queryKey: [\"/api/sales-payments\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/sales-payments\");\n      return response.json();\n    },\n  });\n\n  const { data: expenses = [] } = useQuery({\n    queryKey: [\"/api/expenses\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/expenses\");\n      return response.json();\n    },\n  });\n\n  const { data: crateTransactions = [] } = useQuery({\n    queryKey: [\"/api/crate-transactions\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/crate-transactions\");\n      return response.json();\n    },\n  });\n\n  const { data: vendors = [] } = useQuery({\n    queryKey: [\"/api/vendors\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/vendors\");\n      return response.json();\n    },\n  });\n\n  const { data: retailers = [] } = useQuery({\n    queryKey: [\"/api/retailers\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/retailers\");\n      return response.json();\n    },\n  });\n\n  const { data: bankAccounts = [] } = useQuery({\n    queryKey: [\"/api/bank-accounts\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/bank-accounts\");\n      return response.json();\n    },\n  });\n\n  const { data: expenseCategories = [] } = useQuery({\n    queryKey: [\"/api/expense-categories\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/expense-categories\");\n      return response.json();\n    },\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    return `₹${parseFloat(amount.toString()).toLocaleString('en-IN')}`;\n  };\n\n  const getVendorName = (vendorId: string) => {\n    const vendor = vendors.find((v: any) => v.id === vendorId);\n    return vendor?.name || \"Unknown Vendor\";\n  };\n\n  const getRetailerName = (retailerId: string) => {\n    const retailer = retailers.find((r: any) => r.id === retailerId);\n    return retailer?.name || \"Unknown Retailer\";\n  };\n\n  const getBankAccountName = (accountId: string) => {\n    const account = bankAccounts.find((a: any) => a.id === accountId);\n    return account?.bankName || \"Unknown Bank\";\n  };\n\n  const getCategoryName = (categoryId: string) => {\n    const category = expenseCategories.find((c: any) => c.id === categoryId);\n    return category?.name || \"Unknown Category\";\n  };\n\n  // Filter data by date range\n  const filterByDate = (data: any[], dateField: string) => {\n    return data.filter((item) => {\n      // Safety check: ensure item and dateField exist\n      if (!item || !item[dateField]) {\n        return false;\n      }\n      \n      try {\n        const itemDate = parseISO(item[dateField]);\n        const startDate = parseISO(dateFilter.startDate);\n        const endDate = parseISO(dateFilter.endDate);\n        \n        // Check if dates are valid\n        if (isNaN(itemDate.getTime()) || isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n          return false;\n        }\n        \n        return itemDate >= startDate && itemDate <= endDate;\n      } catch (error) {\n        console.warn(`Error parsing date for field ${dateField}:`, item[dateField]);\n        return false;\n      }\n    });\n  };\n\n  const filteredPurchases = filterByDate(purchaseInvoices, \"invoiceDate\");\n  const filteredSales = filterByDate(salesInvoices, \"invoiceDate\");\n  const filteredPayments = filterByDate(payments, \"paymentDate\");\n  const filteredSalesPayments = filterByDate(salesPayments, \"paymentDate\");\n  const filteredExpenses = filterByDate(expenses, \"paymentDate\");\n  const filteredCrateTransactions = filterByDate(crateTransactions, \"transactionDate\");\n\n  // Combined Cashbook - All cash and bank transactions with daily balances\n  const getCombinedCashbookEntries = () => {\n    const allEntries: any[] = [];\n\n    // Sales payments (all modes)\n    filteredSalesPayments.forEach((payment: any) => {\n      const sale = salesInvoices.find((s: any) => s.id === payment.salesInvoiceId);\n      const amount = parseFloat(payment.amount || \"0\");\n      allEntries.push({\n        date: payment.paymentDate,\n        description: `${payment.paymentMode} receipt from ${getRetailerName(sale?.retailerId || \"\")}`,\n        paymentMode: payment.paymentMode,\n        bankAccount: payment.paymentMode !== \"Cash\" ? getBankAccountName(payment.bankAccountId || \"\") : \"Cash\",\n        inflow: amount,\n        outflow: 0,\n        type: \"Receipt\",\n      });\n    });\n\n    // Purchase payments (all modes)\n    filteredPayments.forEach((payment: any) => {\n      const purchase = purchaseInvoices.find((p: any) => p.id === payment.invoiceId);\n      const amount = parseFloat(payment.amount || \"0\");\n      allEntries.push({\n        date: payment.paymentDate,\n        description: `${payment.paymentMode} payment to ${getVendorName(purchase?.vendorId || \"\")}`,\n        paymentMode: payment.paymentMode,\n        bankAccount: payment.paymentMode !== \"Cash\" ? getBankAccountName(payment.bankAccountId || \"\") : \"Cash\",\n        inflow: 0,\n        outflow: amount,\n        type: \"Payment\",\n      });\n    });\n\n    // Expenses (all modes)\n    filteredExpenses.forEach((expense: any) => {\n      const amount = parseFloat(expense.amount || \"0\");\n      allEntries.push({\n        date: expense.paymentDate,\n        description: `${expense.paymentMode} expense - ${expense.description}`,\n        paymentMode: expense.paymentMode,\n        bankAccount: expense.paymentMode !== \"Cash\" ? getBankAccountName(expense.bankAccountId || \"\") : \"Cash\",\n        inflow: 0,\n        outflow: amount,\n        type: \"Expense\",\n      });\n    });\n\n    // Crate deposit transactions (cash transactions)\n    filteredCrateTransactions\n      .filter((transaction: any) => parseFloat(transaction.depositAmount || \"0\") > 0)\n      .forEach((transaction: any) => {\n        const amount = parseFloat(transaction.depositAmount || \"0\");\n        const retailerName = getRetailerName(transaction.retailerId);\n        \n        if (transaction.transactionType === \"Given\") {\n          // Retailer pays deposit to business (cash inflow)\n          allEntries.push({\n            date: transaction.transactionDate,\n            description: `Crate deposit received from ${retailerName} - ${transaction.quantity} crates`,\n            paymentMode: \"Cash\",\n            bankAccount: \"Cash\",\n            inflow: amount,\n            outflow: 0,\n            type: \"Crate Deposit\",\n          });\n        } else if (transaction.transactionType === \"Returned\") {\n          // Business pays deposit back to retailer (cash outflow)\n          allEntries.push({\n            date: transaction.transactionDate,\n            description: `Crate deposit returned to ${retailerName} - ${transaction.quantity} crates`,\n            paymentMode: \"Cash\",\n            bankAccount: \"Cash\",\n            inflow: 0,\n            outflow: amount,\n            type: \"Crate Deposit\",\n          });\n        }\n      });\n\n    // Sort entries by date (with validation)\n    const sortedEntries = allEntries\n      .filter(entry => entry.date && !isNaN(new Date(entry.date).getTime())) // Filter out invalid dates\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n    // Calculate running balance and add daily opening/closing\n    let runningBalance = 0;\n    const entriesWithBalance = [];\n    let currentDate = \"\";\n    let dayOpeningBalance = 0;\n\n    for (let i = 0; i < sortedEntries.length; i++) {\n      const entry = sortedEntries[i];\n      \n      // Validate date before formatting\n      if (!entry.date) {\n        console.warn('Entry has no date, skipping:', entry);\n        continue;\n      }\n      \n      let entryDate;\n      try {\n        const dateObj = new Date(entry.date);\n        if (isNaN(dateObj.getTime())) {\n          console.warn('Invalid date in entry, skipping:', entry.date, entry);\n          continue;\n        }\n        entryDate = format(dateObj, \"yyyy-MM-dd\");\n      } catch (error) {\n        console.warn('Error formatting date, skipping entry:', entry.date, error);\n        continue;\n      }\n      \n      // Add opening balance for new day\n      if (entryDate !== currentDate) {\n        if (currentDate !== \"\") {\n          // Add closing balance for previous day\n          entriesWithBalance.push({\n            date: currentDate,\n            description: \"Day Closing Balance\",\n            paymentMode: \"Balance\",\n            bankAccount: \"All Accounts\",\n            inflow: 0,\n            outflow: 0,\n            balance: runningBalance,\n            type: \"Closing\",\n            isBalanceEntry: true,\n          });\n        }\n        \n        currentDate = entryDate;\n        dayOpeningBalance = runningBalance;\n        \n        // Add opening balance for new day\n        entriesWithBalance.push({\n          date: entryDate,\n          description: \"Day Opening Balance\",\n          paymentMode: \"Balance\",\n          bankAccount: \"All Accounts\",\n          inflow: 0,\n          outflow: 0,\n          balance: runningBalance,\n          type: \"Opening\",\n          isBalanceEntry: true,\n        });\n      }\n      \n      // Calculate new balance\n      runningBalance += entry.inflow - entry.outflow;\n      \n      // Add the actual transaction\n      entriesWithBalance.push({\n        ...entry,\n        balance: runningBalance,\n        isBalanceEntry: false,\n      });\n    }\n    \n    // Add final closing balance\n    if (currentDate !== \"\") {\n      entriesWithBalance.push({\n        date: currentDate,\n        description: \"Day Closing Balance\",\n        paymentMode: \"Balance\",\n        bankAccount: \"All Accounts\",\n        inflow: 0,\n        outflow: 0,\n        balance: runningBalance,\n        type: \"Closing\",\n        isBalanceEntry: true,\n      });\n    }\n\n    return entriesWithBalance;\n  };\n\n\n  // 2. Vapari Book (Vendor Ledger) - Vendor-wise purchases, payments, balances\n  const getVendorLedgerEntries = () => {\n    if (selectedVendor === \"all\") return [];\n\n    const entries: any[] = [];\n    let runningBalance = 0;\n\n    // Vendor purchases\n    const vendorPurchases = filteredPurchases.filter((p: any) => p.vendorId === selectedVendor);\n    vendorPurchases.forEach((purchase: any) => {\n      const amount = parseFloat(purchase.totalAmount || \"0\");\n      runningBalance += amount;\n      entries.push({\n        date: purchase.invoiceDate,\n        description: `Purchase Invoice ${purchase.invoiceNumber}`,\n        debit: amount,\n        credit: 0,\n        balance: runningBalance,\n        type: \"Purchase\",\n      });\n    });\n\n    // Vendor payments\n    const vendorPayments = filteredPayments.filter((payment: any) => {\n      const purchase = purchaseInvoices.find((p: any) => p.id === payment.invoiceId);\n      return purchase?.vendorId === selectedVendor;\n    });\n    vendorPayments.forEach((payment: any) => {\n      const amount = parseFloat(payment.amount || \"0\");\n      runningBalance -= amount;\n      entries.push({\n        date: payment.paymentDate,\n        description: `Payment via ${payment.paymentMode}`,\n        debit: 0,\n        credit: amount,\n        balance: runningBalance,\n        type: \"Payment\",\n      });\n    });\n\n    return entries.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  };\n\n  // 3. Retailer Ledger - Retailer-wise sales, payments, balances\n  const getRetailerLedgerEntries = () => {\n    if (selectedRetailer === \"all\") return [];\n\n    const entries: any[] = [];\n    let runningBalance = 0;\n\n    // Retailer sales\n    const retailerSales = filteredSales.filter((s: any) => s.retailerId === selectedRetailer);\n    retailerSales.forEach((sale: any) => {\n      const amount = parseFloat(sale.totalAmount || \"0\");\n      runningBalance += amount;\n      entries.push({\n        date: sale.invoiceDate,\n        description: `Sales Invoice ${sale.invoiceNumber}`,\n        debit: amount,\n        credit: 0,\n        balance: runningBalance,\n        type: \"Sale\",\n      });\n    });\n\n    // Retailer payments\n    const retailerPayments = filteredSalesPayments.filter((payment: any) => {\n      const sale = salesInvoices.find((s: any) => s.id === payment.salesInvoiceId);\n      return sale?.retailerId === selectedRetailer;\n    });\n    retailerPayments.forEach((payment: any) => {\n      const amount = parseFloat(payment.amount || \"0\");\n      runningBalance -= amount;\n      entries.push({\n        date: payment.paymentDate,\n        description: `Payment received via ${payment.paymentMode}`,\n        debit: 0,\n        credit: amount,\n        balance: runningBalance,\n        type: \"Payment\",\n      });\n    });\n\n    // Crate deposit transactions\n    const retailerCrateTransactions = filteredCrateTransactions.filter((transaction: any) => \n      transaction.retailerId === selectedRetailer && parseFloat(transaction.depositAmount || \"0\") > 0\n    );\n    retailerCrateTransactions.forEach((transaction: any) => {\n      const amount = parseFloat(transaction.depositAmount || \"0\");\n      const retailerName = getRetailerName(transaction.retailerId);\n      \n      // \"Given\" transactions = retailer pays deposit (credit to business)\n      // \"Returned\" transactions = retailer gets deposit back (debit from business)\n      if (transaction.transactionType === \"Given\") {\n        runningBalance -= amount; // Credit to business (reduces retailer's debt)\n        entries.push({\n          date: transaction.transactionDate,\n          description: `Crate ${transaction.transactionType} - ${transaction.quantity} crates (Deposit: ₹${amount.toLocaleString('en-IN')})`,\n          debit: 0,\n          credit: amount,\n          balance: runningBalance,\n          type: \"Crate Deposit\",\n        });\n      } else if (transaction.transactionType === \"Returned\") {\n        runningBalance += amount; // Debit to business (increases retailer's receivable)\n        entries.push({\n          date: transaction.transactionDate,\n          description: `Crate ${transaction.transactionType} - ${transaction.quantity} crates (Deposit: ₹${amount.toLocaleString('en-IN')})`,\n          debit: amount,\n          credit: 0,\n          balance: runningBalance,\n          type: \"Crate Deposit\",\n        });\n      }\n    });\n\n    return entries.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  };\n\n  // 6. Udhaar Book - Retailer outstanding credit balances\n  const getUdhaarBookEntries = () => {\n    const retailerBalances: any[] = [];\n\n    retailers.forEach((retailer: any) => {\n      // Calculate total sales to this retailer\n      const retailerSales = filteredSales.filter((s: any) => s.retailerId === retailer.id);\n      const totalSales = retailerSales.reduce((sum: any, sale: any) => sum + parseFloat(sale.totalAmount || \"0\"), 0);\n\n      // Calculate total payments from this retailer\n      const retailerPayments = filteredSalesPayments.filter((payment: any) => {\n        const sale = salesInvoices.find((s: any) => s.id === payment.salesInvoiceId);\n        return sale?.retailerId === retailer.id;\n      });\n      const totalPayments = retailerPayments.reduce((sum, payment) => sum + parseFloat(payment.amount || \"0\"), 0);\n\n      const outstandingBalance = totalSales - totalPayments;\n\n      // Only include retailers with outstanding credit balances (positive amounts)\n      if (outstandingBalance > 0) {\n        const lastSaleDate = retailerSales.length > 0 \n          ? Math.max(...retailerSales.map(s => new Date(s.invoiceDate).getTime()))\n          : null;\n\n        retailerBalances.push({\n          retailer,\n          totalSales,\n          totalPayments,\n          outstandingBalance,\n          lastSaleDate: lastSaleDate ? new Date(lastSaleDate) : null,\n          invoiceCount: retailerSales.length,\n        });\n      }\n    });\n\n    return retailerBalances.sort((a, b) => b.outstandingBalance - a.outstandingBalance);\n  };\n\n  // 7. Crate Ledger - Retailer-wise crate issues, returns, balances\n  const getCrateLedgerEntries = () => {\n    if (selectedRetailer === \"all\") {\n      // Show summary for all retailers\n      const retailerCrateBalances: any[] = [];\n\n      retailers.forEach((retailer: any) => {\n        const retailerTransactions = filteredCrateTransactions.filter((t: any) => t.retailerId === retailer.id);\n        \n        const cratesGiven = retailerTransactions\n          .filter((t: any) => t.transactionType === \"Given\")\n          .reduce((sum: any, t: any) => sum + parseInt(t.quantity || \"0\"), 0);\n        \n        const cratesReturned = retailerTransactions\n          .filter((t: any) => t.transactionType === \"Returned\")\n          .reduce((sum: any, t: any) => sum + parseInt(t.quantity || \"0\"), 0);\n        \n        const balance = cratesGiven - cratesReturned;\n\n        if (cratesGiven > 0 || cratesReturned > 0) {\n          retailerCrateBalances.push({\n            retailer,\n            cratesGiven,\n            cratesReturned,\n            balance,\n            transactions: retailerTransactions.length,\n          });\n        }\n      });\n\n      return retailerCrateBalances;\n    } else {\n      // Show detailed transactions for selected retailer\n      const retailerTransactions = filteredCrateTransactions.filter((t: any) => t.retailerId === selectedRetailer);\n      let runningBalance = 0;\n\n      return retailerTransactions.map((transaction: any) => {\n        const quantity = parseInt(transaction.quantity || \"0\");\n        if (transaction.transactionType === \"Given\") {\n          runningBalance += quantity;\n        } else {\n          runningBalance -= quantity;\n        }\n\n        return {\n          ...transaction,\n          balance: runningBalance,\n        };\n      }).sort((a: any, b: any) => new Date(a.transactionDate).getTime() - new Date(b.transactionDate).getTime());\n    }\n  };\n\n  const cashbookEntries = getCombinedCashbookEntries();\n  const vendorLedgerEntries = getVendorLedgerEntries();\n  const retailerLedgerEntries = getRetailerLedgerEntries();\n  const udhaarBookEntries = getUdhaarBookEntries();\n  const crateLedgerEntries = getCrateLedgerEntries();\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Business Ledgers</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Complete ledger management system for APMC operations\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                type=\"date\"\n                value={dateFilter.startDate}\n                onChange={(e) => setDateFilter(prev => ({ ...prev, startDate: e.target.value }))}\n                className=\"w-40\"\n                data-testid=\"input-start-date\"\n              />\n              <span className=\"text-muted-foreground\">to</span>\n              <Input\n                type=\"date\"\n                value={dateFilter.endDate}\n                onChange={(e) => setDateFilter(prev => ({ ...prev, endDate: e.target.value }))}\n                className=\"w-40\"\n                data-testid=\"input-end-date\"\n              />\n              <Button variant=\"outline\" data-testid=\"button-export-ledger\">\n                <Download className=\"mr-2 h-4 w-4\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <Tabs defaultValue=\"cashbook\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"cashbook\" data-testid=\"tab-cashbook\">Cashbook</TabsTrigger>\n              <TabsTrigger value=\"vapari-book\" data-testid=\"tab-vapari-book\">Vapari Book</TabsTrigger>\n              <TabsTrigger value=\"retailer-ledger\" data-testid=\"tab-retailer-ledger\">Retailer Ledger</TabsTrigger>\n              <TabsTrigger value=\"udhaar-book\" data-testid=\"tab-udhaar-book\">Udhaar Book</TabsTrigger>\n              <TabsTrigger value=\"crate-ledger\" data-testid=\"tab-crate-ledger\">Crate Ledger</TabsTrigger>\n            </TabsList>\n\n\n            {/* Combined Cashbook */}\n            <TabsContent value=\"cashbook\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <DollarSign className=\"h-5 w-5\" />\n                    <span>Cashbook - All Cash & Bank Transactions</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Date</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Payment Mode</TableHead>\n                        <TableHead>Account</TableHead>\n                        <TableHead>Inflow</TableHead>\n                        <TableHead>Outflow</TableHead>\n                        <TableHead>Balance</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {cashbookEntries.map((entry: any, index: number) => (\n                        <TableRow \n                          key={index} \n                          className={entry.isBalanceEntry ? \"bg-muted/50 font-medium\" : \"\"}\n                        >\n                          <TableCell>{format(new Date(entry.date), \"dd/MM/yyyy\")}</TableCell>\n                          <TableCell>{entry.description}</TableCell>\n                          <TableCell>\n                            {entry.isBalanceEntry ? (\n                              <Badge variant=\"secondary\">{entry.paymentMode}</Badge>\n                            ) : (\n                              <Badge variant=\"outline\">{entry.paymentMode}</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>{entry.bankAccount}</TableCell>\n                          <TableCell className=\"text-green-600\">\n                            {entry.inflow > 0 ? formatCurrency(entry.inflow) : \"-\"}\n                          </TableCell>\n                          <TableCell className=\"text-red-600\">\n                            {entry.outflow > 0 ? formatCurrency(entry.outflow) : \"-\"}\n                          </TableCell>\n                          <TableCell className={entry.balance >= 0 ? \"text-green-600 font-medium\" : \"text-red-600 font-medium\"}>\n                            {formatCurrency(entry.balance)}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                      {cashbookEntries.length === 0 && (\n                        <TableRow>\n                          <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                            No transactions found for the selected period\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n\n            {/* 2. Vapari Book (Vendor Ledger) */}\n            <TabsContent value=\"vapari-book\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Users className=\"h-5 w-5\" />\n                      <span>Vapari Book - Vendor Ledger</span>\n                    </CardTitle>\n                    <Select value={selectedVendor} onValueChange={setSelectedVendor}>\n                      <SelectTrigger className=\"w-64\" data-testid=\"select-vendor\">\n                        <SelectValue placeholder=\"Select vendor\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Vendors</SelectItem>\n                        {vendors.map((vendor: any) => (\n                          <SelectItem key={vendor.id} value={vendor.id}>\n                            {vendor.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {selectedVendor === \"all\" ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Please select a vendor to view their ledger\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Date</TableHead>\n                          <TableHead>Description</TableHead>\n                          <TableHead>Type</TableHead>\n                          <TableHead>Debit</TableHead>\n                          <TableHead>Credit</TableHead>\n                          <TableHead>Balance</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {vendorLedgerEntries.map((entry, index) => (\n                          <TableRow key={index}>\n                            <TableCell>{format(new Date(entry.date), \"dd/MM/yyyy\")}</TableCell>\n                            <TableCell>{entry.description}</TableCell>\n                            <TableCell>\n                              <Badge variant={entry.type === \"Purchase\" ? \"destructive\" : \"default\"}>\n                                {entry.type}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>{entry.debit > 0 ? formatCurrency(entry.debit) : \"-\"}</TableCell>\n                            <TableCell className=\"text-green-600\">\n                              {entry.credit > 0 ? formatCurrency(entry.credit) : \"-\"}\n                            </TableCell>\n                            <TableCell className={entry.balance > 0 ? \"text-red-600 font-medium\" : \"text-green-600 font-medium\"}>\n                              {formatCurrency(entry.balance)}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                        {vendorLedgerEntries.length === 0 && (\n                          <TableRow>\n                            <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                              No transactions found for this vendor in the selected period\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* 3. Retailer Ledger */}\n            <TabsContent value=\"retailer-ledger\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Store className=\"h-5 w-5\" />\n                      <span>Retailer Ledger</span>\n                    </CardTitle>\n                    <Select value={selectedRetailer} onValueChange={setSelectedRetailer}>\n                      <SelectTrigger className=\"w-64\" data-testid=\"select-retailer\">\n                        <SelectValue placeholder=\"Select retailer\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Retailers</SelectItem>\n                        {retailers.map((retailer: any) => (\n                          <SelectItem key={retailer.id} value={retailer.id}>\n                            {retailer.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {selectedRetailer === \"all\" ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Please select a retailer to view their ledger\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Date</TableHead>\n                          <TableHead>Description</TableHead>\n                          <TableHead>Type</TableHead>\n                          <TableHead>Debit</TableHead>\n                          <TableHead>Credit</TableHead>\n                          <TableHead>Balance</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {retailerLedgerEntries.map((entry, index) => (\n                          <TableRow key={index}>\n                            <TableCell>{format(new Date(entry.date), \"dd/MM/yyyy\")}</TableCell>\n                            <TableCell>{entry.description}</TableCell>\n                            <TableCell>\n                              <Badge variant={entry.type === \"Sale\" ? \"default\" : \"secondary\"}>\n                                {entry.type}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>{entry.debit > 0 ? formatCurrency(entry.debit) : \"-\"}</TableCell>\n                            <TableCell className=\"text-green-600\">\n                              {entry.credit > 0 ? formatCurrency(entry.credit) : \"-\"}\n                            </TableCell>\n                            <TableCell className={entry.balance > 0 ? \"text-amber-600 font-medium\" : \"text-green-600 font-medium\"}>\n                              {formatCurrency(entry.balance)}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                        {retailerLedgerEntries.length === 0 && (\n                          <TableRow>\n                            <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                              No transactions found for this retailer in the selected period\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* 4. Udhaar Book */}\n            <TabsContent value=\"udhaar-book\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <AlertCircle className=\"h-5 w-5\" />\n                    <span>Udhaar Book - Outstanding Credit Balances</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Retailer</TableHead>\n                        <TableHead>Total Sales</TableHead>\n                        <TableHead>Total Payments</TableHead>\n                        <TableHead>Outstanding Balance</TableHead>\n                        <TableHead>Shortfall Amount</TableHead>\n                        <TableHead>Invoices</TableHead>\n                        <TableHead>Last Sale Date</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {udhaarBookEntries.map((entry, index) => (\n                        <TableRow key={index}>\n                          <TableCell className=\"font-medium\">{entry.retailer.name}</TableCell>\n                          <TableCell>{formatCurrency(entry.totalSales)}</TableCell>\n                          <TableCell className=\"text-green-600\">{formatCurrency(entry.totalPayments)}</TableCell>\n                          <TableCell className=\"text-amber-600 font-bold\">\n                            {formatCurrency(entry.outstandingBalance)}\n                          </TableCell>\n                          <TableCell className=\"text-red-600 font-medium\">\n                            {parseFloat(entry.retailer.shortfallBalance || \"0\") > 0 \n                              ? formatCurrency(entry.retailer.shortfallBalance) \n                              : \"-\"\n                            }\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{entry.invoiceCount}</Badge>\n                          </TableCell>\n                          <TableCell>\n                            {entry.lastSaleDate ? format(entry.lastSaleDate, \"dd/MM/yyyy\") : \"-\"}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                      {udhaarBookEntries.length === 0 && (\n                        <TableRow>\n                          <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                            No outstanding credit balances found\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* 5. Crate Ledger */}\n            <TabsContent value=\"crate-ledger\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Package className=\"h-5 w-5\" />\n                      <span>Crate Ledger</span>\n                    </CardTitle>\n                    <Select value={selectedRetailer} onValueChange={setSelectedRetailer}>\n                      <SelectTrigger className=\"w-64\" data-testid=\"select-retailer-crate\">\n                        <SelectValue placeholder=\"All retailers\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Retailers</SelectItem>\n                        {retailers.map((retailer: any) => (\n                          <SelectItem key={retailer.id} value={retailer.id}>\n                            {retailer.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {selectedRetailer === \"all\" ? (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Retailer</TableHead>\n                          <TableHead>Crates Given</TableHead>\n                          <TableHead>Crates Returned</TableHead>\n                          <TableHead>Current Balance</TableHead>\n                          <TableHead>Total Transactions</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {crateLedgerEntries.map((entry: any, index) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">{entry.retailer.name}</TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\" className=\"text-blue-600\">{entry.cratesGiven}</Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\" className=\"text-green-600\">{entry.cratesReturned}</Badge>\n                            </TableCell>\n                            <TableCell className=\"font-bold\">\n                              <span className={entry.balance > 0 ? \"text-amber-600\" : \"text-green-600\"}>\n                                {entry.balance}\n                              </span>\n                            </TableCell>\n                            <TableCell>{entry.transactions}</TableCell>\n                            <TableCell>\n                              {entry.balance > 0 ? (\n                                <Badge variant=\"destructive\">Outstanding</Badge>\n                              ) : entry.balance === 0 && entry.cratesGiven > 0 ? (\n                                <Badge className=\"bg-green-500\">Settled</Badge>\n                              ) : (\n                                <Badge variant=\"secondary\">No Activity</Badge>\n                              )}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                        {crateLedgerEntries.length === 0 && (\n                          <TableRow>\n                            <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                              No crate transactions found\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </TableBody>\n                    </Table>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Date</TableHead>\n                          <TableHead>Transaction Type</TableHead>\n                          <TableHead>Quantity</TableHead>\n                          <TableHead>Running Balance</TableHead>\n                          <TableHead>Notes</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {crateLedgerEntries.map((entry: any, index) => (\n                          <TableRow key={index}>\n                            <TableCell>{format(new Date(entry.transactionDate), \"dd/MM/yyyy\")}</TableCell>\n                            <TableCell>\n                              <Badge className={entry.transactionType === \"Given\" ? \"bg-blue-500\" : \"bg-green-500\"}>\n                                {entry.transactionType}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"font-medium\">{entry.quantity}</TableCell>\n                            <TableCell className={entry.balance > 0 ? \"text-amber-600 font-bold\" : \"text-green-600 font-bold\"}>\n                              {entry.balance}\n                            </TableCell>\n                            <TableCell>{entry.notes || \"-\"}</TableCell>\n                          </TableRow>\n                        ))}\n                        {crateLedgerEntries.length === 0 && (\n                          <TableRow>\n                            <TableCell colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                              No crate transactions found for this retailer\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":41567},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { Apple } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await authService.login(formData.username, formData.password);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to APMC System\",\n      });\n      // Force a page reload to ensure the authentication state is properly updated\n      window.location.href = \"/\";\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: error instanceof Error ? error.message : \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center\">\n              <Apple className=\"h-8 w-8 text-primary-foreground\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl\">APMC System</CardTitle>\n          <CardDescription>Commission Merchant Accounting System</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                value={formData.username}\n                onChange={handleChange}\n                placeholder=\"Enter your username\"\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                placeholder=\"Enter your password\"\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loading}\n              data-testid=\"button-login\"\n            >\n              {loading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n            Default: admin / admin123\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3521},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/purchase-invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Search, Plus, Eye, CreditCard, History } from \"lucide-react\";\nimport PurchaseInvoiceModal from \"@/components/forms/purchase-invoice-modal\";\nimport InvoiceDetailsModal from \"@/components/modals/invoice-details-modal\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\n\n// Payment form schema\nconst paymentSchema = z.object({\n  invoiceId: z.string().min(1, \"Invoice is required\"),\n  vendorId: z.string().min(1, \"Vendor is required\"),\n  amount: z.number().min(0.01, \"Amount must be greater than 0\"),\n  paymentDate: z.string().min(1, \"Payment date is required\"),\n  paymentMode: z.enum([\"Cash\", \"Bank\", \"UPI\", \"Cheque\"], {\n    required_error: \"Payment mode is required\",\n  }),\n  bankAccountId: z.string().optional(),\n  transactionReference: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\nexport default function PurchaseInvoices() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedInvoice, setSelectedInvoice] = useState<any>(null);\n  \n  // Payment management state\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [paymentHistoryDialogOpen, setPaymentHistoryDialogOpen] = useState(false);\n  const [selectedInvoiceForPayment, setSelectedInvoiceForPayment] = useState<any>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Payment form\n  const paymentForm = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      invoiceId: \"\",\n      vendorId: \"\",\n      amount: 0,\n      paymentDate: format(new Date(), \"yyyy-MM-dd\"),\n      paymentMode: \"Cash\",\n      bankAccountId: \"\",\n      transactionReference: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Fetch data\n  const { data: invoices, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/purchase-invoices\"],\n  });\n\n  const { data: payments = [] } = useQuery({\n    queryKey: [\"/api/payments\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/payments\");\n      return response.json();\n    },\n  });\n\n  const { data: bankAccounts = [] } = useQuery({\n    queryKey: [\"/api/bank-accounts\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/bank-accounts\");\n      return response.json();\n    },\n  });\n\n  // Payment creation mutation\n  const createPaymentMutation = useMutation({\n    mutationFn: async (data: PaymentFormData) => {\n      const paymentData = {\n        ...data,\n        amount: data.amount.toString(), // Convert number to string for backend\n        bankAccountId: data.bankAccountId || null,\n      };\n      const response = await authenticatedApiRequest(\"POST\", \"/api/payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Purchase payment has been recorded successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-invoices\"] });\n      setPaymentDialogOpen(false);\n      paymentForm.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Helper functions\n  const getBankAccountName = (bankAccountId: string) => {\n    const account = bankAccounts.find((account: any) => account.id === bankAccountId);\n    return account?.accountName || \"Unknown Bank\";\n  };\n\n  const getInvoicePayments = (invoiceId: string) => {\n    return payments.filter((payment: any) => payment.invoiceId === invoiceId);\n  };\n\n  const handleRecordPayment = (invoice: any) => {\n    setSelectedInvoiceForPayment(invoice);\n    paymentForm.reset({\n      invoiceId: invoice.id,\n      vendorId: invoice.vendorId,\n      amount: 0,\n      paymentDate: format(new Date(), \"yyyy-MM-dd\"),\n      paymentMode: \"Cash\",\n      bankAccountId: \"\",\n      transactionReference: \"\",\n      notes: \"\",\n    });\n    setPaymentDialogOpen(true);\n  };\n\n  const handleViewPaymentHistory = (invoice: any) => {\n    setSelectedInvoiceForPayment(invoice);\n    setPaymentHistoryDialogOpen(true);\n  };\n\n  const onSubmitPayment = (data: PaymentFormData) => {\n    createPaymentMutation.mutate(data);\n  };\n\n  // Define table columns\n  const columns = [\n    {\n      accessorKey: \"invoiceNumber\",\n      header: \"Invoice Number\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"vendor.name\",\n      header: \"Vendor\",\n      cell: (value: string) => value,\n    },\n    {\n      accessorKey: \"invoiceDate\",\n      header: \"Date\",\n      cell: (value: string) => format(new Date(value), \"MMM dd, yyyy\"),\n    },\n    {\n      accessorKey: \"items\",\n      header: \"Items\",\n      cell: (value: any[]) => `${value?.length || 0} items`,\n    },\n    {\n      accessorKey: \"netAmount\",\n      header: \"Net Amount\",\n      cell: (value: string) => `₹${parseFloat(value).toLocaleString('en-IN')}`,\n    },\n    {\n      accessorKey: \"paidAmount\",\n      header: \"Paid Amount\",\n      cell: (value: string) => `₹${parseFloat(value).toLocaleString('en-IN')}`,\n    },\n    {\n      accessorKey: \"balanceAmount\",\n      header: \"Balance\",\n      cell: (value: string) => `₹${parseFloat(value).toLocaleString('en-IN')}`,\n    },\n    {\n      accessorKey: \"status\",\n      header: \"Status\",\n      cell: (value: string) => (\n        <Badge className={getStatusColor(value)} variant=\"secondary\">\n          {value}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Actions\",\n      cell: (value: string, invoice: any) => (\n        <div className=\"flex items-center space-x-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleViewInvoice(invoice)}\n            data-testid={`button-view-invoice-${invoice.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          \n          {invoice.status !== \"Paid\" && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => handleRecordPayment(invoice)}\n              data-testid={`button-record-payment-${invoice.id}`}\n              title=\"Record Payment\"\n            >\n              <CreditCard className=\"h-4 w-4\" />\n            </Button>\n          )}\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleViewPaymentHistory(invoice)}\n            data-testid={`button-payment-history-${invoice.id}`}\n            title=\"View Payment History\"\n          >\n            <History className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  // Filter invoices with custom logic for status\n  const filteredInvoices = invoices?.filter((invoice: any) => {\n    const matchesStatus = statusFilter === \"all\" || invoice.status === statusFilter;\n    return matchesStatus;\n  }) || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Paid\":\n        return \"bg-chart-2/10 text-chart-2\";\n      case \"Pending\":\n      case \"Unpaid\":\n        return \"bg-chart-1/10 text-chart-1\";\n      case \"Partially Paid\":\n        return \"bg-chart-4/10 text-chart-4\";\n      default:\n        return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const handleViewInvoice = (invoice: any) => {\n    setSelectedInvoice(invoice);\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Purchase Invoices</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage purchase invoices and track payments\n              </p>\n            </div>\n            <Button onClick={() => setShowCreateModal(true)} data-testid=\"button-create-invoice\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Invoice\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>All Invoices</CardTitle>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"Paid\">Paid</SelectItem>\n                      <SelectItem value=\"Partially Paid\">Partially Paid</SelectItem>\n                      <SelectItem value=\"Unpaid\">Unpaid</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search invoices...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                      data-testid=\"input-search-invoices\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                data={filteredInvoices}\n                columns={columns}\n                searchTerm={searchTerm}\n                searchFields={[\"invoiceNumber\", \"vendor.name\"]}\n                isLoading={isLoading}\n                enableRowSelection={true}\n                rowKey=\"id\"\n              />\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      <PurchaseInvoiceModal \n        open={showCreateModal} \n        onOpenChange={setShowCreateModal} \n      />\n\n      <InvoiceDetailsModal\n        invoice={selectedInvoice}\n        open={!!selectedInvoice}\n        onOpenChange={() => setSelectedInvoice(null)}\n      />\n\n      {/* Payment Recording Dialog */}\n      <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Record Payment</DialogTitle>\n          </DialogHeader>\n          \n          {selectedInvoiceForPayment && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <div className=\"text-sm space-y-1\">\n                  <div><strong>Invoice:</strong> {selectedInvoiceForPayment.invoiceNumber}</div>\n                  <div><strong>Vendor:</strong> {selectedInvoiceForPayment.vendor.name}</div>\n                  <div><strong>Total Amount:</strong> ₹{parseFloat(selectedInvoiceForPayment.netAmount).toLocaleString(\"en-IN\")}</div>\n                  <div><strong>Paid Amount:</strong> ₹{parseFloat(selectedInvoiceForPayment.paidAmount).toLocaleString(\"en-IN\")}</div>\n                  <div><strong>Balance Amount:</strong> ₹{parseFloat(selectedInvoiceForPayment.balanceAmount).toLocaleString(\"en-IN\")}</div>\n                </div>\n              </div>\n\n              <Form {...paymentForm}>\n                <form onSubmit={paymentForm.handleSubmit(onSubmitPayment)} className=\"space-y-4\">\n                  <FormField\n                    control={paymentForm.control}\n                    name=\"amount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Amount</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"Enter payment amount\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                            data-testid=\"input-payment-amount\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={paymentForm.control}\n                    name=\"paymentDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-payment-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={paymentForm.control}\n                    name=\"paymentMode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Mode</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-payment-mode\">\n                              <SelectValue placeholder=\"Select payment mode\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Cash\">Cash</SelectItem>\n                            <SelectItem value=\"Bank\">Bank Transfer</SelectItem>\n                            <SelectItem value=\"UPI\">UPI</SelectItem>\n                            <SelectItem value=\"Cheque\">Cheque</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {(paymentForm.watch(\"paymentMode\") === \"Bank\" || \n                    paymentForm.watch(\"paymentMode\") === \"UPI\" || \n                    paymentForm.watch(\"paymentMode\") === \"Cheque\") && (\n                    <FormField\n                      control={paymentForm.control}\n                      name=\"bankAccountId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bank Account</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-bank-account\">\n                                <SelectValue placeholder=\"Select bank account\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {bankAccounts.map((account: any) => (\n                                <SelectItem key={account.id} value={account.id}>\n                                  {account.accountName} - {account.accountNumber}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  <FormField\n                    control={paymentForm.control}\n                    name=\"transactionReference\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Transaction Reference</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Reference number/ID\" {...field} data-testid=\"input-transaction-reference\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={paymentForm.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Additional notes\" {...field} data-testid=\"input-payment-notes\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setPaymentDialogOpen(false)}\n                      data-testid=\"button-payment-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createPaymentMutation.isPending}\n                      data-testid=\"button-payment-submit\"\n                    >\n                      {createPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Payment History Dialog */}\n      <Dialog open={paymentHistoryDialogOpen} onOpenChange={setPaymentHistoryDialogOpen}>\n        <DialogContent className=\"sm:max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Payment History</DialogTitle>\n          </DialogHeader>\n          \n          {selectedInvoiceForPayment && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <div className=\"text-sm space-y-1\">\n                  <div><strong>Invoice:</strong> {selectedInvoiceForPayment.invoiceNumber}</div>\n                  <div><strong>Vendor:</strong> {selectedInvoiceForPayment.vendor.name}</div>\n                  <div><strong>Total Amount:</strong> ₹{parseFloat(selectedInvoiceForPayment.netAmount).toLocaleString(\"en-IN\")}</div>\n                  <div><strong>Paid Amount:</strong> ₹{parseFloat(selectedInvoiceForPayment.paidAmount).toLocaleString(\"en-IN\")}</div>\n                  <div><strong>Balance Amount:</strong> ₹{parseFloat(selectedInvoiceForPayment.balanceAmount).toLocaleString(\"en-IN\")}</div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-3\">Payment Records</h4>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Mode</TableHead>\n                      <TableHead>Reference</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {getInvoicePayments(selectedInvoiceForPayment.id).map((payment: any) => (\n                      <TableRow key={payment.id}>\n                        <TableCell>{format(new Date(payment.paymentDate), \"dd/MM/yyyy\")}</TableCell>\n                        <TableCell className=\"font-medium\">₹{parseFloat(payment.amount).toLocaleString(\"en-IN\")}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{payment.paymentMode}</Badge>\n                        </TableCell>\n                        <TableCell>{payment.transactionReference || \"-\"}</TableCell>\n                      </TableRow>\n                    ))}\n                    {getInvoicePayments(selectedInvoiceForPayment.id).length === 0 && (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center py-4 text-muted-foreground\">\n                          No payments recorded for this invoice\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex justify-end pt-4\">\n                <Button variant=\"outline\" onClick={() => setPaymentHistoryDialogOpen(false)} data-testid=\"button-history-close\">\n                  Close\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":22166},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { \n  BarChart3,\n  TrendingUp, \n  TrendingDown, \n  DollarSign,\n  Users,\n  Package,\n  Receipt,\n  Calendar,\n  Download,\n  Eye,\n  Filter,\n  Percent,\n  Target,\n  Activity,\n  PieChart,\n  AlertCircle\n} from \"lucide-react\";\nimport { format, startOfMonth, endOfMonth, subDays, parseISO, isWithinInterval } from \"date-fns\";\n\ninterface ReportFilter {\n  startDate: string;\n  endDate: string;\n  retailer?: string;\n  category?: string;\n  paymentMode?: string;\n}\n\nexport default function Reports() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [filters, setFilters] = useState<ReportFilter>({\n    startDate: format(startOfMonth(new Date()), \"yyyy-MM-dd\"),\n    endDate: format(endOfMonth(new Date()), \"yyyy-MM-dd\"),\n  });\n\n  // Fetch all data for reports\n  const { data: purchaseInvoices = [], isLoading: purchasesLoading } = useQuery({\n    queryKey: [\"/api/purchase-invoices\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/purchase-invoices\");\n      return response.json();\n    },\n  });\n\n  const { data: salesInvoices = [], isLoading: salesLoading } = useQuery({\n    queryKey: [\"/api/sales-invoices\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/sales-invoices\");\n      return response.json();\n    },\n  });\n\n  const { data: expenses = [] } = useQuery({\n    queryKey: [\"/api/expenses\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/expenses\");\n      return response.json();\n    },\n  });\n\n  const { data: payments = [] } = useQuery({\n    queryKey: [\"/api/payments\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/payments\");\n      return response.json();\n    },\n  });\n\n  const { data: salesPayments = [] } = useQuery({\n    queryKey: [\"/api/sales-payments\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/sales-payments\");\n      return response.json();\n    },\n  });\n\n  const { data: retailers = [] } = useQuery({\n    queryKey: [\"/api/retailers\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/retailers\");\n      return response.json();\n    },\n  });\n\n  const { data: vendors = [] } = useQuery({\n    queryKey: [\"/api/vendors\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/vendors\");\n      return response.json();\n    },\n  });\n\n  const { data: expenseCategories = [] } = useQuery({\n    queryKey: [\"/api/expense-categories\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/expense-categories\");\n      return response.json();\n    },\n  });\n\n  const { data: stock = [] } = useQuery({\n    queryKey: [\"/api/stock\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/stock\");\n      return response.json();\n    },\n  });\n\n  // Filter data by date range\n  const filterByDate = (data: any[], dateField: string) => {\n    const startDate = parseISO(filters.startDate);\n    const endDate = parseISO(filters.endDate);\n    \n    return data.filter((item) => {\n      try {\n        const dateValue = item[dateField];\n        if (!dateValue) return false;\n        \n        // Handle both ISO strings and Date objects\n        const itemDate = typeof dateValue === 'string' ? parseISO(dateValue) : new Date(dateValue);\n        \n        // Check if date is valid\n        if (isNaN(itemDate.getTime())) {\n          console.warn(`Invalid date found: ${dateValue}`);\n          return false;\n        }\n        \n        return isWithinInterval(itemDate, { start: startDate, end: endDate });\n      } catch (error) {\n        console.warn(`Error parsing date for ${dateField}:`, error);\n        return false;\n      }\n    });\n  };\n\n  const filteredPurchases = filterByDate(purchaseInvoices, \"invoiceDate\");\n  const filteredSales = filterByDate(salesInvoices, \"invoiceDate\");\n  const filteredExpenses = filterByDate(expenses, \"paymentDate\");\n  const filteredPayments = filterByDate(payments, \"paymentDate\");\n  const filteredSalesPayments = filterByDate(salesPayments, \"paymentDate\");\n\n  // Calculate key metrics\n  const totalPurchases = filteredPurchases.reduce((sum, inv) => sum + parseFloat(inv.totalAmount || \"0\"), 0);\n  const totalSales = filteredSales.reduce((sum, inv) => sum + parseFloat(inv.totalAmount || \"0\"), 0);\n  const totalExpenses = filteredExpenses.reduce((sum, exp) => sum + parseFloat(exp.amount || \"0\"), 0);\n  const grossProfit = totalSales - totalPurchases;\n  const netProfit = grossProfit - totalExpenses;\n  const profitMargin = totalSales > 0 ? (netProfit / totalSales) * 100 : 0;\n\n  const totalPurchasePayments = filteredPayments.reduce((sum, payment) => sum + parseFloat(payment.amount || \"0\"), 0);\n  const totalSalesPayments = filteredSalesPayments.reduce((sum, payment) => sum + parseFloat(payment.amount || \"0\"), 0);\n  const netCashFlow = totalSalesPayments - totalPurchasePayments - totalExpenses;\n\n  // Outstanding amounts\n  const purchaseOutstanding = filteredPurchases.reduce((sum, inv) => sum + parseFloat(inv.balanceAmount || \"0\"), 0);\n  const salesOutstanding = filteredSales.reduce((sum, inv) => sum + parseFloat(inv.balanceAmount || \"0\"), 0);\n\n  // Top performers\n  const retailerSales = filteredSales.reduce((acc: any, sale) => {\n    const retailerId = sale.retailerId;\n    const amount = parseFloat(sale.totalAmount || \"0\");\n    acc[retailerId] = (acc[retailerId] || 0) + amount;\n    return acc;\n  }, {});\n\n  const topRetailers = Object.entries(retailerSales)\n    .map(([retailerId, amount]) => ({\n      retailer: retailers.find((r: any) => r.id === retailerId),\n      amount: amount as number,\n    }))\n    .filter(item => item.retailer)\n    .sort((a, b) => b.amount - a.amount)\n    .slice(0, 5);\n\n  const vendorPurchases = filteredPurchases.reduce((acc: any, purchase) => {\n    const vendorId = purchase.vendorId;\n    const amount = parseFloat(purchase.totalAmount || \"0\");\n    acc[vendorId] = (acc[vendorId] || 0) + amount;\n    return acc;\n  }, {});\n\n  const topVendors = Object.entries(vendorPurchases)\n    .map(([vendorId, amount]) => ({\n      vendor: vendors.find((v: any) => v.id === vendorId),\n      amount: amount as number,\n    }))\n    .filter(item => item.vendor)\n    .sort((a, b) => b.amount - a.amount)\n    .slice(0, 5);\n\n  // Expense breakdown\n  const expenseBreakdown = filteredExpenses.reduce((acc: any, expense) => {\n    const categoryId = expense.categoryId;\n    const amount = parseFloat(expense.amount || \"0\");\n    acc[categoryId] = (acc[categoryId] || 0) + amount;\n    return acc;\n  }, {});\n\n  const topExpenseCategories = Object.entries(expenseBreakdown)\n    .map(([categoryId, amount]) => ({\n      category: expenseCategories.find((c: any) => c.id === categoryId),\n      amount: amount as number,\n    }))\n    .filter(item => item.category)\n    .sort((a, b) => b.amount - a.amount);\n\n  // Payment mode analysis\n  const paymentModeAnalysis = [...filteredPayments, ...filteredSalesPayments].reduce((acc: any, payment) => {\n    const mode = payment.paymentMode;\n    const amount = parseFloat(payment.amount || \"0\");\n    const type = payment.vendorId ? \"Purchase\" : \"Sales\";\n    \n    if (!acc[mode]) acc[mode] = { purchase: 0, sales: 0, total: 0 };\n    acc[mode][type.toLowerCase()] += amount;\n    acc[mode].total += amount;\n    return acc;\n  }, {});\n\n  // Recent activity (last 7 days)\n  const sevenDaysAgo = subDays(new Date(), 7);\n  const recentPurchases = purchaseInvoices.filter((inv: any) => {\n    try {\n      if (!inv.invoiceDate) return false;\n      return isWithinInterval(parseISO(inv.invoiceDate), { start: sevenDaysAgo, end: new Date() });\n    } catch (error) {\n      return false;\n    }\n  }).length;\n  const recentSales = salesInvoices.filter((inv: any) => {\n    try {\n      if (!inv.invoiceDate) return false;\n      return isWithinInterval(parseISO(inv.invoiceDate), { start: sevenDaysAgo, end: new Date() });\n    } catch (error) {\n      return false;\n    }\n  }).length;\n  const recentExpenses = expenses.filter((exp: any) => {\n    try {\n      const dateField = exp.expenseDate || exp.paymentDate;\n      if (!dateField) return false;\n      return isWithinInterval(parseISO(dateField), { start: sevenDaysAgo, end: new Date() });\n    } catch (error) {\n      return false;\n    }\n  }).length;\n\n  if (purchasesLoading || salesLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Business Reports</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Comprehensive business analytics and insights\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                type=\"date\"\n                value={filters.startDate}\n                onChange={(e) => setFilters(prev => ({ ...prev, startDate: e.target.value }))}\n                data-testid=\"input-start-date\"\n              />\n              <span className=\"text-muted-foreground\">to</span>\n              <Input\n                type=\"date\"\n                value={filters.endDate}\n                onChange={(e) => setFilters(prev => ({ ...prev, endDate: e.target.value }))}\n                data-testid=\"input-end-date\"\n              />\n              <Button variant=\"outline\" data-testid=\"button-export\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-8\">\n\n          {/* Key Metrics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Gross Profit</CardTitle>\n                <TrendingUp className={`h-4 w-4 ${grossProfit >= 0 ? 'text-green-600' : 'text-red-600'}`} />\n              </CardHeader>\n              <CardContent>\n                <div className={`text-2xl font-bold ${grossProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  ₹{grossProfit.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Sales - Purchases</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Net Profit</CardTitle>\n                <Target className={`h-4 w-4 ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`} />\n              </CardHeader>\n              <CardContent>\n                <div className={`text-2xl font-bold ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  ₹{netProfit.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">After expenses</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Profit Margin</CardTitle>\n                <Percent className={`h-4 w-4 ${profitMargin >= 0 ? 'text-green-600' : 'text-red-600'}`} />\n              </CardHeader>\n              <CardContent>\n                <div className={`text-2xl font-bold ${profitMargin >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {profitMargin.toFixed(1)}%\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Net profit margin</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Cash Flow</CardTitle>\n                <Activity className={`h-4 w-4 ${netCashFlow >= 0 ? 'text-green-600' : 'text-red-600'}`} />\n              </CardHeader>\n              <CardContent>\n                <div className={`text-2xl font-bold ${netCashFlow >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  ₹{netCashFlow.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Net cash flow</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Reports Tabs */}\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-6\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"sales\">Sales Analysis</TabsTrigger>\n              <TabsTrigger value=\"purchases\">Purchase Analysis</TabsTrigger>\n              <TabsTrigger value=\"expenses\">Expenses</TabsTrigger>\n              <TabsTrigger value=\"payments\">Payment Analysis</TabsTrigger>\n              <TabsTrigger value=\"outstanding\">Outstanding</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Sales vs Purchases */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <BarChart3 className=\"h-5 w-5\" />\n                      <span>Sales vs Purchases</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Total Sales</span>\n                      <span className=\"text-green-600 font-semibold\">₹{totalSales.toLocaleString(\"en-IN\")}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Total Purchases</span>\n                      <span className=\"text-red-600 font-semibold\">₹{totalPurchases.toLocaleString(\"en-IN\")}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Total Expenses</span>\n                      <span className=\"text-orange-600 font-semibold\">₹{totalExpenses.toLocaleString(\"en-IN\")}</span>\n                    </div>\n                    <div className=\"border-t pt-2\">\n                      <div className=\"flex justify-between items-center font-medium\">\n                        <span>Net Position</span>\n                        <span className={netProfit >= 0 ? 'text-green-600' : 'text-red-600'}>\n                          ₹{netProfit.toLocaleString(\"en-IN\")}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Activity */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Calendar className=\"h-5 w-5\" />\n                      <span>Recent Activity (7 days)</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">New Sales</span>\n                      <Badge variant=\"outline\" className=\"text-green-600\">{recentSales}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">New Purchases</span>\n                      <Badge variant=\"outline\" className=\"text-blue-600\">{recentPurchases}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">New Expenses</span>\n                      <Badge variant=\"outline\" className=\"text-orange-600\">{recentExpenses}</Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Top Performers */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Top Retailers by Sales</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {topRetailers.map((item, index) => (\n                        <div key={item.retailer.id} className=\"flex justify-between items-center\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\" className=\"w-6 h-6 rounded-full p-0 flex items-center justify-center\">\n                              {index + 1}\n                            </Badge>\n                            <span className=\"font-medium\">{item.retailer.name}</span>\n                          </div>\n                          <span className=\"text-green-600 font-semibold\">₹{item.amount.toLocaleString(\"en-IN\")}</span>\n                        </div>\n                      ))}\n                      {topRetailers.length === 0 && (\n                        <p className=\"text-muted-foreground text-sm\">No sales data available</p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Top Vendors by Purchases</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {topVendors.map((item, index) => (\n                        <div key={item.vendor.id} className=\"flex justify-between items-center\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\" className=\"w-6 h-6 rounded-full p-0 flex items-center justify-center\">\n                              {index + 1}\n                            </Badge>\n                            <span className=\"font-medium\">{item.vendor.name}</span>\n                          </div>\n                          <span className=\"text-red-600 font-semibold\">₹{item.amount.toLocaleString(\"en-IN\")}</span>\n                        </div>\n                      ))}\n                      {topVendors.length === 0 && (\n                        <p className=\"text-muted-foreground text-sm\">No purchase data available</p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"sales\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Total Sales</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">₹{totalSales.toLocaleString(\"en-IN\")}</div>\n                    <p className=\"text-xs text-muted-foreground\">{filteredSales.length} invoices</p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Average Sale</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      ₹{filteredSales.length > 0 ? (totalSales / filteredSales.length).toLocaleString(\"en-IN\") : \"0\"}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Per invoice</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Sales Outstanding</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-amber-600\">₹{salesOutstanding.toLocaleString(\"en-IN\")}</div>\n                    <p className=\"text-xs text-muted-foreground\">Pending receipts</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Sales by Payment Status */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sales by Payment Status</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Count</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>Percentage</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {[\"Pending\", \"Partial\", \"Paid\"].map(status => {\n                        const statusSales = filteredSales.filter(s => s.paymentStatus === status);\n                        const statusAmount = statusSales.reduce((sum, s) => sum + parseFloat(s.totalAmount || \"0\"), 0);\n                        const percentage = totalSales > 0 ? (statusAmount / totalSales) * 100 : 0;\n                        \n                        return (\n                          <TableRow key={status}>\n                            <TableCell>\n                              <Badge variant={status === \"Paid\" ? \"default\" : status === \"Partial\" ? \"secondary\" : \"destructive\"}>\n                                {status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>{statusSales.length}</TableCell>\n                            <TableCell>₹{statusAmount.toLocaleString(\"en-IN\")}</TableCell>\n                            <TableCell>{percentage.toFixed(1)}%</TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"purchases\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Total Purchases</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">₹{totalPurchases.toLocaleString(\"en-IN\")}</div>\n                    <p className=\"text-xs text-muted-foreground\">{filteredPurchases.length} invoices</p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Average Purchase</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      ₹{filteredPurchases.length > 0 ? (totalPurchases / filteredPurchases.length).toLocaleString(\"en-IN\") : \"0\"}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Per invoice</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Purchase Outstanding</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-amber-600\">₹{purchaseOutstanding.toLocaleString(\"en-IN\")}</div>\n                    <p className=\"text-xs text-muted-foreground\">Pending payments</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Vendor Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Vendor Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Vendor</TableHead>\n                        <TableHead>Invoices</TableHead>\n                        <TableHead>Total Amount</TableHead>\n                        <TableHead>Average</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {topVendors.map((item) => {\n                        const vendorInvoices = filteredPurchases.filter(p => p.vendorId === item.vendor.id);\n                        const avgAmount = vendorInvoices.length > 0 ? item.amount / vendorInvoices.length : 0;\n                        \n                        return (\n                          <TableRow key={item.vendor.id}>\n                            <TableCell className=\"font-medium\">{item.vendor.name}</TableCell>\n                            <TableCell>{vendorInvoices.length}</TableCell>\n                            <TableCell>₹{item.amount.toLocaleString(\"en-IN\")}</TableCell>\n                            <TableCell>₹{avgAmount.toLocaleString(\"en-IN\")}</TableCell>\n                          </TableRow>\n                        );\n                      })}\n                      {topVendors.length === 0 && (\n                        <TableRow>\n                          <TableCell colSpan={4} className=\"text-center py-4\">\n                            No purchase data available for the selected period\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"expenses\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Total Expenses</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-600\">₹{totalExpenses.toLocaleString(\"en-IN\")}</div>\n                    <p className=\"text-xs text-muted-foreground\">{filteredExpenses.length} expenses</p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Average Expense</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      ₹{filteredExpenses.length > 0 ? (totalExpenses / filteredExpenses.length).toLocaleString(\"en-IN\") : \"0\"}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Per transaction</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Expense Ratio</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      {totalSales > 0 ? ((totalExpenses / totalSales) * 100).toFixed(1) : \"0\"}%\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Of total sales</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Expense Breakdown */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Expense Breakdown by Category</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Category</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>Percentage</TableHead>\n                        <TableHead>Transactions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {topExpenseCategories.map((item) => {\n                        const percentage = totalExpenses > 0 ? (item.amount / totalExpenses) * 100 : 0;\n                        const categoryExpenses = filteredExpenses.filter(e => e.categoryId === item.category.id);\n                        \n                        return (\n                          <TableRow key={item.category.id}>\n                            <TableCell className=\"font-medium\">{item.category.name}</TableCell>\n                            <TableCell className=\"text-orange-600\">₹{item.amount.toLocaleString(\"en-IN\")}</TableCell>\n                            <TableCell>{percentage.toFixed(1)}%</TableCell>\n                            <TableCell>{categoryExpenses.length}</TableCell>\n                          </TableRow>\n                        );\n                      })}\n                      {topExpenseCategories.length === 0 && (\n                        <TableRow>\n                          <TableCell colSpan={4} className=\"text-center py-4\">\n                            No expense data available for the selected period\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"payments\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Payments Received</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">₹{totalSalesPayments.toLocaleString(\"en-IN\")}</div>\n                    <p className=\"text-xs text-muted-foreground\">From sales</p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Payments Made</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">₹{totalPurchasePayments.toLocaleString(\"en-IN\")}</div>\n                    <p className=\"text-xs text-muted-foreground\">For purchases</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Net Payment Flow</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${(totalSalesPayments - totalPurchasePayments) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      ₹{(totalSalesPayments - totalPurchasePayments).toLocaleString(\"en-IN\")}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Received minus paid</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Payment Mode Analysis */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Payment Mode Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Payment Mode</TableHead>\n                        <TableHead>Sales Received</TableHead>\n                        <TableHead>Purchase Payments</TableHead>\n                        <TableHead>Net Flow</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {Object.entries(paymentModeAnalysis).map(([mode, data]: [string, any]) => (\n                        <TableRow key={mode}>\n                          <TableCell>\n                            <Badge variant=\"outline\">{mode}</Badge>\n                          </TableCell>\n                          <TableCell className=\"text-green-600\">₹{data.sales.toLocaleString(\"en-IN\")}</TableCell>\n                          <TableCell className=\"text-red-600\">₹{data.purchase.toLocaleString(\"en-IN\")}</TableCell>\n                          <TableCell className={data.sales - data.purchase >= 0 ? \"text-green-600\" : \"text-red-600\"}>\n                            ₹{(data.sales - data.purchase).toLocaleString(\"en-IN\")}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                      {Object.keys(paymentModeAnalysis).length === 0 && (\n                        <TableRow>\n                          <TableCell colSpan={4} className=\"text-center py-4\">\n                            No payment data available for the selected period\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"outstanding\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <AlertCircle className=\"h-5 w-5 text-amber-600\" />\n                      <span>Sales Outstanding</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold text-amber-600 mb-4\">\n                      ₹{salesOutstanding.toLocaleString(\"en-IN\")}\n                    </div>\n                    <div className=\"space-y-2\">\n                      {filteredSales.filter(s => parseFloat(s.balanceAmount || \"0\") > 0)\n                        .sort((a, b) => parseFloat(b.balanceAmount || \"0\") - parseFloat(a.balanceAmount || \"0\"))\n                        .slice(0, 5)\n                        .map((sale) => {\n                          const retailer = retailers.find((r: any) => r.id === sale.retailerId);\n                          return (\n                            <div key={sale.id} className=\"flex justify-between items-center text-sm\">\n                              <span>{retailer?.name || \"Unknown\"}</span>\n                              <span className=\"text-amber-600 font-medium\">\n                                ₹{parseFloat(sale.balanceAmount || \"0\").toLocaleString(\"en-IN\")}\n                              </span>\n                            </div>\n                          );\n                        })}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <AlertCircle className=\"h-5 w-5 text-red-600\" />\n                      <span>Purchase Outstanding</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold text-red-600 mb-4\">\n                      ₹{purchaseOutstanding.toLocaleString(\"en-IN\")}\n                    </div>\n                    <div className=\"space-y-2\">\n                      {filteredPurchases.filter(p => parseFloat(p.balanceAmount || \"0\") > 0)\n                        .sort((a, b) => parseFloat(b.balanceAmount || \"0\") - parseFloat(a.balanceAmount || \"0\"))\n                        .slice(0, 5)\n                        .map((purchase) => {\n                          const vendor = vendors.find((v: any) => v.id === purchase.vendorId);\n                          return (\n                            <div key={purchase.id} className=\"flex justify-between items-center text-sm\">\n                              <span>{vendor?.name || \"Unknown\"}</span>\n                              <span className=\"text-red-600 font-medium\">\n                                ₹{parseFloat(purchase.balanceAmount || \"0\").toLocaleString(\"en-IN\")}\n                              </span>\n                            </div>\n                          );\n                        })}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Outstanding Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Outstanding Summary</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold text-amber-600\">{salesOutstanding.toLocaleString(\"en-IN\")}</div>\n                      <div className=\"text-sm text-muted-foreground\">To Receive</div>\n                    </div>\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"text-2xl font-bold text-red-600\">{purchaseOutstanding.toLocaleString(\"en-IN\")}</div>\n                      <div className=\"text-sm text-muted-foreground\">To Pay</div>\n                    </div>\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className={`text-2xl font-bold ${(salesOutstanding - purchaseOutstanding) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {(salesOutstanding - purchaseOutstanding).toLocaleString(\"en-IN\")}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Net Outstanding</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":39992},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Settings, \n  Building2, \n  Bell, \n  Shield, \n  Database,\n  Save\n} from \"lucide-react\";\n\nexport default function SettingsPage() {\n  const [settings, setSettings] = useState({\n    companyName: \"APMC Commission Merchant\",\n    address: \"Market Yard, Agricultural Produce Market\",\n    phone: \"+91 98765 43210\",\n    email: \"info@apmcmerchant.com\",\n    gstNumber: \"27XXXXX1234X1X1\",\n    commissionRate: \"5\",\n    notifications: true,\n    emailAlerts: true,\n    smsAlerts: false,\n    currency: \"INR\",\n    dateFormat: \"DD/MM/YYYY\",\n    autoBackup: true,\n    backupFrequency: \"daily\",\n  });\n\n  const { toast } = useToast();\n\n  const handleSave = () => {\n    toast({\n      title: \"Settings saved\",\n      description: \"System settings have been updated successfully\",\n    });\n  };\n\n  const handleSettingChange = (key: string, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">System Settings</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Configure system preferences and business settings\n              </p>\n            </div>\n            <Button onClick={handleSave} className=\"gap-2\" data-testid=\"button-save-settings\">\n              <Save className=\"h-4 w-4\" />\n              Save Changes\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6 space-y-6\">\n          {/* Company Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"h-5 w-5\" />\n                Company Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companyName\">Company Name</Label>\n                  <Input\n                    id=\"companyName\"\n                    value={settings.companyName}\n                    onChange={(e) => handleSettingChange(\"companyName\", e.target.value)}\n                    data-testid=\"input-company-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"gstNumber\">GST Number</Label>\n                  <Input\n                    id=\"gstNumber\"\n                    value={settings.gstNumber}\n                    onChange={(e) => handleSettingChange(\"gstNumber\", e.target.value)}\n                    data-testid=\"input-gst-number\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Address</Label>\n                <Textarea\n                  id=\"address\"\n                  value={settings.address}\n                  onChange={(e) => handleSettingChange(\"address\", e.target.value)}\n                  data-testid=\"textarea-address\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input\n                    id=\"phone\"\n                    value={settings.phone}\n                    onChange={(e) => handleSettingChange(\"phone\", e.target.value)}\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={settings.email}\n                    onChange={(e) => handleSettingChange(\"email\", e.target.value)}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Business Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Business Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"commissionRate\">Default Commission Rate (%)</Label>\n                  <Input\n                    id=\"commissionRate\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={settings.commissionRate}\n                    onChange={(e) => handleSettingChange(\"commissionRate\", e.target.value)}\n                    data-testid=\"input-commission-rate\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currency\">Currency</Label>\n                  <Select \n                    value={settings.currency} \n                    onValueChange={(value) => handleSettingChange(\"currency\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-currency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"INR\">Indian Rupee (₹)</SelectItem>\n                      <SelectItem value=\"USD\">US Dollar ($)</SelectItem>\n                      <SelectItem value=\"EUR\">Euro (€)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dateFormat\">Date Format</Label>\n                  <Select \n                    value={settings.dateFormat} \n                    onValueChange={(value) => handleSettingChange(\"dateFormat\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-date-format\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                      <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                      <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notifications */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notifications\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>System Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive notifications for system events\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.notifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"notifications\", checked)}\n                  data-testid=\"switch-notifications\"\n                />\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Email Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Send alerts to email for important events\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.emailAlerts}\n                  onCheckedChange={(checked) => handleSettingChange(\"emailAlerts\", checked)}\n                  data-testid=\"switch-email-alerts\"\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>SMS Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Send SMS for critical notifications\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.smsAlerts}\n                  onCheckedChange={(checked) => handleSettingChange(\"smsAlerts\", checked)}\n                  data-testid=\"switch-sms-alerts\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Data & Backup */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                Data & Backup\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Automatic Backup</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Automatically backup system data\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.autoBackup}\n                  onCheckedChange={(checked) => handleSettingChange(\"autoBackup\", checked)}\n                  data-testid=\"switch-auto-backup\"\n                />\n              </div>\n              \n              {settings.autoBackup && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"backupFrequency\">Backup Frequency</Label>\n                  <Select \n                    value={settings.backupFrequency} \n                    onValueChange={(value) => handleSettingChange(\"backupFrequency\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-backup-frequency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"hourly\">Hourly</SelectItem>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":11568},"client/src/pages/stock.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Label } from \"@/components/ui/label\";\nimport { Search, Edit, AlertTriangle, History, Plus, Trash2, PlusCircle, AlertCircle } from \"lucide-react\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { format } from \"date-fns\";\n\nexport default function Stock() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingStock, setEditingStock] = useState<any>(null);\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n  const [dateFilter, setDateFilter] = useState({\n    startDate: \"\",\n    endDate: \"\"\n  });\n  const [showManualEntry, setShowManualEntry] = useState(false);\n  const [showWastageEntry, setShowWastageEntry] = useState(false);\n  const [quantities, setQuantities] = useState({ crates: \"\", kgs: \"\", boxes: \"\" });\n  const [manualEntry, setManualEntry] = useState({\n    vendorId: \"\",\n    notes: \"\",\n    lineItems: [{ itemId: \"\", crates: \"\", kgs: \"\", boxes: \"\" }] as Array<{itemId: string, crates: string, kgs: string, boxes: string}>,\n  });\n  const [wastageEntry, setWastageEntry] = useState({\n    itemId: \"\",\n    crates: \"\",\n    kgs: \"\",\n    boxes: \"\",\n    reason: \"\",\n    notes: \"\",\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: stock, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/stock\"],\n  });\n\n  const { data: stockMovements, isLoading: movementsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/stock-movements\"],\n  });\n\n  const { data: itemMovements } = useQuery<any[]>({\n    queryKey: [\"/api/stock-movements/item\", selectedItem?.itemId],\n    enabled: !!selectedItem?.itemId,\n  });\n\n  const { data: items } = useQuery<any[]>({\n    queryKey: [\"/api/items\"],\n  });\n\n  const { data: vendors } = useQuery<any[]>({\n    queryKey: [\"/api/vendors\"],\n  });\n\n  const updateStockMutation = useMutation({\n    mutationFn: async ({ itemId, data }: { itemId: string; data: any }) => {\n      const response = await authenticatedApiRequest(\"PUT\", `/api/stock/${itemId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Stock updated\",\n        description: \"Stock quantities have been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock\"] });\n      setEditingStock(null);\n      setQuantities({ crates: \"\", kgs: \"\", boxes: \"\" });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update stock\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createStockMovementMutation = useMutation({\n    mutationFn: async (movementData: any) => {\n      const response = await authenticatedApiRequest(\"POST\", \"/api/stock-movements\", movementData);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Check if this is a wastage entry\n      if (variables.referenceType === \"WASTAGE\") {\n        toast({\n          title: \"Wastage recorded\",\n          description: \"Stock wastage has been recorded successfully\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/stock\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/stock-movements\"] });\n        setShowWastageEntry(false);\n        setWastageEntry({ itemId: \"\", crates: \"\", kgs: \"\", boxes: \"\", reason: \"\", notes: \"\" });\n      } else {\n        toast({\n          title: \"Stock entry added\",\n          description: \"Manual stock entry has been added successfully\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/stock\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/stock-movements\"] });\n        setShowManualEntry(false);\n        setManualEntry({ vendorId: \"\", notes: \"\", lineItems: [{ itemId: \"\", crates: \"\", kgs: \"\", boxes: \"\" }] });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to add stock entry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredStock = stock?.filter((item: any) => {\n    const searchString = searchTerm.toLowerCase();\n    return (\n      item.item.name.toLowerCase().includes(searchString) ||\n      item.item.quality.toLowerCase().includes(searchString) ||\n      (item.item.vendor?.name || '').toLowerCase().includes(searchString)\n    );\n  }) || [];\n\n  const isLowStock = (item: any) => {\n    const totalQty = parseFloat(item.quantityInKgs) + parseFloat(item.quantityInCrates) + parseFloat(item.quantityInBoxes || 0);\n    return totalQty < 20 && totalQty > 0;\n  };\n\n  // Define stock table columns\n  const stockColumns = [\n    {\n      accessorKey: \"item.name\",\n      header: \"Item\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"item.quality\",\n      header: \"Quality\",\n    },\n    {\n      accessorKey: \"item.vendor.name\",\n      header: \"Vendor\",\n      cell: (value: string) => value || \"Unknown Vendor\",\n    },\n    {\n      accessorKey: \"quantityInCrates\",\n      header: \"Quantity (Crates)\",\n      cell: (value: string) => parseFloat(value).toFixed(2),\n    },\n    {\n      accessorKey: \"quantityInBoxes\",\n      header: \"Quantity (Boxes)\",\n      cell: (value: string) => parseFloat(value || \"0\").toFixed(2),\n    },\n    {\n      accessorKey: \"quantityInKgs\",\n      header: \"Quantity (Kgs)\",\n      cell: (value: string) => parseFloat(value).toFixed(2),\n    },\n    {\n      accessorKey: \"lastUpdated\",\n      header: \"Last Updated\",\n      cell: (value: string) => format(new Date(value), \"MMM dd, yyyy\"),\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Status\",\n      cell: (value: string, row: any) => {\n        if (isLowStock(row)) {\n          return (\n            <div className=\"flex items-center space-x-1\">\n              <AlertTriangle className=\"h-4 w-4 text-chart-1\" />\n              <Badge variant=\"destructive\">Low Stock</Badge>\n            </div>\n          );\n        }\n        return <Badge variant=\"default\">Available</Badge>;\n      },\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Actions\",\n      cell: (value: string, row: any) => (\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEditStock(row)}\n            data-testid={`button-edit-stock-${value}`}\n            title=\"Edit Stock\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setSelectedItem(row)}\n            data-testid={`button-history-${value}`}\n            title=\"View History\"\n          >\n            <History className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleEditStock = (item: any) => {\n    setEditingStock(item);\n    setQuantities({\n      crates: item.quantityInCrates,\n      kgs: item.quantityInKgs,\n      boxes: item.quantityInBoxes || \"0\",\n    });\n  };\n\n  const handleUpdateStock = () => {\n    if (!editingStock) return;\n\n    updateStockMutation.mutate({\n      itemId: editingStock.itemId,\n      data: {\n        quantityInCrates: quantities.crates,\n        quantityInKgs: quantities.kgs,\n      },\n    });\n  };\n\n  const handleManualStockEntry = async () => {\n    if (!manualEntry.vendorId) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please select a vendor\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const validLineItems = manualEntry.lineItems.filter(item => \n      item.itemId && (item.crates || item.kgs)\n    );\n\n    if (validLineItems.length === 0) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please add at least one item with quantities\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Create stock movements for each line item\n      for (const lineItem of validLineItems) {\n        await createStockMovementMutation.mutateAsync({\n          itemId: lineItem.itemId,\n          movementType: \"IN\",\n          quantityInCrates: lineItem.crates || \"0\",\n          quantityInBoxes: lineItem.boxes || \"0\",\n          quantityInKgs: lineItem.kgs || \"0\",\n          referenceType: \"MANUAL_ENTRY\",\n          referenceId: null,\n          referenceNumber: \"MANUAL\",\n          vendorId: manualEntry.vendorId,\n          retailerId: null,\n          notes: manualEntry.notes || \"Manual stock entry\",\n          movementDate: new Date().toISOString(),\n        });\n      }\n      \n      toast({\n        title: \"Stock entries added\",\n        description: `Successfully added ${validLineItems.length} stock entries`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-movements\"] });\n      setShowManualEntry(false);\n      setManualEntry({ vendorId: \"\", notes: \"\", lineItems: [{ itemId: \"\", crates: \"\", kgs: \"\", boxes: \"\" }] });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add stock entries\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addLineItem = () => {\n    setManualEntry({\n      ...manualEntry,\n      lineItems: [...manualEntry.lineItems, { itemId: \"\", crates: \"\", kgs: \"\", boxes: \"\" }]\n    });\n  };\n\n  const removeLineItem = (index: number) => {\n    if (manualEntry.lineItems.length > 1) {\n      setManualEntry({\n        ...manualEntry,\n        lineItems: manualEntry.lineItems.filter((_, i) => i !== index)\n      });\n    }\n  };\n\n  const updateLineItem = (index: number, field: string, value: string) => {\n    const updatedLineItems = [...manualEntry.lineItems];\n    updatedLineItems[index] = { ...updatedLineItems[index], [field]: value };\n    setManualEntry({ ...manualEntry, lineItems: updatedLineItems });\n  };\n\n  const filteredItems = items?.filter((item: any) => \n    !manualEntry.vendorId || item.vendorId === manualEntry.vendorId\n  ) || [];\n\n  const handleWastageEntry = () => {\n    if (!wastageEntry.itemId || (!wastageEntry.crates && !wastageEntry.boxes && !wastageEntry.kgs)) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please select an item and enter wastage quantities\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!wastageEntry.reason) {\n      toast({\n        title: \"Missing information\", \n        description: \"Please provide a reason for wastage\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createStockMovementMutation.mutate({\n      itemId: wastageEntry.itemId,\n      movementType: \"OUT\",\n      quantityInCrates: wastageEntry.crates || \"0\",\n      quantityInBoxes: wastageEntry.boxes || \"0\",\n      quantityInKgs: wastageEntry.kgs || \"0\",\n      referenceType: \"WASTAGE\",\n      referenceId: null,\n      referenceNumber: \"WASTAGE\",\n      vendorId: null,\n      retailerId: null,\n      notes: `Wastage: ${wastageEntry.reason}${wastageEntry.notes ? ` - ${wastageEntry.notes}` : ''}`,\n      movementDate: new Date().toISOString(),\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Stock Management</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Monitor and update inventory levels\n              </p>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Current Stock</CardTitle>\n                <div className=\"flex items-center space-x-4\">\n                  <Button\n                    onClick={() => setShowManualEntry(true)}\n                    data-testid=\"button-add-stock\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Stock\n                  </Button>\n                  <Button \n                    variant=\"destructive\"\n                    onClick={() => setShowWastageEntry(true)}\n                    data-testid=\"button-add-wastage\"\n                  >\n                    <AlertCircle className=\"h-4 w-4 mr-2\" />\n                    Record Wastage\n                  </Button>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search stock...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                      data-testid=\"input-search-stock\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                data={filteredStock}\n                columns={stockColumns}\n                searchTerm={searchTerm}\n                searchFields={[\"item.name\", \"item.quality\", \"item.vendor.name\"]}\n                isLoading={isLoading}\n                enableRowSelection={true}\n                rowKey=\"id\"\n              />\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Update Stock Modal */}\n      <Dialog open={!!editingStock} onOpenChange={() => setEditingStock(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Update Stock</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {editingStock && (\n              <div className=\"text-sm text-muted-foreground\">\n                {editingStock.item.name} - {editingStock.item.quality}\n              </div>\n            )}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"crates\">Quantity in Crates</Label>\n                <Input\n                  id=\"crates\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={quantities.crates}\n                  onChange={(e) => setQuantities({ ...quantities, crates: e.target.value })}\n                  data-testid=\"input-quantity-crates\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"kgs\">Quantity in Kgs</Label>\n                <Input\n                  id=\"kgs\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={quantities.kgs}\n                  onChange={(e) => setQuantities({ ...quantities, kgs: e.target.value })}\n                  data-testid=\"input-quantity-kgs\"\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setEditingStock(null)}\n                data-testid=\"button-cancel-stock-update\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleUpdateStock}\n                disabled={updateStockMutation.isPending}\n                data-testid=\"button-update-stock\"\n              >\n                {updateStockMutation.isPending ? \"Updating...\" : \"Update Stock\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Stock Movement History Modal */}\n      <Dialog open={!!selectedItem} onOpenChange={() => {\n        setSelectedItem(null);\n        setDateFilter({ startDate: \"\", endDate: \"\" });\n      }}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Stock Movement History</DialogTitle>\n          </DialogHeader>\n          {selectedItem && (\n            <div className=\"space-y-4\">\n              <div className=\"border-b pb-2\">\n                <h3 className=\"font-semibold\">{selectedItem.item.name} - {selectedItem.item.quality}</h3>\n                <p className=\"text-sm text-muted-foreground\">Vendor: {selectedItem.item.vendor?.name || 'Unknown Vendor'}</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Current Stock: {parseFloat(selectedItem.quantityInCrates).toFixed(2)} Crates, {parseFloat(selectedItem.quantityInKgs).toFixed(2)} Kgs\n                </p>\n              </div>\n              \n              <div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"font-medium\">Movement History</h4>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Label htmlFor=\"start-date\" className=\"text-sm font-medium whitespace-nowrap\">From:</Label>\n                      <Input\n                        id=\"start-date\"\n                        type=\"date\"\n                        value={dateFilter.startDate}\n                        onChange={(e) => setDateFilter({ ...dateFilter, startDate: e.target.value })}\n                        className=\"w-40\"\n                        data-testid=\"input-start-date\"\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label htmlFor=\"end-date\" className=\"text-sm font-medium whitespace-nowrap\">To:</Label>\n                      <Input\n                        id=\"end-date\"\n                        type=\"date\"\n                        value={dateFilter.endDate}\n                        onChange={(e) => setDateFilter({ ...dateFilter, endDate: e.target.value })}\n                        className=\"w-40\"\n                        data-testid=\"input-end-date\"\n                      />\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setDateFilter({ startDate: \"\", endDate: \"\" })}\n                      data-testid=\"button-clear-filter\"\n                    >\n                      Clear\n                    </Button>\n                  </div>\n                </div>\n{(() => {\n                  // Filter movements based on date range\n                  let filteredMovements = itemMovements || [];\n                  \n                  if (dateFilter.startDate) {\n                    filteredMovements = filteredMovements.filter((movement: any) => \n                      new Date(movement.movementDate) >= new Date(dateFilter.startDate)\n                    );\n                  }\n                  \n                  if (dateFilter.endDate) {\n                    filteredMovements = filteredMovements.filter((movement: any) => \n                      new Date(movement.movementDate) <= new Date(dateFilter.endDate + 'T23:59:59')\n                    );\n                  }\n                  \n                  if (filteredMovements.length > 0) {\n                    return (\n                      <Accordion type=\"multiple\" className=\"w-full\">\n                        {filteredMovements.map((movement: any, index: number) => (\n                          <AccordionItem key={movement.id} value={`movement-${index}`}>\n                            <AccordionTrigger className=\"hover:no-underline\">\n                              <div className=\"flex items-center justify-between w-full pr-4\">\n                                <div className=\"flex items-center space-x-4\">\n                                  <Badge variant={movement.movementType === \"IN\" ? \"default\" : \"secondary\"}>\n                                    {movement.movementType === \"IN\" ? \"Stock In\" : \"Stock Out\"}\n                                  </Badge>\n                                  <span className=\"text-sm font-medium\">\n                                    {format(new Date(movement.movementDate), \"MMM dd, yyyy\")}\n                                  </span>\n                                  <span className={`text-sm font-semibold ${\n                                    movement.movementType === \"IN\" ? \"text-green-600\" : \"text-red-600\"\n                                  }`}>\n                                    {movement.movementType === \"IN\" ? \"+\" : \"-\"}\n                                    {parseFloat(movement.quantityInCrates).toFixed(2)} Crates, \n                                    {parseFloat(movement.quantityInKgs).toFixed(2)} Kgs\n                                  </span>\n                                </div>\n                                <div className=\"text-right\">\n                                  <div className=\"text-sm text-muted-foreground\">\n                                    {movement.referenceNumber || movement.referenceType}\n                                  </div>\n                                  {movement.movementType === \"OUT\" && movement.retailer && (\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      Retailer: {movement.retailer.name}\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </AccordionTrigger>\n                            <AccordionContent>\n                              <div className=\"pt-2 pb-4 space-y-3\">\n                                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                  <div>\n                                    <span className=\"font-medium text-muted-foreground\">Date:</span>\n                                    <div>{format(new Date(movement.movementDate), \"PPP\")}</div>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium text-muted-foreground\">Type:</span>\n                                    <div>\n                                      <Badge variant={movement.movementType === \"IN\" ? \"default\" : \"secondary\"} className=\"text-xs\">\n                                        {movement.movementType === \"IN\" ? \"Stock In\" : \"Stock Out\"}\n                                      </Badge>\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium text-muted-foreground\">Quantity:</span>\n                                    <div className={movement.movementType === \"IN\" ? \"text-green-600\" : \"text-red-600\"}>\n                                      {movement.movementType === \"IN\" ? \"+\" : \"-\"}\n                                      {parseFloat(movement.quantityInCrates).toFixed(2)} Crates\n                                      <br />\n                                      {movement.movementType === \"IN\" ? \"+\" : \"-\"}\n                                      {parseFloat(movement.quantityInKgs).toFixed(2)} Kgs\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium text-muted-foreground\">Reference:</span>\n                                    <div>{movement.referenceNumber || movement.referenceType}</div>\n                                  </div>\n                                </div>\n                                \n                                {movement.movementType === \"OUT\" && movement.retailer && (\n                                  <div className=\"bg-muted/50 rounded-lg p-3\">\n                                    <span className=\"font-medium text-muted-foreground text-sm\">Retailer Information:</span>\n                                    <div className=\"mt-1\">\n                                      <div className=\"font-medium\">{movement.retailer.name}</div>\n                                      {movement.retailer.contactPerson && (\n                                        <div className=\"text-sm text-muted-foreground\">Contact: {movement.retailer.contactPerson}</div>\n                                      )}\n                                    </div>\n                                  </div>\n                                )}\n                                \n                                {movement.rate && (\n                                  <div className=\"bg-blue-50 dark:bg-blue-950/20 rounded-lg p-3\">\n                                    <span className=\"font-medium text-muted-foreground text-sm\">Rate Information:</span>\n                                    <div className=\"mt-1 font-medium\">₹{parseFloat(movement.rate).toFixed(2)} per Kg</div>\n                                  </div>\n                                )}\n                                \n                                {movement.notes && (\n                                  <div>\n                                    <span className=\"font-medium text-muted-foreground text-sm\">Notes:</span>\n                                    <div className=\"mt-1 text-sm bg-muted/30 rounded p-2\">{movement.notes}</div>\n                                  </div>\n                                )}\n                              </div>\n                            </AccordionContent>\n                          </AccordionItem>\n                        ))}\n                      </Accordion>\n                    );\n                  } else {\n                    return (\n                      <p className=\"text-center text-muted-foreground py-8\">\n                        {dateFilter.startDate || dateFilter.endDate ? \n                          \"No movements found for the selected date range\" : \n                          \"No movement history found\"\n                        }\n                      </p>\n                    );\n                  }\n                })()}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Manual Stock Entry Modal */}\n      <Dialog open={showManualEntry} onOpenChange={(open) => {\n        if (!open) {\n          setManualEntry({ vendorId: \"\", notes: \"\", lineItems: [{ itemId: \"\", crates: \"\", kgs: \"\", boxes: \"\" }] });\n        }\n        setShowManualEntry(open);\n      }}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Add Stock Entry</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {/* Vendor Selection */}\n            <div>\n              <Label htmlFor=\"vendor-select\">Select Vendor</Label>\n              <Select \n                value={manualEntry.vendorId} \n                onValueChange={(value) => setManualEntry({ \n                  ...manualEntry, \n                  vendorId: value,\n                  lineItems: [{ itemId: \"\", crates: \"\", kgs: \"\", boxes: \"\" }] // Reset line items when vendor changes\n                })}\n              >\n                <SelectTrigger data-testid=\"select-vendor\">\n                  <SelectValue placeholder=\"Select a vendor\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {vendors?.map((vendor: any) => (\n                    <SelectItem key={vendor.id} value={vendor.id}>\n                      {vendor.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Line Items */}\n            {manualEntry.vendorId && (\n              <div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Label className=\"text-base font-medium\">Stock Items</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addLineItem}\n                    data-testid=\"button-add-line-item\"\n                  >\n                    <PlusCircle className=\"h-4 w-4 mr-2\" />\n                    Add Item\n                  </Button>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {manualEntry.lineItems.map((lineItem, index) => (\n                    <div key={index} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <Label className=\"text-sm font-medium\">Item {index + 1}</Label>\n                        {manualEntry.lineItems.length > 1 && (\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeLineItem(index)}\n                            data-testid={`button-remove-line-item-${index}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                        <div>\n                          <Label htmlFor={`item-select-${index}`}>Item</Label>\n                          <Select \n                            value={lineItem.itemId} \n                            onValueChange={(value) => updateLineItem(index, \"itemId\", value)}\n                          >\n                            <SelectTrigger data-testid={`select-item-${index}`}>\n                              <SelectValue placeholder=\"Select item\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {filteredItems?.map((item: any) => (\n                                <SelectItem key={item.id} value={item.id}>\n                                  {item.name} - {item.quality}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor={`crates-${index}`}>Crates</Label>\n                          <Input\n                            id={`crates-${index}`}\n                            type=\"number\"\n                            step=\"0.01\"\n                            value={lineItem.crates}\n                            onChange={(e) => updateLineItem(index, \"crates\", e.target.value)}\n                            data-testid={`input-crates-${index}`}\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor={`boxes-${index}`}>Boxes</Label>\n                          <Input\n                            id={`boxes-${index}`}\n                            type=\"number\"\n                            step=\"0.01\"\n                            value={lineItem.boxes}\n                            onChange={(e) => updateLineItem(index, \"boxes\", e.target.value)}\n                            data-testid={`input-boxes-${index}`}\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor={`kgs-${index}`}>Kgs</Label>\n                          <Input\n                            id={`kgs-${index}`}\n                            type=\"number\"\n                            step=\"0.01\"\n                            value={lineItem.kgs}\n                            onChange={(e) => updateLineItem(index, \"kgs\", e.target.value)}\n                            data-testid={`input-kgs-${index}`}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Notes */}\n            <div>\n              <Label htmlFor=\"manual-notes\">Notes</Label>\n              <Textarea\n                id=\"manual-notes\"\n                placeholder=\"Enter any notes for this stock entry\"\n                value={manualEntry.notes}\n                onChange={(e) => setManualEntry({ ...manualEntry, notes: e.target.value })}\n                data-testid=\"textarea-manual-notes\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowManualEntry(false)}\n                data-testid=\"button-cancel-manual-entry\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleManualStockEntry}\n                disabled={createStockMovementMutation.isPending}\n                data-testid=\"button-add-manual-entry\"\n              >\n                {createStockMovementMutation.isPending ? \"Adding...\" : \"Add Stock\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Wastage Entry Modal */}\n      <Dialog open={showWastageEntry} onOpenChange={(open) => {\n        if (!open) {\n          setWastageEntry({ itemId: \"\", crates: \"\", kgs: \"\", boxes: \"\", reason: \"\", notes: \"\" });\n        }\n        setShowWastageEntry(open);\n      }}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Record Stock Wastage</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"wastage-item-select\">Select Item</Label>\n              <Select \n                value={wastageEntry.itemId} \n                onValueChange={(value) => setWastageEntry({ ...wastageEntry, itemId: value })}\n              >\n                <SelectTrigger data-testid=\"select-wastage-item\">\n                  <SelectValue placeholder=\"Select an item\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {items?.map((item: any) => (\n                    <SelectItem key={item.id} value={item.id}>\n                      {item.name} - {item.quality} ({item.vendor?.name || 'Unknown Vendor'})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"wastage-crates\">Wastage in Crates</Label>\n                <Input\n                  id=\"wastage-crates\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={wastageEntry.crates}\n                  onChange={(e) => setWastageEntry({ ...wastageEntry, crates: e.target.value })}\n                  data-testid=\"input-wastage-crates\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"wastage-boxes\">Wastage in Boxes</Label>\n                <Input\n                  id=\"wastage-boxes\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={wastageEntry.boxes}\n                  onChange={(e) => setWastageEntry({ ...wastageEntry, boxes: e.target.value })}\n                  data-testid=\"input-wastage-boxes\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"wastage-kgs\">Wastage in Kgs</Label>\n                <Input\n                  id=\"wastage-kgs\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={wastageEntry.kgs}\n                  onChange={(e) => setWastageEntry({ ...wastageEntry, kgs: e.target.value })}\n                  data-testid=\"input-wastage-kgs\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"wastage-reason\">Reason for Wastage *</Label>\n              <Select \n                value={wastageEntry.reason} \n                onValueChange={(value) => setWastageEntry({ ...wastageEntry, reason: value })}\n              >\n                <SelectTrigger data-testid=\"select-wastage-reason\">\n                  <SelectValue placeholder=\"Select reason\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Spoilage\">Spoilage</SelectItem>\n                  <SelectItem value=\"Damaged\">Damaged/Broken</SelectItem>\n                  <SelectItem value=\"Overripe\">Overripe</SelectItem>\n                  <SelectItem value=\"Pest Damage\">Pest Damage</SelectItem>\n                  <SelectItem value=\"Physical Damage\">Physical Damage</SelectItem>\n                  <SelectItem value=\"Quality Issues\">Quality Issues</SelectItem>\n                  <SelectItem value=\"Other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"wastage-notes\">Additional Notes</Label>\n              <Textarea\n                id=\"wastage-notes\"\n                placeholder=\"Enter additional notes about the wastage\"\n                value={wastageEntry.notes}\n                onChange={(e) => setWastageEntry({ ...wastageEntry, notes: e.target.value })}\n                data-testid=\"textarea-wastage-notes\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowWastageEntry(false)}\n                data-testid=\"button-cancel-wastage\"\n              >\n                Cancel\n              </Button>\n              <Button \n                variant=\"destructive\"\n                onClick={handleWastageEntry}\n                disabled={createStockMovementMutation.isPending}\n                data-testid=\"button-record-wastage\"\n              >\n                {createStockMovementMutation.isPending ? \"Recording...\" : \"Record Wastage\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":38802},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Users, Plus, Edit, Trash2, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { PERMISSIONS, ROLE_PERMISSIONS, permissionService } from \"@/lib/permissions\";\n\nconst userSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(1, \"Name is required\"),\n  role: z.enum([\"Admin\", \"Operator\", \"Accountant\"], {\n    required_error: \"Role is required\",\n  }),\n});\n\nconst editUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\").optional(),\n  name: z.string().min(1, \"Name is required\"),\n  role: z.enum([\"Admin\", \"Operator\", \"Accountant\"], {\n    required_error: \"Role is required\",\n  }),\n});\n\ntype UserFormData = z.infer<typeof userSchema>;\ntype EditUserFormData = z.infer<typeof editUserSchema>;\n\nexport default function UserManagement() {\n  const [open, setOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<any>(null);\n  const [managingPermissions, setManagingPermissions] = useState<any>(null);\n  const [userPermissions, setUserPermissions] = useState<string[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      name: \"\",\n      role: \"Operator\",\n    },\n  });\n\n  const editForm = useForm<EditUserFormData>({\n    resolver: zodResolver(editUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      name: \"\",\n      role: \"Operator\",\n    },\n  });\n\n  const { data: users, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: UserFormData) => {\n      const response = await authenticatedApiRequest(\"POST\", \"/api/users\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User created\",\n        description: \"User has been created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: EditUserFormData }) => {\n      const response = await authenticatedApiRequest(\"PUT\", `/api/users/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User updated\",\n        description: \"User has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditingUser(null);\n      editForm.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await authenticatedApiRequest(\"DELETE\", `/api/users/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User deleted\",\n        description: \"User has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredUsers = users?.filter((user: any) => {\n    const searchString = searchTerm.toLowerCase();\n    return (\n      user.username.toLowerCase().includes(searchString) ||\n      user.name.toLowerCase().includes(searchString) ||\n      user.role.toLowerCase().includes(searchString)\n    );\n  }) || [];\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"Admin\":\n        return \"destructive\";\n      case \"Operator\":\n        return \"default\";\n      case \"Accountant\":\n        return \"secondary\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const handleEdit = (user: any) => {\n    setEditingUser(user);\n    editForm.reset({\n      username: user.username,\n      name: user.name,\n      role: user.role,\n      password: \"\", // Don't prefill password\n    });\n  };\n\n  const handleDelete = async (id: string) => {\n    if (confirm(\"Are you sure you want to delete this user?\")) {\n      deleteUserMutation.mutate(id);\n    }\n  };\n\n  // Define table columns\n  const columns = [\n    {\n      accessorKey: \"username\",\n      header: \"Username\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"name\",\n      header: \"Name\",\n      cell: (value: string) => value,\n    },\n    {\n      accessorKey: \"role\",\n      header: \"Role\",\n      cell: (value: string) => (\n        <Badge variant={getRoleBadgeVariant(value)}>\n          {value}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"active\",\n      header: \"Status\",\n      cell: (value: boolean) => (\n        <Badge variant={value ? \"default\" : \"secondary\"}>\n          {value ? \"Active\" : \"Inactive\"}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Actions\",\n      cell: (value: string, row: any) => (\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEdit(row)}\n            data-testid={`button-edit-${value}`}\n            title=\"Edit User\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setManagingPermissions(row)}\n            data-testid={`button-permissions-${value}`}\n            title=\"Manage Permissions\"\n          >\n            <Shield className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleDelete(value)}\n            data-testid={`button-delete-${value}`}\n            title=\"Delete User\"\n            disabled={deleteUserMutation.isPending}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const updatePermissionsMutation = useMutation({\n    mutationFn: async ({ id, permissions }: { id: string; permissions: string[] }) => {\n      const response = await authenticatedApiRequest(\"PUT\", `/api/users/${id}/permissions`, { permissions });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Permissions updated\",\n        description: \"User permissions have been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update permissions\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleManagePermissions = (user: any) => {\n    setManagingPermissions(user);\n    setUserPermissions(user.permissions || ROLE_PERMISSIONS[user.role as keyof typeof ROLE_PERMISSIONS] || []);\n  };\n\n  const togglePermission = (permission: string) => {\n    setUserPermissions(prev => {\n      if (prev.includes(permission)) {\n        return prev.filter(p => p !== permission);\n      } else {\n        return [...prev, permission];\n      }\n    });\n  };\n\n  const savePermissions = () => {\n    if (managingPermissions) {\n      updatePermissionsMutation.mutate({\n        id: managingPermissions.id,\n        permissions: userPermissions\n      });\n      setManagingPermissions(null);\n    }\n  };\n\n  const onSubmit = (data: UserFormData) => {\n    createUserMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: EditUserFormData) => {\n    if (!editingUser) return;\n    \n    // Only include password if it's provided\n    const updateData = data.password \n      ? data \n      : { username: data.username, name: data.name, role: data.role };\n    \n    updateUserMutation.mutate({ id: editingUser.id, data: updateData });\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">User Management</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage system users and their permissions\n              </p>\n            </div>\n            <Dialog open={open} onOpenChange={setOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"gap-2\" data-testid=\"button-add-user\">\n                  <Plus className=\"h-4 w-4\" />\n                  Add User\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New User</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter username\" {...field} data-testid=\"input-username\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Enter password\" {...field} data-testid=\"input-password\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Full Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter full name\" {...field} data-testid=\"input-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"role\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Role</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-role\">\n                                <SelectValue placeholder=\"Select role\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"Admin\">Admin</SelectItem>\n                              <SelectItem value=\"Operator\">Operator</SelectItem>\n                              <SelectItem value=\"Accountant\">Accountant</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex justify-end space-x-2 pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createUserMutation.isPending} data-testid=\"button-create-user\">\n                        {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  System Users\n                </CardTitle>\n                <div className=\"relative\">\n                  <Input\n                    placeholder=\"Search users...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-64\"\n                    data-testid=\"input-search-users\"\n                  />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                data={filteredUsers}\n                columns={columns}\n                searchTerm={searchTerm}\n                searchFields={[\"username\", \"name\", \"role\"]}\n                isLoading={isLoading}\n                enableRowSelection={true}\n                rowKey=\"id\"\n              />\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Edit User Modal */}\n      <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter username\" {...field} data-testid=\"input-edit-username\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password (leave empty to keep current)</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Enter new password\" {...field} data-testid=\"input-edit-password\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter full name\" {...field} data-testid=\"input-edit-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-role\">\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"Admin\">Admin</SelectItem>\n                        <SelectItem value=\"Operator\">Operator</SelectItem>\n                        <SelectItem value=\"Accountant\">Accountant</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setEditingUser(null)} data-testid=\"button-cancel-edit\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateUserMutation.isPending} data-testid=\"button-update-user\">\n                  {updateUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Permissions Management Modal */}\n      <Dialog open={!!managingPermissions} onOpenChange={() => setManagingPermissions(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Manage Permissions - {managingPermissions?.name}</DialogTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Role: <Badge variant={getRoleBadgeVariant(managingPermissions?.role)}>\n                {managingPermissions?.role}\n              </Badge>\n            </p>\n          </DialogHeader>\n          \n          {managingPermissions && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-medium\">Default Role Permissions</h4>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {ROLE_PERMISSIONS[managingPermissions.role as keyof typeof ROLE_PERMISSIONS]?.map((permission: string) => (\n                      <div key={permission} className=\"flex items-center space-x-2 p-2 bg-secondary rounded-md\">\n                        <Shield className=\"h-4 w-4 text-green-600\" />\n                        <span className=\"text-sm\">{permission.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</span>\n                      </div>\n                    )) || []}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4 border-t pt-4\">\n                  <h4 className=\"text-lg font-medium\">Customize User Permissions</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Toggle individual permissions on or off. Changes override the default role permissions.\n                  </p>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {Object.entries({\n                      \"User Management\": [PERMISSIONS.MANAGE_USERS, PERMISSIONS.VIEW_USERS],\n                      \"Vendor Management\": [PERMISSIONS.MANAGE_VENDORS, PERMISSIONS.VIEW_VENDORS, PERMISSIONS.DELETE_VENDORS],\n                      \"Item Management\": [PERMISSIONS.MANAGE_ITEMS, PERMISSIONS.VIEW_ITEMS, PERMISSIONS.DELETE_ITEMS],\n                      \"Purchase Invoices\": [PERMISSIONS.CREATE_PURCHASE_INVOICES, PERMISSIONS.VIEW_PURCHASE_INVOICES, PERMISSIONS.EDIT_PURCHASE_INVOICES, PERMISSIONS.DELETE_PURCHASE_INVOICES],\n                      \"Payments\": [PERMISSIONS.CREATE_PAYMENTS, PERMISSIONS.VIEW_PAYMENTS, PERMISSIONS.EDIT_PAYMENTS, PERMISSIONS.DELETE_PAYMENTS],\n                      \"Stock Management\": [PERMISSIONS.MANAGE_STOCK, PERMISSIONS.VIEW_STOCK],\n                      \"Financial Reports\": [PERMISSIONS.VIEW_LEDGERS, PERMISSIONS.VIEW_REPORTS, PERMISSIONS.VIEW_CASHBOOK, PERMISSIONS.VIEW_BANKBOOK],\n                      \"Bank Accounts\": [PERMISSIONS.MANAGE_BANK_ACCOUNTS, PERMISSIONS.VIEW_BANK_ACCOUNTS],\n                      \"System\": [PERMISSIONS.MANAGE_SETTINGS, PERMISSIONS.VIEW_SETTINGS, PERMISSIONS.VIEW_DASHBOARD, PERMISSIONS.VIEW_ANALYTICS],\n                    }).map(([category, permissions]) => (\n                      <div key={category} className=\"border rounded-lg p-3\">\n                        <h5 className=\"font-medium mb-3\">{category}</h5>\n                        <div className=\"space-y-3\">\n                          {permissions.map((permission: string) => {\n                            const hasPermission = userPermissions.includes(permission);\n                            return (\n                              <div key={permission} className=\"flex items-center justify-between p-2 rounded-md border bg-card\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-sm font-medium\">\n                                    {permission.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                                  </span>\n                                </div>\n                                <Switch\n                                  checked={hasPermission}\n                                  onCheckedChange={() => togglePermission(permission)}\n                                  data-testid={`switch-${permission}`}\n                                />\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center pt-4 border-t\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {userPermissions.length} permissions selected\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setManagingPermissions(null)} data-testid=\"button-close-permissions\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={savePermissions} \n                    disabled={updatePermissionsMutation.isPending}\n                    data-testid=\"button-save-permissions\"\n                  >\n                    {updatePermissionsMutation.isPending ? \"Saving...\" : \"Save Permissions\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":24129},"client/src/pages/vendors.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Search, Plus, Edit, Trash2 } from \"lucide-react\";\nimport VendorForm from \"@/components/forms/vendor-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { PERMISSIONS } from \"@/lib/permissions\";\nimport { PermissionGuard } from \"@/components/ui/permission-guard\";\n\nexport default function Vendors() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const [editingVendor, setEditingVendor] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: vendors, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/vendors\"],\n  });\n\n  const deleteVendorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await authenticatedApiRequest(\"DELETE\", `/api/vendors/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vendor deleted\",\n        description: \"Vendor has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vendors\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete vendor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Define table columns\n  const columns = [\n    {\n      accessorKey: \"name\",\n      header: \"Name\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"contactPerson\",\n      header: \"Contact Person\",\n      cell: (value: string) => value || \"-\",\n    },\n    {\n      accessorKey: \"phone\",\n      header: \"Phone\",\n      cell: (value: string) => value || \"-\",\n    },\n    {\n      accessorKey: \"gstNumber\",\n      header: \"GST Number\",\n      cell: (value: string) => value || \"-\",\n    },\n    {\n      accessorKey: \"balance\",\n      header: \"Balance\",\n      cell: (value: string) => `₹${parseFloat(value).toLocaleString('en-IN')}`,\n    },\n    {\n      accessorKey: \"isActive\",\n      header: \"Status\",\n      cell: (value: boolean) => (\n        <Badge variant={value ? \"default\" : \"secondary\"}>\n          {value ? \"Active\" : \"Inactive\"}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Actions\",\n      cell: (value: string, vendor: any) => (\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEdit(vendor)}\n            data-testid={`button-edit-vendor-${vendor.id}`}\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleDelete(vendor.id)}\n            data-testid={`button-delete-vendor-${vendor.id}`}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleEdit = (vendor: any) => {\n    setEditingVendor(vendor);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (confirm(\"Are you sure you want to delete this vendor?\")) {\n      deleteVendorMutation.mutate(id);\n    }\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingVendor(null);\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Vendors</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage your vendor information and contacts\n              </p>\n            </div>\n            <Button onClick={() => setShowForm(true)} data-testid=\"button-add-vendor\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Vendor\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>All Vendors</CardTitle>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search vendors...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                    data-testid=\"input-search-vendors\"\n                  />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                data={vendors || []}\n                columns={columns}\n                searchTerm={searchTerm}\n                searchFields={[\"name\", \"contactPerson\", \"phone\", \"gstNumber\"]}\n                isLoading={isLoading}\n                enableRowSelection={true}\n                rowKey=\"id\"\n              />\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      <VendorForm\n        open={showForm}\n        onOpenChange={handleCloseForm}\n        vendor={editingVendor}\n      />\n    </div>\n  );\n}\n","size_bytes":5792},"client/src/types/index.ts":{"content":"export interface DashboardKPIs {\n  todaySales: string;\n  pendingPayments: string;\n  pendingInvoicesCount: number;\n  activeVendors: number;\n  stockValue: string;\n  totalStockKgs: string;\n}\n\nexport interface CreateInvoiceItem {\n  commodityId: string;\n  quantity: string;\n  rate: string;\n  amount: string;\n}\n\nexport interface CreateInvoiceData {\n  vendorId: string;\n  invoiceDate: string;\n  grossAmount: string;\n  commissionRate: string;\n  commissionAmount: string;\n  freightCharges: string;\n  laborCharges: string;\n  netPayable: string;\n  items: CreateInvoiceItem[];\n}\n","size_bytes":567},"client/src/components/dashboard/kpi-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { IndianRupee, Clock, Truck, Boxes } from \"lucide-react\";\nimport type { DashboardKPIs } from \"@/types\";\n\ninterface KPICardsProps {\n  kpis?: DashboardKPIs;\n  loading: boolean;\n}\n\nexport default function KPICards({ kpis, loading }: KPICardsProps) {\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <Skeleton className=\"h-4 w-24 mb-2\" />\n              <Skeleton className=\"h-8 w-32 mb-1\" />\n              <Skeleton className=\"h-3 w-20\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!kpis) return null;\n\n  const cards = [\n    {\n      title: \"Total Sales Today\",\n      value: kpis.todaySales,\n      change: \"+12.5% from yesterday\",\n      icon: IndianRupee,\n      iconBg: \"bg-chart-2/10\",\n      iconColor: \"text-chart-2\",\n      changeColor: \"text-chart-2\",\n    },\n    {\n      title: \"Pending Payments\",\n      value: kpis.pendingPayments,\n      change: `${kpis.pendingInvoicesCount} invoices due`,\n      icon: Clock,\n      iconBg: \"bg-chart-1/10\",\n      iconColor: \"text-chart-1\",\n      changeColor: \"text-chart-1\",\n    },\n    {\n      title: \"Active Vendors\",\n      value: kpis.activeVendors.toString(),\n      change: \"3 new this week\",\n      icon: Truck,\n      iconBg: \"bg-chart-3/10\",\n      iconColor: \"text-chart-3\",\n      changeColor: \"text-chart-3\",\n    },\n    {\n      title: \"Stock Value\",\n      value: kpis.stockValue,\n      change: kpis.totalStockKgs + \" total\",\n      icon: Boxes,\n      iconBg: \"bg-chart-4/10\",\n      iconColor: \"text-chart-4\",\n      changeColor: \"text-chart-4\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {cards.map((card) => (\n        <Card key={card.title} data-testid={`card-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">{card.title}</p>\n                <p className=\"text-2xl font-semibold text-foreground\">{card.value}</p>\n                <p className={`text-sm mt-1 ${card.changeColor}`}>{card.change}</p>\n              </div>\n              <div className={`w-12 h-12 ${card.iconBg} rounded-lg flex items-center justify-center`}>\n                <card.icon className={`text-lg ${card.iconColor}`} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2751},"client/src/components/dashboard/low-stock-alert.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle } from \"lucide-react\";\n\nexport default function LowStockAlert() {\n  const { data: stock, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/stock\"],\n  });\n\n  if (isLoading) return null;\n\n  // Filter items with low stock (less than 20 units)\n  const lowStockItems = stock?.filter((item: any) => {\n    const totalQty = parseFloat(item.quantityInKgs) + parseFloat(item.quantityInCrates);\n    return totalQty < 20 && totalQty > 0;\n  }) || [];\n\n  if (lowStockItems.length === 0) return null;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Low Stock Alert</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {lowStockItems.slice(0, 3).map((item: any) => {\n            const remainingQty = item.commodity.unit === \"Kgs\" \n              ? parseFloat(item.quantityInKgs)\n              : parseFloat(item.quantityInCrates);\n            \n            return (\n              <Alert key={item.id} variant=\"destructive\" data-testid={`alert-low-stock-${item.id}`}>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <div className=\"font-medium\">{item.commodity.name} {item.commodity.quality}</div>\n                  <div className=\"text-sm\">{remainingQty} {item.commodity.unit} remaining</div>\n                </AlertDescription>\n              </Alert>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1656},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, CreditCard, UserPlus, Boxes } from \"lucide-react\";\nimport PurchaseInvoiceModal from \"@/components/forms/purchase-invoice-modal\";\n\nexport default function QuickActions() {\n  const [showInvoiceModal, setShowInvoiceModal] = useState(false);\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <Button\n              className=\"w-full justify-center\"\n              onClick={() => setShowInvoiceModal(true)}\n              data-testid=\"button-new-purchase-invoice\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              New Purchase Invoice\n            </Button>\n            <Button variant=\"secondary\" className=\"w-full justify-center\" data-testid=\"button-record-payment\">\n              <CreditCard className=\"mr-2 h-4 w-4\" />\n              Record Payment\n            </Button>\n            <Button variant=\"secondary\" className=\"w-full justify-center\" data-testid=\"button-add-vendor\">\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Add Vendor\n            </Button>\n            <Button variant=\"secondary\" className=\"w-full justify-center\" data-testid=\"button-update-stock\">\n              <Boxes className=\"mr-2 h-4 w-4\" />\n              Update Stock\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <PurchaseInvoiceModal \n        open={showInvoiceModal} \n        onOpenChange={setShowInvoiceModal} \n      />\n    </>\n  );\n}\n","size_bytes":1712},"client/src/components/dashboard/recent-payments.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { CheckCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function RecentPayments() {\n  const { data: payments, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/payments\"],\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Recent Payments</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Skeleton className=\"w-8 h-8 rounded-full\" />\n                  <div>\n                    <Skeleton className=\"h-4 w-24 mb-1\" />\n                    <Skeleton className=\"h-3 w-16\" />\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <Skeleton className=\"h-4 w-16 mb-1\" />\n                  <Skeleton className=\"h-3 w-12\" />\n                </div>\n              </div>\n            ))\n          ) : payments && payments.length > 0 ? (\n            payments.slice(0, 3).map((payment: any) => (\n              <div\n                key={payment.id}\n                className=\"flex items-center justify-between\"\n                data-testid={`payment-${payment.id}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-chart-2/10 rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"text-chart-2 h-4 w-4\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">{payment.vendor?.name || \"Unknown Vendor\"}</p>\n                    <p className=\"text-sm text-muted-foreground\">{payment.paymentMode}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium text-foreground\">₹{parseFloat(payment.amount).toLocaleString('en-IN')}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {format(new Date(payment.paymentDate || payment.createdAt), \"MMM dd\")}\n                  </p>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <CheckCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No recent payments</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2761},"client/src/components/dashboard/recent-transactions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { File } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function RecentTransactions() {\n  const { data: invoices, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/purchase-invoices\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Paid\":\n        return \"bg-chart-2/10 text-chart-2\";\n      case \"Pending\":\n      case \"Unpaid\":\n        return \"bg-chart-1/10 text-chart-1\";\n      case \"Partially Paid\":\n        return \"bg-chart-4/10 text-chart-4\";\n      default:\n        return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Purchase Invoices</CardTitle>\n          <Link href=\"/purchase-invoices\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-invoices\">\n              View All\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between py-3 border-b border-border last:border-b-0\">\n                <div className=\"flex items-center space-x-4\">\n                  <Skeleton className=\"w-10 h-10 rounded-lg\" />\n                  <div>\n                    <Skeleton className=\"h-4 w-24 mb-1\" />\n                    <Skeleton className=\"h-3 w-32\" />\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <Skeleton className=\"h-4 w-16 mb-1\" />\n                  <Skeleton className=\"h-5 w-12\" />\n                </div>\n              </div>\n            ))\n          ) : invoices && invoices.length > 0 ? (\n            invoices.slice(0, 5).map((invoice: any) => (\n              <div\n                key={invoice.id}\n                className=\"flex items-center justify-between py-3 border-b border-border last:border-b-0\"\n                data-testid={`transaction-${invoice.id}`}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center\">\n                    <File className=\"text-secondary-foreground h-5 w-5\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">{invoice.invoiceNumber}</p>\n                    <p className=\"text-sm text-muted-foreground\">{invoice.vendor.name}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium text-foreground\">₹{parseFloat(invoice.netPayable).toLocaleString('en-IN')}</p>\n                  <Badge className={getStatusColor(invoice.status)} variant=\"secondary\">\n                    {invoice.status}\n                  </Badge>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <File className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No invoices found</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3557},"client/src/components/forms/payment-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\n\nconst paymentSchema = z.object({\n  invoiceId: z.string().min(1, \"Invoice is required\"),\n  vendorId: z.string().min(1, \"Vendor is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n  paymentMode: z.enum([\"Cash\", \"Bank\", \"UPI\", \"Cheque\"], {\n    required_error: \"Payment mode is required\",\n  }),\n  paymentDate: z.string().min(1, \"Payment date is required\"),\n  bankAccountId: z.string().nullable().optional(),\n  chequeNumber: z.string().optional(),\n  upiReference: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\ninterface PaymentFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  preSelectedInvoiceId?: string;\n}\n\nexport default function PaymentForm({ open, onOpenChange, preSelectedInvoiceId }: PaymentFormProps) {\n  const [selectedVendor, setSelectedVendor] = useState(\"\");\n  const [selectedInvoice, setSelectedInvoice] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      invoiceId: preSelectedInvoiceId || \"\",\n      vendorId: \"\",\n      amount: \"\",\n      paymentMode: \"Cash\",\n      paymentDate: new Date().toISOString().split('T')[0],\n      bankAccountId: undefined,\n      chequeNumber: \"\",\n      upiReference: \"\",\n      notes: \"\",\n    },\n  });\n\n  const watchedPaymentMode = form.watch(\"paymentMode\");\n\n  const { data: vendors } = useQuery<any[]>({\n    queryKey: [\"/api/vendors\"],\n  });\n\n  const { data: invoices } = useQuery<any[]>({\n    queryKey: [\"/api/purchase-invoices\"],\n  });\n\n  const { data: bankAccounts } = useQuery<any[]>({\n    queryKey: [\"/api/bank-accounts\"],\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async (data: PaymentFormData) => {\n      const paymentData = {\n        ...data,\n        paymentDate: data.paymentDate,\n        bankAccountId: data.bankAccountId || undefined,\n      };\n      const response = await authenticatedApiRequest(\"POST\", \"/api/payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Payment has been recorded successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/kpis\"] });\n      onOpenChange(false);\n      form.reset();\n      setSelectedVendor(\"\");\n      setSelectedInvoice(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getUnpaidInvoices = () => {\n    if (!selectedVendor) return [];\n    return invoices?.filter((invoice: any) => \n      invoice.vendorId === selectedVendor && \n      invoice.status !== \"Paid\"\n    ) || [];\n  };\n\n  const handleVendorChange = (vendorId: string) => {\n    setSelectedVendor(vendorId);\n    form.setValue(\"vendorId\", vendorId);\n    form.setValue(\"invoiceId\", \"\");\n    setSelectedInvoice(null);\n  };\n\n  const handleInvoiceChange = (invoiceId: string) => {\n    const invoice = invoices?.find((inv: any) => inv.id === invoiceId);\n    setSelectedInvoice(invoice);\n    form.setValue(\"invoiceId\", invoiceId);\n    if (invoice) {\n      form.setValue(\"amount\", invoice.balanceAmount);\n    }\n  };\n\n  const onSubmit = (data: PaymentFormData) => {\n    createPaymentMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Record Payment</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"vendorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vendor *</FormLabel>\n                    <Select onValueChange={handleVendorChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-vendor\">\n                          <SelectValue placeholder=\"Select vendor\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {vendors?.map((vendor: any) => (\n                          <SelectItem key={vendor.id} value={vendor.id}>\n                            {vendor.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"invoiceId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Invoice *</FormLabel>\n                    <Select \n                      onValueChange={handleInvoiceChange} \n                      value={field.value}\n                      disabled={!selectedVendor}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-invoice\">\n                          <SelectValue placeholder=\"Select invoice\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {getUnpaidInvoices().map((invoice: any) => (\n                          <SelectItem key={invoice.id} value={invoice.id}>\n                            {invoice.invoiceNumber} - Balance: ₹{parseFloat(invoice.balanceAmount).toLocaleString('en-IN')}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Amount *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field} \n                        data-testid=\"input-payment-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    {selectedInvoice && (\n                      <div className=\"text-sm text-muted-foreground\">\n                        Outstanding: ₹{parseFloat(selectedInvoice.balanceAmount).toLocaleString('en-IN')}\n                      </div>\n                    )}\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"paymentMode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Mode *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-mode\">\n                          <SelectValue placeholder=\"Select payment mode\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"Cash\">Cash</SelectItem>\n                        <SelectItem value=\"Bank\">Bank Transfer</SelectItem>\n                        <SelectItem value=\"UPI\">UPI</SelectItem>\n                        <SelectItem value=\"Cheque\">Cheque</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"paymentDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Date *</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-payment-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {(watchedPaymentMode === \"Bank\" || watchedPaymentMode === \"UPI\") && (\n                <FormField\n                  control={form.control}\n                  name=\"bankAccountId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bank Account</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-bank-account\">\n                            <SelectValue placeholder=\"Select bank account\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {bankAccounts?.map((account: any) => (\n                            <SelectItem key={account.id} value={account.id}>\n                              {account.name} - {account.accountNumber}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {watchedPaymentMode === \"Cheque\" && (\n                <FormField\n                  control={form.control}\n                  name=\"chequeNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cheque Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter cheque number\" {...field} data-testid=\"input-cheque-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {watchedPaymentMode === \"UPI\" && (\n                <FormField\n                  control={form.control}\n                  name=\"upiReference\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>UPI Reference</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter UPI reference\" {...field} data-testid=\"input-upi-reference\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter any additional notes\"\n                      className=\"min-h-[80px]\"\n                      {...field}\n                      data-testid=\"textarea-payment-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-payment\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createPaymentMutation.isPending}\n                data-testid=\"button-record-payment\"\n              >\n                {createPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13292},"client/src/components/forms/purchase-invoice-modal.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { Plus, Trash2 } from \"lucide-react\";\n\nconst invoiceItemSchema = z.object({\n  itemId: z.string().min(1, \"Item is required\"),\n  weight: z.string().min(1, \"Weight is required\"),\n  crates: z.string().min(1, \"Crates is required\"),\n  boxes: z.string().min(1, \"Boxes is required\"),\n  rate: z.string().min(1, \"Rate is required\"),\n  amount: z.string(),\n});\n\nconst invoiceSchema = z.object({\n  vendorId: z.string().min(1, \"Vendor is required\"),\n  invoiceDate: z.string().min(1, \"Invoice date is required\"),\n  items: z.array(invoiceItemSchema).min(1, \"At least one item is required\"),\n  commission: z.string().default(\"0\"),\n  labour: z.string().default(\"0\"),\n  truckFreight: z.string().default(\"0\"),\n  crateFreight: z.string().default(\"0\"),\n  postExpenses: z.string().default(\"0\"),\n  draftExpenses: z.string().default(\"0\"),\n  vatav: z.string().default(\"0\"),\n  otherExpenses: z.string().default(\"0\"),\n  advance: z.string().default(\"0\"),\n  totalExpense: z.string(),\n  totalSelling: z.string(),\n  totalLessExpenses: z.string(),\n  netAmount: z.string(),\n});\n\ntype InvoiceFormData = z.infer<typeof invoiceSchema>;\n\ninterface PurchaseInvoiceModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function PurchaseInvoiceModal({ open, onOpenChange }: PurchaseInvoiceModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedVendorId, setSelectedVendorId] = useState(\"\");\n  const [selectedStockOutEntries, setSelectedStockOutEntries] = useState<string[]>([]);\n\n  const form = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceSchema),\n    defaultValues: {\n      vendorId: \"\",\n      invoiceDate: new Date().toISOString().split('T')[0],\n      items: [{ itemId: \"\", weight: \"\", crates: \"\", boxes: \"\", rate: \"\", amount: \"0\" }],\n      commission: \"0\",\n      labour: \"0\",\n      truckFreight: \"0\",\n      crateFreight: \"0\",\n      postExpenses: \"0\",\n      draftExpenses: \"0\",\n      vatav: \"0\",\n      otherExpenses: \"0\",\n      advance: \"0\",\n      totalExpense: \"0\",\n      totalSelling: \"0\",\n      totalLessExpenses: \"0\",\n      netAmount: \"0\",\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const { data: vendors } = useQuery<any[]>({\n    queryKey: [\"/api/vendors\"],\n  });\n\n  const { data: items } = useQuery<any[]>({\n    queryKey: [\"/api/items\"],\n  });\n\n  // Fetch available stock out entries for selected vendor\n  const { data: availableStockOutEntries } = useQuery<any[]>({\n    queryKey: [\"/api/stock-movements/vendor\", selectedVendorId, \"available\"],\n    enabled: !!selectedVendorId,\n  });\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Add stockOutEntryIds if any were selected\n      const requestData = {\n        ...data,\n        stockOutEntryIds: selectedStockOutEntries.length > 0 ? selectedStockOutEntries : undefined\n      };\n      const response = await authenticatedApiRequest(\"POST\", \"/api/purchase-invoices\", requestData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Invoice created\",\n        description: \"Purchase invoice created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/kpis\"] });\n      onOpenChange(false);\n      form.reset();\n      setSelectedVendorId(\"\");\n      setSelectedStockOutEntries([]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle vendor selection\n  const handleVendorChange = (vendorId: string) => {\n    setSelectedVendorId(vendorId);\n    setSelectedStockOutEntries([]); // Reset stock out entries when vendor changes\n    form.setValue(\"vendorId\", vendorId);\n  };\n\n  // Handle stock out entry selection toggle\n  const handleStockOutEntryToggle = (entryId: string) => {\n    const newSelectedEntries = selectedStockOutEntries.includes(entryId)\n      ? selectedStockOutEntries.filter(id => id !== entryId)\n      : [...selectedStockOutEntries, entryId];\n    \n    setSelectedStockOutEntries(newSelectedEntries);\n    \n    // Aggregate data from all selected entries\n    if (newSelectedEntries.length > 0) {\n      const itemMap = new Map<string, {\n        itemId: string;\n        totalWeight: number;\n        totalCrates: number;\n        totalValue: number; // For weighted average rate calculation\n        rates: { rate: number; weight: number }[]; // For tracking individual rates and weights\n      }>();\n      \n      // First pass: collect all data by item\n      newSelectedEntries.forEach(selectedId => {\n        const entry = availableStockOutEntries?.find((e: any) => e.id === selectedId);\n        if (entry) {\n          const itemId = entry.itemId;\n          const weight = parseFloat(entry.quantityInKgs) || 0;\n          const crates = parseFloat(entry.quantityInCrates) || 0;\n          const rate = parseFloat(entry.rate) || 0;\n          const value = weight * rate; // Total value for this entry\n          \n          if (itemMap.has(itemId)) {\n            const existing = itemMap.get(itemId)!;\n            existing.totalWeight += weight;\n            existing.totalCrates += crates;\n            existing.totalValue += value;\n            existing.rates.push({ rate, weight });\n          } else {\n            itemMap.set(itemId, {\n              itemId,\n              totalWeight: weight,\n              totalCrates: crates,\n              totalValue: value,\n              rates: [{ rate, weight }]\n            });\n          }\n        }\n      });\n      \n      // Second pass: calculate aggregated items with weighted average rates\n      const aggregatedItems = Array.from(itemMap.values()).map(item => {\n        // Calculate weighted average rate\n        const averageRate = item.totalWeight > 0 ? item.totalValue / item.totalWeight : 0;\n        \n        return {\n          itemId: item.itemId,\n          weight: item.totalWeight.toString(),\n          crates: item.totalCrates.toString(),\n          boxes: \"0\", // Default to 0 for boxes\n          rate: averageRate.toFixed(2),\n          amount: \"0\" // Will be calculated\n        };\n      });\n      \n      form.setValue(\"items\", aggregatedItems);\n    } else {\n      // Reset to single empty item when no entries selected\n      form.setValue(\"items\", [{ itemId: \"\", weight: \"\", crates: \"\", boxes: \"\", rate: \"\", amount: \"0\" }]);\n    }\n  };\n\n  // Watch form fields for calculations\n  const watchedItems = form.watch(\"items\");\n  const watchedCommission = form.watch(\"commission\");\n  const watchedLabour = form.watch(\"labour\");\n  const watchedTruckFreight = form.watch(\"truckFreight\");\n  const watchedCrateFreight = form.watch(\"crateFreight\");\n  const watchedPostExpenses = form.watch(\"postExpenses\");\n  const watchedDraftExpenses = form.watch(\"draftExpenses\");\n  const watchedVatav = form.watch(\"vatav\");\n  const watchedOtherExpenses = form.watch(\"otherExpenses\");\n  const watchedAdvance = form.watch(\"advance\");\n\n  // Helper function to get quantity based on item unit\n  const getQuantityForCalculation = (item: any, itemDetails: any) => {\n    if (!itemDetails) return parseFloat(item.weight) || 0;\n    \n    switch (itemDetails.unit) {\n      case \"kgs\":\n        return parseFloat(item.weight) || 0;\n      case \"crate\":\n        return parseFloat(item.crates) || 0;\n      case \"box\":\n        return parseFloat(item.boxes) || 0; // Box uses boxes field\n      default:\n        return parseFloat(item.weight) || 0;\n    }\n  };\n\n  // Calculate derived values\n  const totalSelling = watchedItems.reduce((sum, item) => {\n    const itemDetails = items?.find(i => i.id === item.itemId);\n    const quantity = getQuantityForCalculation(item, itemDetails);\n    const rate = parseFloat(item.rate) || 0;\n    return sum + (quantity * rate);\n  }, 0);\n  \n  const commissionPercentage = parseFloat(watchedCommission) || 0;\n  const commissionAmount = (totalSelling * commissionPercentage) / 100;\n  const labour = parseFloat(watchedLabour) || 0;\n  const truckFreight = parseFloat(watchedTruckFreight) || 0;\n  const crateFreight = parseFloat(watchedCrateFreight) || 0;\n  const postExpenses = parseFloat(watchedPostExpenses) || 0;\n  const draftExpenses = parseFloat(watchedDraftExpenses) || 0;\n  const vatav = parseFloat(watchedVatav) || 0;\n  const otherExpenses = parseFloat(watchedOtherExpenses) || 0;\n  const advance = parseFloat(watchedAdvance) || 0;\n  \n  const totalExpense = commissionAmount + labour + truckFreight + crateFreight + postExpenses + draftExpenses + vatav + otherExpenses + advance;\n  const totalLessExpenses = totalSelling - totalExpense;\n  const netAmount = totalLessExpenses;\n\n  // Update calculated fields when dependent values change\n  useEffect(() => {\n    // Update individual item amounts\n    watchedItems.forEach((item, index) => {\n      const itemDetails = items?.find(i => i.id === item.itemId);\n      const quantity = getQuantityForCalculation(item, itemDetails);\n      const rate = parseFloat(item.rate) || 0;\n      const amount = quantity * rate;\n      if (parseFloat(item.amount) !== amount) {\n        form.setValue(`items.${index}.amount`, amount.toFixed(2));\n      }\n    });\n\n    // Update totals\n    form.setValue(\"totalExpense\", totalExpense.toFixed(2));\n    form.setValue(\"totalSelling\", totalSelling.toFixed(2));\n    form.setValue(\"totalLessExpenses\", totalLessExpenses.toFixed(2));\n    form.setValue(\"netAmount\", netAmount.toFixed(2));\n  }, [form, watchedItems, items, totalExpense, totalSelling, totalLessExpenses, netAmount]);\n\n  const onSubmit = (data: InvoiceFormData) => {\n    const invoice = {\n      vendorId: data.vendorId,\n      invoiceDate: data.invoiceDate,\n      commission: commissionAmount.toFixed(2),\n      labour: parseFloat(data.labour).toFixed(2),\n      truckFreight: parseFloat(data.truckFreight).toFixed(2),\n      crateFreight: parseFloat(data.crateFreight).toFixed(2),\n      postExpenses: parseFloat(data.postExpenses).toFixed(2),\n      draftExpenses: parseFloat(data.draftExpenses).toFixed(2),\n      vatav: parseFloat(data.vatav).toFixed(2),\n      otherExpenses: parseFloat(data.otherExpenses).toFixed(2),\n      advance: parseFloat(data.advance).toFixed(2),\n      totalExpense: parseFloat(data.totalExpense).toFixed(2),\n      totalSelling: parseFloat(data.totalSelling).toFixed(2),\n      totalLessExpenses: parseFloat(data.totalLessExpenses).toFixed(2),\n      netAmount: parseFloat(data.netAmount).toFixed(2),\n      balanceAmount: parseFloat(data.netAmount).toFixed(2), // Initially balance equals net amount\n      status: \"Unpaid\",\n    };\n\n    const items = data.items.map(item => ({\n      itemId: item.itemId,\n      weight: parseFloat(item.weight || \"0\").toFixed(2),\n      crates: parseFloat(item.crates || \"0\").toFixed(2),\n      boxes: parseFloat(item.boxes || \"0\").toFixed(2),\n      rate: parseFloat(item.rate).toFixed(2),\n      amount: parseFloat(item.amount).toFixed(2),\n    }));\n\n    createInvoiceMutation.mutate({ invoice, items });\n  };\n\n  const addItem = () => {\n    append({ itemId: \"\", weight: \"\", crates: \"\", boxes: \"\", rate: \"\", amount: \"0\" });\n  };\n\n  const removeItem = (index: number) => {\n    if (fields.length > 1) {\n      remove(index);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create Purchase Invoice</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Invoice Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"vendorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vendor *</FormLabel>\n                      <Select onValueChange={handleVendorChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-vendor\">\n                            <SelectValue placeholder=\"Select vendor\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {vendors?.map((vendor: any) => (\n                            <SelectItem key={vendor.id} value={vendor.id}>\n                              {vendor.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {selectedVendorId && availableStockOutEntries && availableStockOutEntries.length > 0 && (\n                  <div className=\"md:col-span-2\">\n                    <label className=\"text-sm font-medium\">Select Stock Out Entries (Optional)</label>\n                    <div className=\"mt-2 max-h-40 overflow-y-auto border rounded-md p-2 space-y-2\">\n                      {availableStockOutEntries?.map((entry: any) => (\n                        <div key={entry.id} className=\"flex items-start space-x-3\">\n                          <Checkbox\n                            id={entry.id}\n                            checked={selectedStockOutEntries.includes(entry.id)}\n                            onCheckedChange={() => handleStockOutEntryToggle(entry.id)}\n                            data-testid={`checkbox-stock-out-entry-${entry.id}`}\n                          />\n                          <label \n                            htmlFor={entry.id} \n                            className=\"text-sm cursor-pointer flex-1 leading-relaxed\"\n                          >\n                            <span className=\"font-medium\">{entry.item.name} - {entry.item.quality}</span>\n                            <br />\n                            <span className=\"text-muted-foreground text-xs\">\n                              {entry.quantityInKgs} Kgs, {entry.quantityInCrates} Crates | Rate: ₹{entry.rate || 'N/A'} | Date: {new Date(entry.movementDate).toLocaleDateString()}\n                            </span>\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Select multiple stock out entries to combine their data. Items of the same type will be aggregated.\n                    </p>\n                    {selectedStockOutEntries.length > 0 && (\n                      <p className=\"text-xs text-green-600 mt-1\">\n                        {selectedStockOutEntries.length} entries selected\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                <FormField\n                  control={form.control}\n                  name=\"invoiceDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Invoice Date *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-invoice-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Invoice Items */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\">Invoice Items</CardTitle>\n                  <Button \n                    type=\"button\" \n                    onClick={addItem}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex items-center space-x-2\"\n                    data-testid=\"button-add-item\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    <span>Add Item</span>\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {fields.map((field, index) => (\n                  <div key={field.id} className=\"grid grid-cols-1 md:grid-cols-6 gap-4 p-4 border rounded-lg\">\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.itemId`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Item *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid={`select-item-${index}`}>\n                                <SelectValue placeholder=\"Select item\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {items?.map((item: any) => (\n                                <SelectItem key={item.id} value={item.id}>\n                                  {item.name} - {item.quality} ({item.unit?.charAt(0).toUpperCase() + item.unit?.slice(1) || 'N/A'})\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.weight`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Weight (Kgs) *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"0.01\" \n                              placeholder=\"0.00\" \n                              {...field} \n                              data-testid={`input-weight-${index}`}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.crates`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Crates *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"0.01\" \n                              placeholder=\"0.00\" \n                              {...field} \n                              data-testid={`input-crates-${index}`}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.boxes`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Boxes *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"0.01\" \n                              placeholder=\"0.00\" \n                              {...field} \n                              data-testid={`input-boxes-${index}`}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.rate`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Rate (₹) *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"0.01\" \n                              placeholder=\"0.00\" \n                              {...field} \n                              data-testid={`input-rate-${index}`}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.amount`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Amount (₹)</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              readOnly \n                              className=\"bg-muted\"\n                              data-testid={`input-amount-${index}`}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex items-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => removeItem(index)}\n                        disabled={fields.length === 1}\n                        data-testid={`button-remove-item-${index}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Expenses */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Expenses</CardTitle>\n              </CardHeader>\n              <CardContent className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"commission\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Commission (%)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          min=\"0\"\n                          max=\"100\"\n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-commission\" \n                        />\n                      </FormControl>\n                      {commissionPercentage > 0 && (\n                        <p className=\"text-sm text-muted-foreground\">\n                          = ₹{commissionAmount.toFixed(2)}\n                        </p>\n                      )}\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"labour\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Labour (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-labour\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"truckFreight\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Truck Freight (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-truck-freight\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"crateFreight\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Crate Freight (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-crate-freight\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"postExpenses\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Post Expenses (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-post-expenses\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"draftExpenses\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Draft Expenses (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-draft-expenses\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"vatav\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vatav (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-vatav\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"otherExpenses\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Other Expenses (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-other-expenses\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"advance\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Advance (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-advance\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Totals */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Calculated Totals</CardTitle>\n              </CardHeader>\n              <CardContent className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"totalExpense\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Total Expense (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          readOnly \n                          className=\"bg-muted font-semibold\"\n                          data-testid=\"input-total-expense\" \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"totalSelling\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Total Selling (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          readOnly \n                          className=\"bg-muted font-semibold\"\n                          data-testid=\"input-total-selling\" \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"totalLessExpenses\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Total Less Expenses (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          readOnly \n                          className=\"bg-muted font-semibold\"\n                          data-testid=\"input-total-less-expenses\" \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"netAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Net Amount (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          readOnly \n                          className=\"bg-primary/10 font-bold text-primary border-primary\"\n                          data-testid=\"input-net-amount\" \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createInvoiceMutation.isPending}\n                data-testid=\"button-create-invoice\"\n              >\n                {createInvoiceMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":33951},"client/src/components/forms/vendor-form.tsx":{"content":"import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\n\nconst vendorSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  contactPerson: z.string().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  gstNumber: z.string().optional(),\n  panNumber: z.string().optional(),\n  isActive: z.boolean().default(true),\n});\n\ntype VendorFormData = z.infer<typeof vendorSchema>;\n\ninterface VendorFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  vendor?: any;\n}\n\nexport default function VendorForm({ open, onOpenChange, vendor }: VendorFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!vendor;\n\n  const form = useForm<VendorFormData>({\n    resolver: zodResolver(vendorSchema),\n    defaultValues: {\n      name: vendor?.name || \"\",\n      contactPerson: vendor?.contactPerson || \"\",\n      phone: vendor?.phone || \"\",\n      address: vendor?.address || \"\",\n      gstNumber: vendor?.gstNumber || \"\",\n      panNumber: vendor?.panNumber || \"\",\n      isActive: vendor?.isActive ?? true,\n    },\n  });\n\n  // Reset form when vendor changes (for switching between create/edit modes)\n  React.useEffect(() => {\n    form.reset({\n      name: vendor?.name || \"\",\n      contactPerson: vendor?.contactPerson || \"\",\n      phone: vendor?.phone || \"\",\n      address: vendor?.address || \"\",\n      gstNumber: vendor?.gstNumber || \"\",\n      panNumber: vendor?.panNumber || \"\",\n      isActive: vendor?.isActive ?? true,\n    });\n  }, [vendor, form]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: VendorFormData) => {\n      const url = isEditing ? `/api/vendors/${vendor.id}` : \"/api/vendors\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      const response = await authenticatedApiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: isEditing ? \"Vendor updated\" : \"Vendor created\",\n        description: `Vendor has been ${isEditing ? \"updated\" : \"created\"} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vendors\"] });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : `Failed to ${isEditing ? \"update\" : \"create\"} vendor`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: VendorFormData) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Edit Vendor\" : \"Add New Vendor\"}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vendor Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter vendor name\" {...field} data-testid=\"input-vendor-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"contactPerson\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contact Person</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter contact person name\" {...field} data-testid=\"input-contact-person\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter phone number\" {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"gstNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>GST Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter GST number\" {...field} data-testid=\"input-gst-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"panNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>PAN Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter PAN number\" {...field} data-testid=\"input-pan-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Active Status</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Enable or disable this vendor\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-is-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Address</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter vendor address\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                      data-testid=\"textarea-address\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-vendor\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                data-testid=\"button-save-vendor\"\n              >\n                {mutation.isPending ? \"Saving...\" : isEditing ? \"Update Vendor\" : \"Create Vendor\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8342},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { authService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PERMISSIONS, permissionService } from \"@/lib/permissions\";\nimport { PermissionGuard } from \"@/components/ui/permission-guard\";\nimport {\n  Apple,\n  BarChart3,\n  Book,\n  Boxes,\n  CreditCard,\n  DollarSign,\n  LogOut,\n  Package,\n  Receipt,\n  Sprout,\n  Settings,\n  Store,\n  TrendingDown,\n  Truck,\n  User,\n  Users,\n  Gauge,\n} from \"lucide-react\";\n\nconst navigationItems = [\n  {\n    title: \"Dashboard\",\n    href: \"/\",\n    icon: Gauge,\n    permission: PERMISSIONS.VIEW_DASHBOARD,\n  },\n  {\n    title: \"Vendors\",\n    href: \"/vendors\",\n    icon: Truck,\n    permission: PERMISSIONS.VIEW_VENDORS,\n  },\n  {\n    title: \"Retailers\",\n    href: \"/retailers\",\n    icon: Store,\n    permission: PERMISSIONS.VIEW_VENDORS, // Using VIEW_VENDORS for now, will add specific permission later\n  },\n  {\n    title: \"Items\",\n    href: \"/items\",\n    icon: Sprout,\n    permission: PERMISSIONS.VIEW_ITEMS,\n  },\n  {\n    title: \"Stock\",\n    href: \"/stock\",\n    icon: Boxes,\n    permission: PERMISSIONS.VIEW_STOCK,\n  },\n  {\n    title: \"Purchase Invoices\",\n    href: \"/purchase-invoices\",\n    icon: DollarSign,\n    permission: PERMISSIONS.VIEW_PURCHASE_INVOICES,\n  },\n  {\n    title: \"Sales Invoices\",\n    href: \"/sales-invoices\",\n    icon: Receipt,\n    permission: PERMISSIONS.VIEW_PURCHASE_INVOICES, // Using existing permission for now\n  },\n  {\n    title: \"Expenses\",\n    href: \"/expenses\",\n    icon: TrendingDown,\n    permission: PERMISSIONS.VIEW_PAYMENTS, // Using existing permission for now\n  },\n  {\n    title: \"Crates\",\n    href: \"/crates\",\n    icon: Package,\n    permission: PERMISSIONS.VIEW_STOCK, // Using existing permission for now\n  },\n  {\n    title: \"Ledgers\",\n    href: \"/ledgers\",\n    icon: Book,\n    permission: PERMISSIONS.VIEW_LEDGERS,\n  },\n  {\n    title: \"Reports\",\n    href: \"/reports\",\n    icon: BarChart3,\n    permission: PERMISSIONS.VIEW_REPORTS,\n  },\n];\n\nconst adminItems = [\n  {\n    title: \"User Management\",\n    href: \"/users\",\n    icon: Users,\n    permission: PERMISSIONS.VIEW_USERS,\n  },\n  {\n    title: \"Settings\",\n    href: \"/settings\",\n    icon: Settings,\n    permission: PERMISSIONS.VIEW_SETTINGS,\n  },\n];\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const currentUser = authService.getCurrentUser();\n\n  const handleLogout = () => {\n    authService.logout();\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out\",\n    });\n    setLocation(\"/login\");\n  };\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border flex flex-col\">\n      {/* Logo and Brand */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Apple className=\"text-primary-foreground text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground\">\n              APMC System\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">Commission Merchant</p>\n          </div>\n        </div>\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n            <User className=\"text-secondary-foreground text-sm\" />\n          </div>\n          <div>\n            <p className=\"text-sm font-medium\">{currentUser?.name}</p>\n            <p className=\"text-xs text-muted-foreground\">{permissionService.getRoleInfo().label}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <div className=\"space-y-2\">\n          {navigationItems.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <PermissionGuard key={item.href} permission={item.permission}>\n                <Link href={item.href}>\n                  <a\n                    className={cn(\n                      \"flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                      isActive\n                        ? \"bg-accent text-accent-foreground\"\n                        : \"text-muted-foreground hover:text-foreground hover:bg-accent\",\n                    )}\n                    data-testid={`link-${item.href.replace(\"/\", \"\") || \"dashboard\"}`}\n                  >\n                    <item.icon className=\"w-5 h-5 mr-3\" />\n                    {item.title}\n                  </a>\n                </Link>\n              </PermissionGuard>\n            );\n          })}\n        </div>\n\n        <div className=\"mt-8 pt-4 border-t border-border\">\n          <div className=\"space-y-2\">\n            {adminItems.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <PermissionGuard key={item.href} permission={item.permission}>\n                  <Link href={item.href}>\n                    <a\n                      className={cn(\n                        \"flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                        isActive\n                          ? \"bg-accent text-accent-foreground\"\n                          : \"text-muted-foreground hover:text-foreground hover:bg-accent\",\n                      )}\n                      data-testid={`link-${item.href.replace(\"/\", \"\")}`}\n                    >\n                      <item.icon className=\"w-5 h-5 mr-3\" />\n                      {item.title}\n                    </a>\n                  </Link>\n                </PermissionGuard>\n              );\n            })}\n          </div>\n        </div>\n      </nav>\n\n      {/* Logout */}\n      <div className=\"p-4 border-t border-border\">\n        <button\n          onClick={handleLogout}\n          className=\"flex items-center px-3 py-2 text-sm font-medium text-muted-foreground hover:text-destructive w-full rounded-md transition-colors\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-5 h-5 mr-3\" />\n          Logout\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6352},"client/src/components/modals/invoice-details-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { format } from \"date-fns\";\nimport { CreditCard, FileText, User, Package } from \"lucide-react\";\nimport PaymentForm from \"@/components/forms/payment-form\";\n\ninterface InvoiceDetailsModalProps {\n  invoice: any;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function InvoiceDetailsModal({ invoice, open, onOpenChange }: InvoiceDetailsModalProps) {\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n\n  const { data: payments } = useQuery<any[]>({\n    queryKey: [\"/api/payments/invoice\", invoice?.id],\n    enabled: !!invoice?.id,\n  });\n\n  if (!invoice) return null;\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Paid\":\n        return \"bg-chart-2/10 text-chart-2\";\n      case \"Pending\":\n      case \"Unpaid\":\n        return \"bg-chart-1/10 text-chart-1\";\n      case \"Partially Paid\":\n        return \"bg-chart-4/10 text-chart-4\";\n      default:\n        return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getPaymentModeColor = (mode: string) => {\n    switch (mode) {\n      case \"Cash\":\n        return \"bg-chart-2/10 text-chart-2\";\n      case \"Bank\":\n        return \"bg-chart-3/10 text-chart-3\";\n      case \"UPI\":\n        return \"bg-chart-4/10 text-chart-4\";\n      case \"Cheque\":\n        return \"bg-chart-1/10 text-chart-1\";\n      default:\n        return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <FileText className=\"h-5 w-5\" />\n              <span>Invoice Details - {invoice.invoiceNumber}</span>\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Invoice Header */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <User className=\"h-5 w-5\" />\n                    <span>Invoice Information</span>\n                  </CardTitle>\n                  <Badge className={getStatusColor(invoice.status)} variant=\"secondary\">\n                    {invoice.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground mb-2\">Vendor Details</h4>\n                    <p className=\"text-sm text-muted-foreground\">Name: {invoice.vendor.name}</p>\n                    {invoice.vendor.contactPerson && (\n                      <p className=\"text-sm text-muted-foreground\">Contact: {invoice.vendor.contactPerson}</p>\n                    )}\n                    {invoice.vendor.phone && (\n                      <p className=\"text-sm text-muted-foreground\">Phone: {invoice.vendor.phone}</p>\n                    )}\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-foreground mb-2\">Invoice Details</h4>\n                    <p className=\"text-sm text-muted-foreground\">Date: {format(new Date(invoice.invoiceDate), \"PPP\")}</p>\n                    <p className=\"text-sm text-muted-foreground\">Total Items: {invoice.items?.length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Invoice Items */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Package className=\"h-5 w-5\" />\n                  <span>Invoice Items</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {invoice.items && invoice.items.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Item</TableHead>\n                        <TableHead>Weight</TableHead>\n                        <TableHead>Rate (₹)</TableHead>\n                        <TableHead>Amount (₹)</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {invoice.items.map((item: any, index: number) => (\n                        <TableRow key={index}>\n                          <TableCell className=\"font-medium\">{item.item}</TableCell>\n                          <TableCell>{parseFloat(item.weight).toFixed(2)}</TableCell>\n                          <TableCell>₹{parseFloat(item.rate).toFixed(2)}</TableCell>\n                          <TableCell>₹{parseFloat(item.amount).toLocaleString('en-IN')}</TableCell>\n                        </TableRow>\n                      ))}\n                      <TableRow className=\"border-t-2\">\n                        <TableCell colSpan={3} className=\"font-semibold\">Total Selling:</TableCell>\n                        <TableCell className=\"font-semibold\">₹{parseFloat(invoice.totalSelling).toLocaleString('en-IN')}</TableCell>\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">No items found for this invoice</p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Expense Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Expense Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Commission:</span>\n                      <span>₹{parseFloat(invoice.commission).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Labour:</span>\n                      <span>₹{parseFloat(invoice.labour).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Truck Freight:</span>\n                      <span>₹{parseFloat(invoice.truckFreight).toFixed(2)}</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Crate Freight:</span>\n                      <span>₹{parseFloat(invoice.crateFreight).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Post Expenses:</span>\n                      <span>₹{parseFloat(invoice.postExpenses).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Draft Expenses:</span>\n                      <span>₹{parseFloat(invoice.draftExpenses).toFixed(2)}</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Vatav:</span>\n                      <span>₹{parseFloat(invoice.vatav).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Other Expenses:</span>\n                      <span>₹{parseFloat(invoice.otherExpenses).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Advance:</span>\n                      <span>₹{parseFloat(invoice.advance).toFixed(2)}</span>\n                    </div>\n                  </div>\n                </div>\n                <Separator className=\"my-4\" />\n                <div className=\"flex justify-between font-semibold text-lg\">\n                  <span>Total Expense:</span>\n                  <span>₹{parseFloat(invoice.totalExpense).toFixed(2)}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Financial Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Financial Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Selling</p>\n                    <p className=\"text-lg font-bold text-foreground\">₹{parseFloat(invoice.totalSelling).toLocaleString('en-IN')}</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Expenses</p>\n                    <p className=\"text-lg font-bold text-chart-1\">₹{parseFloat(invoice.totalExpense).toLocaleString('en-IN')}</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Less Expenses</p>\n                    <p className=\"text-lg font-bold text-foreground\">₹{parseFloat(invoice.totalLessExpenses).toLocaleString('en-IN')}</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-primary/10 rounded-lg border border-primary/20\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Net Amount</p>\n                    <p className=\"text-xl font-bold text-primary\">₹{parseFloat(invoice.netAmount).toLocaleString('en-IN')}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Summary */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Payment Summary</CardTitle>\n                  {invoice.status !== \"Paid\" && (\n                    <Button \n                      onClick={() => setShowPaymentForm(true)}\n                      className=\"flex items-center space-x-2\"\n                      data-testid=\"button-add-payment\"\n                    >\n                      <CreditCard className=\"h-4 w-4\" />\n                      <span>Add Payment</span>\n                    </Button>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Amount</p>\n                    <p className=\"text-lg font-bold text-foreground\">₹{parseFloat(invoice.netAmount).toLocaleString('en-IN')}</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-chart-2/10 rounded-lg\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Paid Amount</p>\n                    <p className=\"text-lg font-bold text-chart-2\">₹{parseFloat(invoice.paidAmount).toLocaleString('en-IN')}</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-chart-1/10 rounded-lg\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Balance Amount</p>\n                    <p className=\"text-lg font-bold text-chart-1\">₹{parseFloat(invoice.balanceAmount).toLocaleString('en-IN')}</p>\n                  </div>\n                </div>\n\n                {/* Payment History */}\n                {payments && payments.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-foreground mb-3\">Payment History</h4>\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Date</TableHead>\n                          <TableHead>Amount</TableHead>\n                          <TableHead>Mode</TableHead>\n                          <TableHead>Reference</TableHead>\n                          <TableHead>Notes</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {payments.map((payment: any) => (\n                          <TableRow key={payment.id}>\n                            <TableCell>{format(new Date(payment.paymentDate), \"MMM dd, yyyy\")}</TableCell>\n                            <TableCell className=\"font-medium\">₹{parseFloat(payment.amount).toLocaleString('en-IN')}</TableCell>\n                            <TableCell>\n                              <Badge className={getPaymentModeColor(payment.paymentMode)} variant=\"secondary\">\n                                {payment.paymentMode}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-sm text-muted-foreground\">\n                              {payment.chequeNumber && `Cheque: ${payment.chequeNumber}`}\n                              {payment.upiReference && `UPI: ${payment.upiReference}`}\n                              {payment.bankAccount?.name && `Bank: ${payment.bankAccount.name}`}\n                            </TableCell>\n                            <TableCell className=\"text-sm text-muted-foreground\">\n                              {payment.notes || \"-\"}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <PaymentForm\n        open={showPaymentForm}\n        onOpenChange={setShowPaymentForm}\n        preSelectedInvoiceId={invoice?.id}\n      />\n    </>\n  );\n}","size_bytes":14654},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> & {\n    indeterminate?: boolean;\n  }\n>(({ className, indeterminate, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      indeterminate && \"bg-primary text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      {indeterminate ? (\n        <div className=\"h-2 w-2 bg-current rounded-sm\" />\n      ) : (\n        <Check className=\"h-4 w-4\" />\n      )}\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1275},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/forms/item-form.tsx":{"content":"import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\n\nconst itemSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  quality: z.string().min(1, \"Quality is required\"),\n  unit: z.enum([\"box\", \"crate\", \"kgs\"], {\n    required_error: \"Unit is required\",\n    invalid_type_error: \"Unit must be box, crate, or kgs\"\n  }),\n  vendorId: z.string().min(1, \"Vendor is required\"),\n  isActive: z.boolean().default(true),\n});\n\ntype ItemFormData = z.infer<typeof itemSchema>;\n\ninterface ItemFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  item?: any;\n}\n\nexport default function ItemForm({ open, onOpenChange, item }: ItemFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!item;\n\n  const form = useForm<ItemFormData>({\n    resolver: zodResolver(itemSchema),\n    defaultValues: {\n      name: item?.name || \"\",\n      quality: item?.quality || \"\",\n      unit: item?.unit || \"crate\",\n      vendorId: item?.vendorId || \"\",\n      isActive: item?.isActive ?? true,\n    },\n  });\n\n  // Reset form when item changes (for switching between create/edit modes)\n  React.useEffect(() => {\n    form.reset({\n      name: item?.name || \"\",\n      quality: item?.quality || \"\",\n      unit: item?.unit || \"crate\",\n      vendorId: item?.vendorId || \"\",\n      isActive: item?.isActive ?? true,\n    });\n  }, [item, form]);\n\n  const { data: vendors } = useQuery<any[]>({\n    queryKey: [\"/api/vendors\"],\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: ItemFormData) => {\n      const url = isEditing ? `/api/items/${item.id}` : \"/api/items\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      const response = await authenticatedApiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: isEditing ? \"Item updated\" : \"Item created\",\n        description: `Item has been ${isEditing ? \"updated\" : \"created\"} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : `Failed to ${isEditing ? \"update\" : \"create\"} item`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ItemFormData) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Edit Item\" : \"Add New Item\"}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Item Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter item name\" {...field} data-testid=\"input-item-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"quality\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quality *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter quality grade\" {...field} data-testid=\"input-quality\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"unit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Unit *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-item-unit\">\n                          <SelectValue placeholder=\"Select unit\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"box\">Box</SelectItem>\n                        <SelectItem value=\"crate\">Crate</SelectItem>\n                        <SelectItem value=\"kgs\">Kgs</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"vendorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vendor *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-item-vendor\">\n                          <SelectValue placeholder=\"Select vendor\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {vendors?.map((vendor: any) => (\n                          <SelectItem key={vendor.id} value={vendor.id}>\n                            {vendor.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Active Status</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Enable or disable this item\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-item-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-item\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                data-testid=\"button-save-item\"\n              >\n                {mutation.isPending ? \"Saving...\" : isEditing ? \"Update Item\" : \"Create Item\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8144},"client/src/components/ui/permission-guard.tsx":{"content":"import { ReactNode } from 'react';\nimport { permissionService, ROLE_PERMISSIONS } from '@/lib/permissions';\n\ninterface PermissionGuardProps {\n  permission?: string;\n  permissions?: string[];\n  requireAll?: boolean;\n  fallback?: ReactNode;\n  children: ReactNode;\n}\n\n/**\n * Permission Guard Component\n * Conditionally renders children based on user permissions\n */\nexport function PermissionGuard({ \n  permission, \n  permissions = [], \n  requireAll = false, \n  fallback = null, \n  children \n}: PermissionGuardProps) {\n  let hasAccess = false;\n\n  if (permission) {\n    hasAccess = permissionService.hasPermission(permission);\n  } else if (permissions.length > 0) {\n    hasAccess = requireAll \n      ? permissionService.hasAllPermissions(permissions)\n      : permissionService.hasAnyPermission(permissions);\n  } else {\n    // If no permissions specified, allow access\n    hasAccess = true;\n  }\n\n  return hasAccess ? <>{children}</> : <>{fallback}</>;\n}\n\ninterface RoleGuardProps {\n  roles: string[];\n  fallback?: ReactNode;\n  children: ReactNode;\n}\n\n/**\n * Role Guard Component\n * Conditionally renders children based on user role\n */\nexport function RoleGuard({ roles, fallback = null, children }: RoleGuardProps) {\n  const hasAccess = permissionService.hasAnyPermission(\n    roles.flatMap(role => {\n      const roleKey = role as keyof typeof ROLE_PERMISSIONS;\n      return ROLE_PERMISSIONS[roleKey] || [];\n    })\n  );\n\n  return hasAccess ? <>{children}</> : <>{fallback}</>;\n}","size_bytes":1474},"client/src/lib/permissions.ts":{"content":"import { authService } from \"./auth\";\nimport { PERMISSIONS, ROLE_PERMISSIONS } from \"@shared/permissions\";\n\n// Re-export for compatibility\nexport { PERMISSIONS, ROLE_PERMISSIONS };\n\n// Permission checking utilities\nexport const permissionService = {\n  /**\n   * Check if current user has a specific permission\n   */\n  hasPermission(permission: string): boolean {\n    const user = authService.getCurrentUser();\n    if (!user) return false;\n    \n    // Check individual user permissions first, fallback to role permissions\n    const userPermissions = (user as any).permissions || ROLE_PERMISSIONS[user.role as keyof typeof ROLE_PERMISSIONS];\n    return userPermissions ? userPermissions.includes(permission as any) : false;\n  },\n\n  /**\n   * Check if current user has any of the specified permissions\n   */\n  hasAnyPermission(permissions: string[]): boolean {\n    return permissions.some(permission => this.hasPermission(permission));\n  },\n\n  /**\n   * Check if current user has all specified permissions\n   */\n  hasAllPermissions(permissions: string[]): boolean {\n    return permissions.every(permission => this.hasPermission(permission));\n  },\n\n  /**\n   * Get all permissions for current user\n   */\n  getUserPermissions(): string[] {\n    const user = authService.getCurrentUser();\n    if (!user) return [];\n    \n    return (user as any).permissions || ROLE_PERMISSIONS[user.role as keyof typeof ROLE_PERMISSIONS] || [];\n  },\n\n  /**\n   * Check if user can access a specific route/page\n   */\n  canAccessRoute(route: string): boolean {\n    const routePermissions: Record<string, string[]> = {\n      '/users': [PERMISSIONS.VIEW_USERS, PERMISSIONS.MANAGE_USERS],\n      '/vendors': [PERMISSIONS.VIEW_VENDORS],\n      '/items': [PERMISSIONS.VIEW_ITEMS],\n      '/purchase-invoices': [PERMISSIONS.VIEW_PURCHASE_INVOICES],\n      '/payments': [PERMISSIONS.VIEW_PAYMENTS],\n      '/stock': [PERMISSIONS.VIEW_STOCK],\n      '/ledgers': [PERMISSIONS.VIEW_LEDGERS],\n      '/reports': [PERMISSIONS.VIEW_REPORTS],\n      '/settings': [PERMISSIONS.VIEW_SETTINGS],\n    };\n\n    const requiredPermissions = routePermissions[route];\n    if (!requiredPermissions) return true; // If no specific permissions required, allow access\n    \n    return this.hasAnyPermission(requiredPermissions);\n  },\n\n  /**\n   * Get user role display information\n   */\n  getRoleInfo(): { role: string; label: string; color: string } {\n    const user = authService.getCurrentUser();\n    if (!user) return { role: '', label: 'Unknown', color: 'gray' };\n\n    const roleInfo: Record<string, { label: string; color: string }> = {\n      Admin: { label: 'Administrator', color: 'red' },\n      Operator: { label: 'Operator', color: 'blue' },\n      Accountant: { label: 'Accountant', color: 'green' },\n    };\n\n    return {\n      role: user.role,\n      label: roleInfo[user.role]?.label || user.role,\n      color: roleInfo[user.role]?.color || 'gray',\n    };\n  },\n};\n\n// React hook for permissions (can be used in components)\nexport const usePermissions = () => {\n  return {\n    hasPermission: permissionService.hasPermission,\n    hasAnyPermission: permissionService.hasAnyPermission,\n    hasAllPermissions: permissionService.hasAllPermissions,\n    getUserPermissions: permissionService.getUserPermissions,\n    canAccessRoute: permissionService.canAccessRoute,\n    getRoleInfo: permissionService.getRoleInfo,\n  };\n};","size_bytes":3354},"client/src/pages/items.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Search, Plus, Edit, Trash2 } from \"lucide-react\";\nimport ItemForm from \"@/components/forms/item-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\n\nexport default function Items() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedVendor, setSelectedVendor] = useState(\"all\");\n  const [showForm, setShowForm] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: items, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/items\"],\n  });\n\n  const { data: vendors } = useQuery<any[]>({\n    queryKey: [\"/api/vendors\"],\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await authenticatedApiRequest(\"DELETE\", `/api/items/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Item deleted\",\n        description: \"Item has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredItems = items?.filter((item: any) => {\n    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.quality.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesVendor = selectedVendor === \"all\" || item.vendorId === selectedVendor;\n    return matchesSearch && matchesVendor;\n  }) || [];\n\n  const handleEdit = (item: any) => {\n    setEditingItem(item);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (confirm(\"Are you sure you want to delete this item?\")) {\n      deleteItemMutation.mutate(id);\n    }\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingItem(null);\n  };\n\n  const getVendorName = (vendorId: string) => {\n    const vendor = vendors?.find((v: any) => v.id === vendorId);\n    return vendor?.name || \"Unknown\";\n  };\n\n  // Define table columns\n  const columns = [\n    {\n      accessorKey: \"name\",\n      header: \"Name\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"quality\",\n      header: \"Quality\",\n      cell: (value: string) => value,\n    },\n    {\n      accessorKey: \"unit\",\n      header: \"Unit\",\n      cell: (value: string) => (\n        <Badge variant=\"outline\">\n          {value?.charAt(0).toUpperCase() + value?.slice(1) || \"N/A\"}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"vendorId\",\n      header: \"Vendor\",\n      cell: (value: string) => getVendorName(value),\n    },\n    {\n      accessorKey: \"isActive\",\n      header: \"Status\",\n      cell: (value: boolean) => (\n        <Badge variant={value ? \"default\" : \"secondary\"}>\n          {value ? \"Active\" : \"Inactive\"}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Actions\",\n      cell: (value: string, row: any) => (\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEdit(row)}\n            data-testid={`button-edit-${value}`}\n            title=\"Edit Item\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleDelete(value)}\n            data-testid={`button-delete-${value}`}\n            title=\"Delete Item\"\n            disabled={deleteItemMutation.isPending}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Items</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage item types, qualities, and details\n              </p>\n            </div>\n            <Button onClick={() => setShowForm(true)} data-testid=\"button-add-item\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Item\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>All Items</CardTitle>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={selectedVendor} onValueChange={setSelectedVendor}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-vendor-filter\">\n                      <SelectValue placeholder=\"Filter by vendor\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Vendors</SelectItem>\n                      {vendors?.map((vendor: any) => (\n                        <SelectItem key={vendor.id} value={vendor.id}>\n                          {vendor.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search items...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                      data-testid=\"input-search-items\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                data={filteredItems}\n                columns={columns}\n                searchTerm={searchTerm}\n                searchFields={[\"name\", \"quality\"]}\n                isLoading={isLoading}\n                enableRowSelection={true}\n                rowKey=\"id\"\n              />\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      <ItemForm\n        open={showForm}\n        onOpenChange={handleCloseForm}\n        item={editingItem}\n      />\n    </div>\n  );\n}","size_bytes":7180},"shared/permissions.ts":{"content":"// Define all available permissions in the system\nexport const PERMISSIONS = {\n  // User Management\n  MANAGE_USERS: 'manage_users',\n  VIEW_USERS: 'view_users',\n  \n  // Vendor Management\n  MANAGE_VENDORS: 'manage_vendors',\n  VIEW_VENDORS: 'view_vendors',\n  DELETE_VENDORS: 'delete_vendors',\n  \n  // Item Management\n  MANAGE_ITEMS: 'manage_items',\n  VIEW_ITEMS: 'view_items',\n  DELETE_ITEMS: 'delete_items',\n  \n  // Purchase Invoices\n  CREATE_PURCHASE_INVOICES: 'create_purchase_invoices',\n  VIEW_PURCHASE_INVOICES: 'view_purchase_invoices',\n  EDIT_PURCHASE_INVOICES: 'edit_purchase_invoices',\n  DELETE_PURCHASE_INVOICES: 'delete_purchase_invoices',\n  \n  // Payments\n  CREATE_PAYMENTS: 'create_payments',\n  VIEW_PAYMENTS: 'view_payments',\n  EDIT_PAYMENTS: 'edit_payments',\n  DELETE_PAYMENTS: 'delete_payments',\n  \n  // Stock Management\n  MANAGE_STOCK: 'manage_stock',\n  VIEW_STOCK: 'view_stock',\n  \n  // Financial Reports & Ledgers\n  VIEW_LEDGERS: 'view_ledgers',\n  VIEW_REPORTS: 'view_reports',\n  VIEW_CASHBOOK: 'view_cashbook',\n  VIEW_BANKBOOK: 'view_bankbook',\n  \n  // Bank Accounts\n  MANAGE_BANK_ACCOUNTS: 'manage_bank_accounts',\n  VIEW_BANK_ACCOUNTS: 'view_bank_accounts',\n  \n  // System Settings\n  MANAGE_SETTINGS: 'manage_settings',\n  VIEW_SETTINGS: 'view_settings',\n  \n  // Dashboard & Analytics\n  VIEW_DASHBOARD: 'view_dashboard',\n  VIEW_ANALYTICS: 'view_analytics',\n} as const;\n\n// Define permissions for each role\nexport const ROLE_PERMISSIONS = {\n  Admin: [\n    // Full system access\n    PERMISSIONS.MANAGE_USERS,\n    PERMISSIONS.VIEW_USERS,\n    PERMISSIONS.MANAGE_VENDORS,\n    PERMISSIONS.VIEW_VENDORS,\n    PERMISSIONS.DELETE_VENDORS,\n    PERMISSIONS.MANAGE_ITEMS,\n    PERMISSIONS.VIEW_ITEMS,\n    PERMISSIONS.DELETE_ITEMS,\n    PERMISSIONS.CREATE_PURCHASE_INVOICES,\n    PERMISSIONS.VIEW_PURCHASE_INVOICES,\n    PERMISSIONS.EDIT_PURCHASE_INVOICES,\n    PERMISSIONS.DELETE_PURCHASE_INVOICES,\n    PERMISSIONS.CREATE_PAYMENTS,\n    PERMISSIONS.VIEW_PAYMENTS,\n    PERMISSIONS.EDIT_PAYMENTS,\n    PERMISSIONS.DELETE_PAYMENTS,\n    PERMISSIONS.MANAGE_STOCK,\n    PERMISSIONS.VIEW_STOCK,\n    PERMISSIONS.VIEW_LEDGERS,\n    PERMISSIONS.VIEW_REPORTS,\n    PERMISSIONS.VIEW_CASHBOOK,\n    PERMISSIONS.VIEW_BANKBOOK,\n    PERMISSIONS.MANAGE_BANK_ACCOUNTS,\n    PERMISSIONS.VIEW_BANK_ACCOUNTS,\n    PERMISSIONS.MANAGE_SETTINGS,\n    PERMISSIONS.VIEW_SETTINGS,\n    PERMISSIONS.VIEW_DASHBOARD,\n    PERMISSIONS.VIEW_ANALYTICS,\n  ],\n  \n  Operator: [\n    // Operations focused permissions\n    PERMISSIONS.VIEW_VENDORS,\n    PERMISSIONS.MANAGE_VENDORS, // Can add/edit vendors\n    PERMISSIONS.VIEW_ITEMS,\n    PERMISSIONS.MANAGE_ITEMS, // Can add/edit items\n    PERMISSIONS.CREATE_PURCHASE_INVOICES,\n    PERMISSIONS.VIEW_PURCHASE_INVOICES,\n    PERMISSIONS.EDIT_PURCHASE_INVOICES,\n    PERMISSIONS.CREATE_PAYMENTS,\n    PERMISSIONS.VIEW_PAYMENTS,\n    PERMISSIONS.MANAGE_STOCK,\n    PERMISSIONS.VIEW_STOCK,\n    PERMISSIONS.VIEW_LEDGERS,\n    PERMISSIONS.VIEW_BANK_ACCOUNTS,\n    PERMISSIONS.VIEW_DASHBOARD,\n  ],\n  \n  Accountant: [\n    // Finance focused permissions\n    PERMISSIONS.VIEW_VENDORS,\n    PERMISSIONS.VIEW_ITEMS,\n    PERMISSIONS.VIEW_PURCHASE_INVOICES,\n    PERMISSIONS.CREATE_PAYMENTS,\n    PERMISSIONS.VIEW_PAYMENTS,\n    PERMISSIONS.EDIT_PAYMENTS,\n    PERMISSIONS.VIEW_STOCK,\n    PERMISSIONS.VIEW_LEDGERS,\n    PERMISSIONS.VIEW_REPORTS,\n    PERMISSIONS.VIEW_CASHBOOK,\n    PERMISSIONS.VIEW_BANKBOOK,\n    PERMISSIONS.VIEW_BANK_ACCOUNTS,\n    PERMISSIONS.VIEW_DASHBOARD,\n    PERMISSIONS.VIEW_ANALYTICS,\n  ],\n} as const;","size_bytes":3494},"client/src/pages/retailers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, Users, TrendingUp, IndianRupee, Package } from \"lucide-react\";\n\nconst retailerSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  contactPerson: z.string().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  gstNumber: z.string().optional(),\n  panNumber: z.string().optional(),\n});\n\ntype RetailerFormData = z.infer<typeof retailerSchema>;\n\nexport default function RetailerManagement() {\n  const [open, setOpen] = useState(false);\n  const [editingRetailer, setEditingRetailer] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<RetailerFormData>({\n    resolver: zodResolver(retailerSchema),\n    defaultValues: {\n      name: \"\",\n      contactPerson: \"\",\n      phone: \"\",\n      address: \"\",\n      gstNumber: \"\",\n      panNumber: \"\",\n    },\n  });\n\n  const { data: retailers = [], isLoading } = useQuery({\n    queryKey: [\"/api/retailers\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/retailers\");\n      return response.json();\n    },\n  });\n\n  const createRetailerMutation = useMutation({\n    mutationFn: async (data: RetailerFormData) => {\n      const response = await authenticatedApiRequest(\"POST\", \"/api/retailers\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Retailer created\",\n        description: \"New retailer has been created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/retailers\"] });\n      setOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create retailer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRetailerMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<RetailerFormData> }) => {\n      const response = await authenticatedApiRequest(\"PUT\", `/api/retailers/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Retailer updated\",\n        description: \"Retailer has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/retailers\"] });\n      setOpen(false);\n      setEditingRetailer(null);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update retailer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteRetailerMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await authenticatedApiRequest(\"DELETE\", `/api/retailers/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Retailer deleted\",\n        description: \"Retailer has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/retailers\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete retailer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (retailer: any) => {\n    setEditingRetailer(retailer);\n    form.reset({\n      name: retailer.name,\n      contactPerson: retailer.contactPerson || \"\",\n      phone: retailer.phone || \"\",\n      address: retailer.address || \"\",\n      gstNumber: retailer.gstNumber || \"\",\n      panNumber: retailer.panNumber || \"\",\n    });\n    setOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this retailer?\")) {\n      deleteRetailerMutation.mutate(id);\n    }\n  };\n\n  const onSubmit = (data: RetailerFormData) => {\n    if (editingRetailer) {\n      updateRetailerMutation.mutate({ id: editingRetailer.id, data });\n    } else {\n      createRetailerMutation.mutate(data);\n    }\n  };\n\n  const handleCreateNew = () => {\n    setEditingRetailer(null);\n    form.reset();\n    setOpen(true);\n  };\n\n  const filteredRetailers = retailers.filter((retailer: any) =>\n    retailer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (retailer.contactPerson && retailer.contactPerson.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (retailer.phone && retailer.phone.includes(searchTerm))\n  );\n\n  // Calculate summary stats\n  const totalRetailers = retailers.length;\n  const totalUdhaar = retailers.reduce((sum: number, retailer: any) => \n    sum + parseFloat(retailer.udhaaarBalance || \"0\"), 0\n  );\n  const totalShortfall = retailers.reduce((sum: number, retailer: any) => \n    sum + parseFloat(retailer.shortfallBalance || \"0\"), 0\n  );\n  const totalCrates = retailers.reduce((sum: number, retailer: any) => \n    sum + (retailer.crateBalance || 0), 0\n  );\n\n  // Define table columns\n  const columns = [\n    {\n      accessorKey: \"name\",\n      header: \"Name\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"contactPerson\",\n      header: \"Contact Person\",\n      cell: (value: string) => value || \"-\",\n    },\n    {\n      accessorKey: \"phone\",\n      header: \"Phone\",\n      cell: (value: string) => value || \"-\",\n    },\n    {\n      accessorKey: \"address\",\n      header: \"Address\",\n      cell: (value: string) => value || \"-\",\n    },\n    {\n      accessorKey: \"udhaaarBalance\",\n      header: \"Udhaar Balance\",\n      cell: (value: string) => (\n        <span className={parseFloat(value || \"0\") > 0 ? \"text-orange-600 font-medium\" : \"\"}>\n          ₹{parseFloat(value || \"0\").toLocaleString(\"en-IN\")}\n        </span>\n      ),\n    },\n    {\n      accessorKey: \"shortfallBalance\",\n      header: \"Shortfall Balance\",\n      cell: (value: string) => (\n        <span className={parseFloat(value || \"0\") > 0 ? \"text-red-600 font-medium\" : \"\"}>\n          ₹{parseFloat(value || \"0\").toLocaleString(\"en-IN\")}\n        </span>\n      ),\n    },\n    {\n      accessorKey: \"crateBalance\",\n      header: \"Crates\",\n      cell: (value: number) => (\n        <Badge variant=\"secondary\">{value || 0}</Badge>\n      ),\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Actions\",\n      cell: (value: string, row: any) => (\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEdit(row)}\n            data-testid={`button-edit-${value}`}\n            title=\"Edit Retailer\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleDelete(value)}\n            data-testid={`button-delete-${value}`}\n            title=\"Delete Retailer\"\n            disabled={deleteRetailerMutation.isPending}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Retailer Management</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage your retail customers and track their balances\n              </p>\n            </div>\n            <Button onClick={handleCreateNew} data-testid=\"button-add-retailer\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Retailer\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-8\">\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Retailers</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{totalRetailers}</div>\n                <p className=\"text-xs text-muted-foreground\">Active retailers</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Udhaar</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  ₹{totalUdhaar.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Credit balance</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Shortfall</CardTitle>\n                <IndianRupee className=\"h-4 w-4 text-red-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  ₹{totalShortfall.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Deficit balance</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Crates</CardTitle>\n                <Package className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\">{totalCrates}</div>\n                <p className=\"text-xs text-muted-foreground\">With retailers</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Retailers Table */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Retailers</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    placeholder=\"Search retailers...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-64\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                data={filteredRetailers}\n                columns={columns}\n                searchTerm={searchTerm}\n                searchFields={[\"name\", \"contactPerson\", \"phone\"]}\n                isLoading={isLoading}\n                enableRowSelection={true}\n                rowKey=\"id\"\n              />\n            </CardContent>\n          </Card>\n          </div>\n        </main>\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingRetailer ? \"Edit Retailer\" : \"Add New Retailer\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter retailer name\" {...field} data-testid=\"input-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"contactPerson\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contact Person</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter contact person\" {...field} data-testid=\"input-contact\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter phone number\" {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter address\" {...field} data-testid=\"input-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"gstNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>GST Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"GST number\" {...field} data-testid=\"input-gst\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"panNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>PAN Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"PAN number\" {...field} data-testid=\"input-pan\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createRetailerMutation.isPending || updateRetailerMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createRetailerMutation.isPending || updateRetailerMutation.isPending\n                    ? \"Saving...\" \n                    : editingRetailer \n                    ? \"Update Retailer\" \n                    : \"Create Retailer\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":17135},"client/src/pages/sales-invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, FileText, IndianRupee, Users, TrendingUp, Minus, DollarSign, Eye, History, CheckCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst salesInvoiceSchema = z.object({\n  retailerId: z.string().min(1, \"Retailer is required\"),\n  invoiceNumber: z.string().optional(),\n  invoiceDate: z.string().min(1, \"Invoice date is required\"),\n  totalAmount: z.number().min(0, \"Total amount must be positive\"),\n  paidAmount: z.number().min(0, \"Paid amount cannot be negative\"),\n  balanceAmount: z.number().min(0, \"Balance amount cannot be negative\"),\n  status: z.enum([\"Pending\", \"Partial\", \"Paid\"]),\n  notes: z.string().optional(),\n});\n\nconst salesInvoiceItemSchema = z.object({\n  itemId: z.string().min(1, \"Item is required\"),\n  weight: z.number().min(0.1, \"Weight must be positive\"),\n  crates: z.number().min(0.1, \"Crates must be positive\"),\n  boxes: z.number().min(0.1, \"Boxes must be positive\"),\n  rate: z.number().min(0.01, \"Rate must be positive\"),\n  amount: z.number().min(0, \"Amount must be positive\"),\n});\n\nconst invoiceFormSchema = z.object({\n  invoice: salesInvoiceSchema,\n  items: z.array(salesInvoiceItemSchema).min(1, \"At least one item is required\"),\n});\n\ntype InvoiceFormData = z.infer<typeof invoiceFormSchema>;\n\nconst paymentSchema = z.object({\n  invoiceId: z.string().min(1, \"Sales invoice is required\"),\n  retailerId: z.string().min(1, \"Retailer is required\"),\n  amount: z.number().min(0.01, \"Amount must be greater than 0\"),\n  paymentDate: z.string().min(1, \"Payment date is required\"),\n  paymentMode: z.enum([\"Cash\", \"Bank\", \"UPI\", \"Cheque\"]),\n  bankAccountId: z.string().optional(),\n  transactionReference: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\nexport default function SalesInvoiceManagement() {\n  const [open, setOpen] = useState(false);\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [paymentHistoryDialogOpen, setPaymentHistoryDialogOpen] = useState(false);\n  const [editingInvoice, setEditingInvoice] = useState<any>(null);\n  const [selectedInvoice, setSelectedInvoice] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceFormSchema),\n    defaultValues: {\n      invoice: {\n        retailerId: \"\",\n        invoiceNumber: \"\",\n        invoiceDate: format(new Date(), \"yyyy-MM-dd\"),\n        totalAmount: 0,\n        paidAmount: 0,\n        balanceAmount: 0,\n        status: \"Pending\",\n        notes: \"\",\n      },\n      items: [\n        {\n          itemId: \"\",\n          weight: 0,\n          crates: 0,\n          boxes: 0,\n          rate: 0,\n          amount: 0,\n        },\n      ],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const paymentForm = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      invoiceId: \"\",\n      retailerId: \"\",\n      amount: 0,\n      paymentDate: format(new Date(), \"yyyy-MM-dd\"),\n      paymentMode: \"Cash\",\n      bankAccountId: \"\",\n      transactionReference: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Fetch data\n  const { data: invoices = [], isLoading } = useQuery({\n    queryKey: [\"/api/sales-invoices\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/sales-invoices\");\n      return response.json();\n    },\n  });\n\n  const { data: retailers = [] } = useQuery({\n    queryKey: [\"/api/retailers\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/retailers\");\n      return response.json();\n    },\n  });\n\n  const { data: salesPayments = [] } = useQuery({\n    queryKey: [\"/api/sales-payments\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/sales-payments\");\n      return response.json();\n    },\n  });\n\n  const { data: bankAccounts = [] } = useQuery({\n    queryKey: [\"/api/bank-accounts\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/bank-accounts\");\n      return response.json();\n    },\n  });\n\n  const { data: items = [] } = useQuery({\n    queryKey: [\"/api/items\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/items\");\n      return response.json();\n    },\n  });\n\n  const { data: stock = [] } = useQuery({\n    queryKey: [\"/api/stock\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/stock\");\n      return response.json();\n    },\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async (data: PaymentFormData) => {\n      const paymentData = {\n        ...data,\n        amount: data.amount.toFixed(2), // Convert number to string for backend\n        bankAccountId: data.bankAccountId || null,\n      };\n      const response = await authenticatedApiRequest(\"POST\", \"/api/sales-payments\", paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment recorded\",\n        description: \"Sales payment has been recorded successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-payments\"] });\n      setPaymentDialogOpen(false);\n      paymentForm.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await authenticatedApiRequest(\"POST\", \"/api/sales-invoices\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sales invoice created\",\n        description: \"New sales invoice has been created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock\"] });\n      setOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create sales invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAsPaidMutation = useMutation({\n    mutationFn: async (invoiceId: string) => {\n      const response = await authenticatedApiRequest(\"POST\", `/api/sales-invoices/${invoiceId}/mark-paid`);\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Invoice marked as paid\",\n        description: `Invoice marked as paid. Shortfall of ₹${parseFloat(data.shortfallAdded).toLocaleString(\"en-IN\")} added to retailer balance.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/retailers\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to mark invoice as paid\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateNew = () => {\n    setEditingInvoice(null);\n    form.reset({\n      invoice: {\n        retailerId: \"\",\n        invoiceNumber: \"\",\n        invoiceDate: format(new Date(), \"yyyy-MM-dd\"),\n        totalAmount: 0,\n        paidAmount: 0,\n        balanceAmount: 0,\n        status: \"Pending\",\n        notes: \"\",\n      },\n      items: [\n        {\n          itemId: \"\",\n          weight: 0,\n          crates: 0,\n          rate: 0,\n          amount: 0,\n        },\n      ],\n    });\n    setOpen(true);\n  };\n\n  // Helper function to get quantity based on item unit\n  const getQuantityForCalculation = (itemId: string, weight: number, crates: number, boxes: number) => {\n    const itemDetails = items.find((i: any) => i.id === itemId);\n    if (!itemDetails) return weight;\n    \n    switch (itemDetails.unit) {\n      case \"kgs\":\n        return weight;\n      case \"crate\":\n        return crates;\n      case \"box\":\n        return boxes; // Box uses boxes field\n      default:\n        return weight;\n    }\n  };\n\n  const calculateItemAmount = (index: number) => {\n    const itemId = form.watch(`items.${index}.itemId`);\n    const weight = form.watch(`items.${index}.weight`);\n    const crates = form.watch(`items.${index}.crates`);\n    const boxes = form.watch(`items.${index}.boxes`);\n    const rate = form.watch(`items.${index}.rate`);\n    \n    const quantity = getQuantityForCalculation(itemId, weight || 0, crates || 0, boxes || 0);\n    const amount = quantity * rate;\n    form.setValue(`items.${index}.amount`, amount);\n    calculateTotalAmount();\n  };\n\n  const calculateTotalAmount = () => {\n    const items = form.getValues(\"items\");\n    const totalAmount = items.reduce((sum, item) => sum + item.amount, 0);\n    form.setValue(\"invoice.totalAmount\", totalAmount);\n    \n    const paidAmount = form.getValues(\"invoice.paidAmount\");\n    const balanceAmount = totalAmount - paidAmount;\n    form.setValue(\"invoice.balanceAmount\", balanceAmount);\n    \n    // Update payment status\n    if (paidAmount === 0) {\n      form.setValue(\"invoice.status\", \"Pending\");\n    } else if (paidAmount < totalAmount) {\n      form.setValue(\"invoice.status\", \"Partial\");\n    } else {\n      form.setValue(\"invoice.status\", \"Paid\");\n    }\n  };\n\n  const getAvailableStock = (itemId: string) => {\n    const itemStock = stock.find((s: any) => s.itemId === itemId);\n    return itemStock?.totalQuantity || 0;\n  };\n\n  const getItemName = (itemId: string) => {\n    const item = items.find((i: any) => i.id === itemId);\n    return item?.name || \"Unknown Item\";\n  };\n\n  const getRetailerName = (retailerId: string) => {\n    const retailer = retailers.find((r: any) => r.id === retailerId);\n    return retailer?.name || \"Unknown Retailer\";\n  };\n\n  const onSubmit = (data: InvoiceFormData) => {\n    // Convert numbers to strings for backend compatibility\n    const formattedData = {\n      invoice: {\n        ...data.invoice,\n        totalAmount: data.invoice.totalAmount.toFixed(2),\n        paidAmount: data.invoice.paidAmount.toFixed(2),\n        balanceAmount: data.invoice.balanceAmount.toFixed(2),\n      },\n      items: data.items.map(item => ({\n        ...item,\n        weight: (item.weight || 0).toFixed(2),\n        crates: (item.crates || 0).toFixed(2),\n        boxes: (item.boxes || 0).toFixed(2),\n        rate: item.rate.toFixed(2),\n        amount: item.amount.toFixed(2),\n      })),\n    };\n    createInvoiceMutation.mutate(formattedData);\n  };\n\n  const handleRecordPayment = (invoice: any) => {\n    setSelectedInvoice(invoice);\n    paymentForm.reset({\n      invoiceId: invoice.id,\n      retailerId: invoice.retailerId,\n      amount: 0,\n      paymentDate: format(new Date(), \"yyyy-MM-dd\"),\n      paymentMode: \"Cash\",\n      bankAccountId: \"\",\n      transactionReference: \"\",\n      notes: \"\",\n    });\n    setPaymentDialogOpen(true);\n  };\n\n  const handleViewPaymentHistory = (invoice: any) => {\n    setSelectedInvoice(invoice);\n    setPaymentHistoryDialogOpen(true);\n  };\n\n  const handleMarkAsPaid = (invoice: any) => {\n    markAsPaidMutation.mutate(invoice.id);\n  };\n\n  const onSubmitPayment = (data: PaymentFormData) => {\n    createPaymentMutation.mutate(data);\n  };\n\n  const getInvoicePayments = (invoiceId: string) => {\n    return salesPayments.filter((payment: any) => payment.invoiceId === invoiceId);\n  };\n\n  // Define table columns\n  const columns = [\n    {\n      accessorKey: \"invoiceNumber\",\n      header: \"Invoice #\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"invoiceDate\",\n      header: \"Date\",\n      cell: (value: string) => format(new Date(value), \"dd/MM/yyyy\"),\n    },\n    {\n      accessorKey: \"retailerId\",\n      header: \"Retailer\",\n      cell: (value: string) => getRetailerName(value),\n    },\n    {\n      accessorKey: \"totalAmount\",\n      header: \"Total Amount\",\n      cell: (value: string) => `₹${parseFloat(value).toLocaleString(\"en-IN\")}`,\n    },\n    {\n      accessorKey: \"paidAmount\",\n      header: \"Paid Amount\",\n      cell: (value: string) => `₹${parseFloat(value).toLocaleString(\"en-IN\")}`,\n    },\n    {\n      accessorKey: \"balanceAmount\",\n      header: \"Due Amount\",\n      cell: (value: string) => `₹${parseFloat(value).toLocaleString(\"en-IN\")}`,\n    },\n    {\n      accessorKey: \"shortfallAmount\",\n      header: \"Shortfall Amount\",\n      cell: (value: string) => (\n        <span className=\"text-amber-600 font-medium\">\n          {parseFloat(value || \"0\") > 0 \n            ? `₹${parseFloat(value).toLocaleString(\"en-IN\")}` \n            : \"-\"\n          }\n        </span>\n      ),\n    },\n    {\n      accessorKey: \"status\",\n      header: \"Status\",\n      cell: (value: string) => (\n        <Badge className={getPaymentStatusColor(value)}>\n          {value}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Actions\",\n      cell: (value: string, invoice: any) => (\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleViewInvoice(invoice)}\n            data-testid={`button-view-${invoice.id}`}\n            title=\"View Details\"\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleRecordPayment(invoice)}\n            data-testid={`button-payment-${invoice.id}`}\n            title=\"Record Payment\"\n          >\n            <DollarSign className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleViewPaymentHistory(invoice)}\n            data-testid={`button-history-${invoice.id}`}\n            title=\"Payment History\"\n          >\n            <History className=\"h-4 w-4\" />\n          </Button>\n          {(invoice.status === \"Pending\" || invoice.status === \"Partial\") && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => markAsPaidMutation.mutate(invoice.id)}\n              data-testid={`button-mark-paid-${invoice.id}`}\n              title=\"Mark as Paid\"\n              disabled={markAsPaidMutation.isPending}\n            >\n              <CheckCircle className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  // Add missing handler functions (handleViewInvoice was missing)\n  const handleViewInvoice = (invoice: any) => {\n    setSelectedInvoice(invoice);\n  };\n\n  // Filter invoices based on search term\n  const filteredInvoices = invoices.filter((invoice: any) =>\n    invoice.invoiceNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    getRetailerName(invoice.retailerId).toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Calculate summary stats\n  const totalInvoices = invoices.length;\n  const totalSales = invoices.reduce((sum: number, invoice: any) => \n    sum + parseFloat(invoice.totalAmount || \"0\"), 0\n  );\n  const pendingAmount = invoices\n    .filter((invoice: any) => invoice.status !== \"Paid\")\n    .reduce((sum: number, invoice: any) => \n      sum + parseFloat(invoice.balanceAmount || \"0\"), 0\n    );\n  const paidAmount = invoices.reduce((sum: number, invoice: any) => \n    sum + parseFloat(invoice.paidAmount || \"0\"), 0\n  );\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case \"Paid\":\n        return \"bg-green-500\";\n      case \"Partial\":\n        return \"bg-yellow-500\";\n      case \"Pending\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Sales Invoice Management</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Create and manage sales invoices for retailers\n              </p>\n            </div>\n            <Button onClick={handleCreateNew} data-testid=\"button-add-invoice\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Invoice\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-8\">\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Invoices</CardTitle>\n                <FileText className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{totalInvoices}</div>\n                <p className=\"text-xs text-muted-foreground\">Sales invoices</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Sales</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  ₹{totalSales.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total invoice value</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Amount Received</CardTitle>\n                <IndianRupee className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  ₹{paidAmount.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Payments received</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending Amount</CardTitle>\n                <Users className=\"h-4 w-4 text-red-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  ₹{pendingAmount.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Outstanding dues</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sales Invoices Table */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Sales Invoices</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    placeholder=\"Search invoices...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-64\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                data={filteredInvoices}\n                columns={columns}\n                searchTerm={searchTerm}\n                searchFields={[\"invoiceNumber\", \"retailerId\"]}\n                isLoading={isLoading}\n                enableRowSelection={true}\n                rowKey=\"id\"\n              />\n            </CardContent>\n          </Card>\n          </div>\n        </main>\n      </div>\n\n      {/* Create Invoice Dialog */}\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent className=\"sm:max-w-6xl\">\n          <DialogHeader>\n            <DialogTitle>Create Sales Invoice</DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Invoice Details */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"invoice.retailerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Retailer *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-retailer\">\n                            <SelectValue placeholder=\"Select retailer\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {retailers.map((retailer: any) => (\n                            <SelectItem key={retailer.id} value={retailer.id}>\n                              {retailer.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"invoice.invoiceNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Invoice Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Auto-generated\" {...field} data-testid=\"input-invoice-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"invoice.invoiceDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Invoice Date *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-invoice-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Invoice Items */}\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-medium\">Invoice Items</h3>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => append({\n                      itemId: \"\",\n                      weight: 0,\n                      crates: 0,\n                      boxes: 0,\n                      rate: 0,\n                      amount: 0,\n                    })}\n                    data-testid=\"button-add-item\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Item\n                  </Button>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {fields.map((field, index) => (\n                    <div key={field.id} className=\"grid grid-cols-6 gap-4 items-end p-4 border rounded-lg\">\n                      <FormField\n                        control={form.control}\n                        name={`items.${index}.itemId`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Item</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid={`select-item-${index}`}>\n                                  <SelectValue placeholder=\"Select item\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {items.map((item: any) => (\n                                  <SelectItem key={item.id} value={item.id}>\n                                    {item.name} - {item.quality} ({item.unit?.charAt(0).toUpperCase() + item.unit?.slice(1) || 'N/A'}) (Stock: {getAvailableStock(item.id)})\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`items.${index}.weight`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Weight (Kgs) *</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                step=\"0.1\"\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(parseFloat(e.target.value) || 0);\n                                  calculateItemAmount(index);\n                                }}\n                                data-testid={`input-weight-${index}`}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`items.${index}.crates`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Crates *</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                placeholder=\"0.00\"\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(parseFloat(e.target.value) || 0);\n                                  calculateItemAmount(index);\n                                }}\n                                data-testid={`input-crates-${index}`}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`items.${index}.boxes`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Boxes *</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                placeholder=\"0.00\"\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(parseFloat(e.target.value) || 0);\n                                  calculateItemAmount(index);\n                                }}\n                                data-testid={`input-boxes-${index}`}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`items.${index}.rate`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Rate</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                placeholder=\"₹\"\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(parseFloat(e.target.value) || 0);\n                                  calculateItemAmount(index);\n                                }}\n                                data-testid={`input-rate-${index}`}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`items.${index}.amount`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Amount</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                readOnly\n                                {...field}\n                                className=\"bg-muted\"\n                                data-testid={`input-amount-${index}`}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          remove(index);\n                          calculateTotalAmount();\n                        }}\n                        disabled={fields.length === 1}\n                        data-testid={`button-remove-item-${index}`}\n                      >\n                        <Minus className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Payment Details */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"invoice.totalAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Total Amount</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          readOnly\n                          {...field}\n                          className=\"bg-muted font-medium\"\n                          data-testid=\"input-total-amount\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"invoice.paidAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Paid Amount</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(parseFloat(e.target.value) || 0);\n                            calculateTotalAmount();\n                          }}\n                          data-testid=\"input-paid-amount\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"invoice.balanceAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Due Amount</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          readOnly\n                          {...field}\n                          className=\"bg-muted\"\n                          data-testid=\"input-due-amount\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"invoice.status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Status</FormLabel>\n                      <FormControl>\n                        <Input\n                          readOnly\n                          {...field}\n                          className=\"bg-muted\"\n                          data-testid=\"input-payment-status\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"invoice.notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Additional notes...\" {...field} data-testid=\"input-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createInvoiceMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createInvoiceMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Record Payment Dialog */}\n      <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Record Payment</DialogTitle>\n          </DialogHeader>\n          \n          <Form {...paymentForm}>\n            <form onSubmit={paymentForm.handleSubmit(onSubmitPayment)} className=\"space-y-4\">\n              {selectedInvoice && (\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <div className=\"text-sm space-y-1\">\n                    <div><strong>Invoice:</strong> {selectedInvoice.invoiceNumber}</div>\n                    <div><strong>Retailer:</strong> {getRetailerName(selectedInvoice.retailerId)}</div>\n                    <div><strong>Total Amount:</strong> ₹{parseFloat(selectedInvoice.totalAmount).toLocaleString(\"en-IN\")}</div>\n                    <div><strong>Due Amount:</strong> ₹{parseFloat(selectedInvoice.balanceAmount).toLocaleString(\"en-IN\")}</div>\n                  </div>\n                </div>\n              )}\n\n              <FormField\n                control={paymentForm.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Amount *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"₹ 0.00\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                        data-testid=\"input-payment-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={paymentForm.control}\n                  name=\"paymentDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Date *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-payment-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={paymentForm.control}\n                  name=\"paymentMode\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Mode *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-payment-mode\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Cash\">Cash</SelectItem>\n                          <SelectItem value=\"Bank\">Bank Transfer</SelectItem>\n                          <SelectItem value=\"UPI\">UPI</SelectItem>\n                          <SelectItem value=\"Cheque\">Cheque</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {paymentForm.watch(\"paymentMode\") !== \"Cash\" && (\n                <FormField\n                  control={paymentForm.control}\n                  name=\"bankAccountId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bank Account</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-bank-account\">\n                            <SelectValue placeholder=\"Select bank account\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {bankAccounts.map((account: any) => (\n                            <SelectItem key={account.id} value={account.id}>\n                              {account.bankName} - {account.accountNumber?.slice(-4)}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={paymentForm.control}\n                name=\"transactionReference\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Transaction Reference</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Reference number...\" {...field} data-testid=\"input-transaction-ref\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={paymentForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Additional notes...\" {...field} data-testid=\"input-payment-notes\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setPaymentDialogOpen(false)} data-testid=\"button-payment-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createPaymentMutation.isPending}\n                  data-testid=\"button-payment-submit\"\n                >\n                  {createPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Payment History Dialog */}\n      <Dialog open={paymentHistoryDialogOpen} onOpenChange={setPaymentHistoryDialogOpen}>\n        <DialogContent className=\"sm:max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Payment History</DialogTitle>\n          </DialogHeader>\n          \n          {selectedInvoice && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <div className=\"text-sm space-y-1\">\n                  <div><strong>Invoice:</strong> {selectedInvoice.invoiceNumber}</div>\n                  <div><strong>Retailer:</strong> {getRetailerName(selectedInvoice.retailerId)}</div>\n                  <div><strong>Total Amount:</strong> ₹{parseFloat(selectedInvoice.totalAmount).toLocaleString(\"en-IN\")}</div>\n                  <div><strong>Paid Amount:</strong> ₹{parseFloat(selectedInvoice.paidAmount).toLocaleString(\"en-IN\")}</div>\n                  <div><strong>Due Amount:</strong> ₹{parseFloat(selectedInvoice.balanceAmount).toLocaleString(\"en-IN\")}</div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-3\">Payment Records</h4>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Mode</TableHead>\n                      <TableHead>Reference</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {getInvoicePayments(selectedInvoice.id).map((payment: any) => (\n                      <TableRow key={payment.id}>\n                        <TableCell>{format(new Date(payment.paymentDate), \"dd/MM/yyyy\")}</TableCell>\n                        <TableCell className=\"font-medium\">₹{parseFloat(payment.amount).toLocaleString(\"en-IN\")}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{payment.paymentMode}</Badge>\n                        </TableCell>\n                        <TableCell>{payment.transactionReference || \"-\"}</TableCell>\n                      </TableRow>\n                    ))}\n                    {getInvoicePayments(selectedInvoice.id).length === 0 && (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center py-4 text-muted-foreground\">\n                          No payments recorded for this invoice\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex justify-end pt-4\">\n                <Button variant=\"outline\" onClick={() => setPaymentHistoryDialogOpen(false)} data-testid=\"button-history-close\">\n                  Close\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":45953},"client/src/pages/crates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { z } from \"zod\";\nimport { \n  Plus, \n  Package, \n  ArrowUpCircle, \n  ArrowDownCircle, \n  Users, \n  TrendingUp,\n  Calendar,\n  AlertTriangle\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst crateTransactionSchema = z.object({\n  retailerId: z.string().min(1, \"Retailer is required\"),\n  transactionType: z.enum([\"Given\", \"Returned\"]),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  transactionDate: z.string().min(1, \"Transaction date is required\"),\n  salesInvoiceId: z.string().optional(),\n  notes: z.string().optional(),\n  withDeposit: z.boolean().default(false),\n  depositAmount: z.number().optional(),\n}).refine((data) => {\n  if (data.withDeposit && (!data.depositAmount || data.depositAmount <= 0)) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Deposit amount is required when with deposit is selected\",\n  path: [\"depositAmount\"],\n});\n\ntype CrateTransactionFormData = z.infer<typeof crateTransactionSchema>;\n\nexport default function CrateManagement() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedRetailer, setSelectedRetailer] = useState(\"all\");\n  const [selectedTransactionType, setSelectedTransactionType] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CrateTransactionFormData>({\n    resolver: zodResolver(crateTransactionSchema),\n    defaultValues: {\n      retailerId: \"\",\n      transactionType: \"Given\",\n      quantity: 1,\n      transactionDate: format(new Date(), \"yyyy-MM-dd\"),\n      salesInvoiceId: \"\",\n      notes: \"\",\n      withDeposit: false,\n      depositAmount: undefined,\n    },\n  });\n\n  // Fetch data\n  const { data: crateTransactions = [], isLoading: transactionsLoading } = useQuery({\n    queryKey: [\"/api/crate-transactions\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/crate-transactions\");\n      return response.json();\n    },\n  });\n\n  const { data: retailers = [] } = useQuery({\n    queryKey: [\"/api/retailers\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/retailers\");\n      return response.json();\n    },\n  });\n\n  const { data: salesInvoices = [] } = useQuery({\n    queryKey: [\"/api/sales-invoices\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/sales-invoices\");\n      return response.json();\n    },\n  });\n\n  // Create crate transaction\n  const createTransactionMutation = useMutation({\n    mutationFn: async (data: CrateTransactionFormData) => {\n      const transactionData = {\n        ...data,\n        salesInvoiceId: data.salesInvoiceId || null,\n        depositAmount: data.withDeposit ? data.depositAmount : null,\n      };\n      const response = await authenticatedApiRequest(\"POST\", \"/api/crate-transactions\", transactionData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Crate transaction recorded\",\n        description: \"Crate transaction has been recorded successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/crate-transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/retailers\"] });\n      setDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to record crate transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTransaction = () => {\n    form.reset({\n      retailerId: \"\",\n      transactionType: \"Given\",\n      quantity: 1,\n      transactionDate: format(new Date(), \"yyyy-MM-dd\"),\n      salesInvoiceId: \"\",\n      notes: \"\",\n      withDeposit: false,\n      depositAmount: undefined,\n    });\n    setDialogOpen(true);\n  };\n\n  const onSubmit = (data: CrateTransactionFormData) => {\n    createTransactionMutation.mutate(data);\n  };\n\n  const getRetailerName = (retailerId: string) => {\n    const retailer = retailers.find((r: any) => r.id === retailerId);\n    return retailer?.name || \"Unknown Retailer\";\n  };\n\n  const getSalesInvoiceNumber = (invoiceId: string) => {\n    const invoice = salesInvoices.find((i: any) => i.id === invoiceId);\n    return invoice?.invoiceNumber || \"N/A\";\n  };\n\n  const getTransactionTypeColor = (type: string) => {\n    return type === \"Given\" ? \"bg-blue-500\" : \"bg-green-500\";\n  };\n\n  const getTransactionTypeIcon = (type: string) => {\n    return type === \"Given\" ? \n      <ArrowUpCircle className=\"h-4 w-4\" /> : \n      <ArrowDownCircle className=\"h-4 w-4\" />;\n  };\n\n  // Filter transactions\n  const filteredTransactions = crateTransactions.filter((transaction: any) => {\n    const matchesSearch = getRetailerName(transaction.retailerId).toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         transaction.notes?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRetailer = selectedRetailer === \"all\" || transaction.retailerId === selectedRetailer;\n    const matchesType = selectedTransactionType === \"all\" || transaction.transactionType === selectedTransactionType;\n    return matchesSearch && matchesRetailer && matchesType;\n  });\n\n  // Calculate retailer crate balances\n  const retailerCrateBalances = retailers.map((retailer: any) => {\n    const retailerTransactions = crateTransactions.filter((t: any) => t.retailerId === retailer.id);\n    const given = retailerTransactions\n      .filter((t: any) => t.transactionType === \"Given\")\n      .reduce((sum: number, t: any) => sum + t.quantity, 0);\n    const returned = retailerTransactions\n      .filter((t: any) => t.transactionType === \"Returned\")\n      .reduce((sum: number, t: any) => sum + t.quantity, 0);\n    const balance = given - returned;\n    \n    return {\n      ...retailer,\n      given,\n      returned,\n      balance,\n    };\n  });\n\n  // Define transactions table columns\n  const transactionColumns = [\n    {\n      accessorKey: \"transactionDate\",\n      header: \"Date\",\n      cell: (value: string) => format(new Date(value), \"dd/MM/yyyy\"),\n    },\n    {\n      accessorKey: \"retailerId\",\n      header: \"Retailer\",\n      cell: (value: string) => getRetailerName(value),\n    },\n    {\n      accessorKey: \"transactionType\",\n      header: \"Type\",\n      cell: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          {getTransactionTypeIcon(value)}\n          <Badge className={getTransactionTypeColor(value)}>\n            {value}\n          </Badge>\n        </div>\n      ),\n    },\n    {\n      accessorKey: \"quantity\",\n      header: \"Quantity\",\n      cell: (value: string) => <div className=\"font-medium\">{value} crates</div>,\n    },\n    {\n      accessorKey: \"withDeposit\",\n      header: \"Deposit\",\n      cell: (value: boolean, row: any) => {\n        if (value && row.depositAmount) {\n          return <Badge variant=\"outline\">₹{parseFloat(row.depositAmount).toLocaleString(\"en-IN\")}</Badge>;\n        }\n        return <span className=\"text-muted-foreground\">No deposit</span>;\n      },\n    },\n    {\n      accessorKey: \"salesInvoiceId\",\n      header: \"Related Invoice\",\n      cell: (value: string) => value ? getSalesInvoiceNumber(value) : \"-\",\n    },\n    {\n      accessorKey: \"notes\",\n      header: \"Notes\",\n      cell: (value: string) => value || \"-\",\n    },\n  ];\n\n  // Define retailer balances table columns\n  const balanceColumns = [\n    {\n      accessorKey: \"name\",\n      header: \"Retailer\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"given\",\n      header: \"Crates Given\",\n      cell: (value: number) => <div className=\"text-blue-600\">{value}</div>,\n    },\n    {\n      accessorKey: \"returned\",\n      header: \"Crates Returned\",\n      cell: (value: number) => <div className=\"text-green-600\">{value}</div>,\n    },\n    {\n      accessorKey: \"balance\",\n      header: \"Balance\",\n      cell: (value: number) => (\n        <div className={`font-medium ${value > 0 ? 'text-orange-600' : value < 0 ? 'text-red-600' : 'text-gray-600'}`}>\n          {value} crates\n        </div>\n      ),\n    },\n    {\n      accessorKey: \"balance\",\n      header: \"Status\",\n      cell: (value: number) => {\n        if (value > 0) {\n          return (\n            <div className=\"flex items-center space-x-1\">\n              <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n              <Badge variant=\"destructive\">Outstanding</Badge>\n            </div>\n          );\n        } else if (value < 0) {\n          return <Badge variant=\"secondary\">Excess Return</Badge>;\n        } else {\n          return <Badge variant=\"default\">Settled</Badge>;\n        }\n      },\n    },\n  ];\n\n  // Calculate summary stats\n  const totalTransactions = crateTransactions.length;\n  const totalCratesGiven = crateTransactions\n    .filter((t: any) => t.transactionType === \"Given\")\n    .reduce((sum: number, t: any) => sum + t.quantity, 0);\n  const totalCratesReturned = crateTransactions\n    .filter((t: any) => t.transactionType === \"Returned\")\n    .reduce((sum: number, t: any) => sum + t.quantity, 0);\n  const totalCratesOutstanding = totalCratesGiven - totalCratesReturned;\n  const retailersWithCrates = retailerCrateBalances.filter((r: any) => r.balance > 0).length;\n\n  if (transactionsLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Crate Management</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Track crate transactions with retailers\n              </p>\n            </div>\n            <Button onClick={handleCreateTransaction} data-testid=\"button-add-transaction\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Record Transaction\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-8\">\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Transactions</CardTitle>\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{totalTransactions}</div>\n                <p className=\"text-xs text-muted-foreground\">All crate movements</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Crates Given</CardTitle>\n                <ArrowUpCircle className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\">{totalCratesGiven}</div>\n                <p className=\"text-xs text-muted-foreground\">Total dispatched</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Crates Returned</CardTitle>\n                <ArrowDownCircle className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">{totalCratesReturned}</div>\n                <p className=\"text-xs text-muted-foreground\">Total received back</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Outstanding</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-amber-600\">{totalCratesOutstanding}</div>\n                <p className=\"text-xs text-muted-foreground\">With retailers</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content Tabs */}\n          <Tabs defaultValue=\"transactions\" className=\"space-y-6\">\n            <TabsList>\n              <TabsTrigger value=\"transactions\">Transactions</TabsTrigger>\n              <TabsTrigger value=\"balances\">Retailer Balances</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"transactions\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <CardTitle>Crate Transactions</CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      <Select value={selectedRetailer} onValueChange={setSelectedRetailer}>\n                        <SelectTrigger className=\"w-40\" data-testid=\"select-retailer-filter\">\n                          <SelectValue placeholder=\"All Retailers\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Retailers</SelectItem>\n                          {retailers.map((retailer: any) => (\n                            <SelectItem key={retailer.id} value={retailer.id}>\n                              {retailer.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <Select value={selectedTransactionType} onValueChange={setSelectedTransactionType}>\n                        <SelectTrigger className=\"w-32\" data-testid=\"select-type-filter\">\n                          <SelectValue placeholder=\"All Types\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Types</SelectItem>\n                          <SelectItem value=\"Given\">Given</SelectItem>\n                          <SelectItem value=\"Returned\">Returned</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <Input\n                        placeholder=\"Search transactions...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"w-64\"\n                        data-testid=\"input-search\"\n                      />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <DataTable\n                    data={filteredTransactions}\n                    columns={transactionColumns}\n                    searchTerm={searchTerm}\n                    searchFields={[\"retailerId\", \"notes\"]}\n                    isLoading={transactionsLoading}\n                    enableRowSelection={true}\n                    rowKey=\"id\"\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"balances\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <CardTitle>Retailer Crate Balances</CardTitle>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {retailersWithCrates} retailers have crates\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <DataTable\n                    data={retailerCrateBalances}\n                    columns={balanceColumns}\n                    searchTerm=\"\"\n                    searchFields={[\"name\"]}\n                    isLoading={false}\n                    enableRowSelection={true}\n                    rowKey=\"id\"\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n\n    {/* Record Transaction Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Record Crate Transaction</DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"retailerId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Retailer *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-retailer\">\n                          <SelectValue placeholder=\"Select retailer\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {retailers.map((retailer: any) => (\n                          <SelectItem key={retailer.id} value={retailer.id}>\n                            {retailer.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"transactionType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Transaction Type *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-transaction-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Given\">\n                            <div className=\"flex items-center space-x-2\">\n                              <ArrowUpCircle className=\"h-4 w-4 text-blue-600\" />\n                              <span>Given</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"Returned\">\n                            <div className=\"flex items-center space-x-2\">\n                              <ArrowDownCircle className=\"h-4 w-4 text-green-600\" />\n                              <span>Returned</span>\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"quantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          data-testid=\"input-quantity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Deposit Option */}\n              <FormField\n                control={form.control}\n                name=\"withDeposit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Deposit Option</FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={(value) => field.onChange(value === \"true\")}\n                        value={field.value ? \"true\" : \"false\"}\n                        className=\"flex flex-row space-x-6\"\n                        data-testid=\"radio-deposit-option\"\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"false\" id=\"without-deposit\" />\n                          <Label htmlFor=\"without-deposit\">Without Deposit</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"true\" id=\"with-deposit\" />\n                          <Label htmlFor=\"with-deposit\">With Deposit</Label>\n                        </div>\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Deposit Amount (Conditional) */}\n              {form.watch(\"withDeposit\") && (\n                <FormField\n                  control={form.control}\n                  name=\"depositAmount\"\n                  render={({ field }) => {\n                    const transactionType = form.watch(\"transactionType\");\n                    const isGiven = transactionType === \"Given\";\n                    \n                    return (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center space-x-2\">\n                          <span>Deposit Amount *</span>\n                          <span className={`text-xs px-2 py-1 rounded-full ${\n                            isGiven \n                              ? \"bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300\" \n                              : \"bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300\"\n                          }`}>\n                            {isGiven ? \"Received from retailer\" : \"Paid to retailer\"}\n                          </span>\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            min=\"0.01\"\n                            placeholder={`Enter deposit amount ${isGiven ? \"received\" : \"to pay\"}`}\n                            {...field}\n                            onChange={(e) => field.onChange(parseFloat(e.target.value) || undefined)}\n                            data-testid=\"input-deposit-amount\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                        <p className=\"text-xs text-muted-foreground\">\n                          {isGiven \n                            ? \"Amount received from retailer as deposit for crates given\"\n                            : \"Amount to be paid back to retailer for returned crates\"\n                          }\n                        </p>\n                      </FormItem>\n                    );\n                  }}\n                />\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"transactionDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Transaction Date *</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-transaction-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"salesInvoiceId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Related Sales Invoice (Optional)</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-sales-invoice\">\n                          <SelectValue placeholder=\"Select sales invoice\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {salesInvoices.map((invoice: any) => (\n                          <SelectItem key={invoice.id} value={invoice.id}>\n                            {invoice.invoiceNumber} - {getRetailerName(invoice.retailerId)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Additional notes...\" {...field} data-testid=\"input-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createTransactionMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createTransactionMutation.isPending ? \"Recording...\" : \"Record Transaction\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":28052},"client/src/pages/expenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticatedApiRequest } from \"@/lib/auth\";\nimport { z } from \"zod\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Receipt, \n  TrendingDown, \n  Calendar, \n  DollarSign,\n  Tag,\n  FileText,\n  CreditCard\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst expenseCategorySchema = z.object({\n  name: z.string().min(1, \"Category name is required\"),\n  description: z.string().optional(),\n});\n\nconst expenseSchema = z.object({\n  categoryId: z.string().min(1, \"Category is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  amount: z.number().min(0.01, \"Amount must be greater than 0\"),\n  paymentDate: z.string().min(1, \"Payment date is required\"),\n  paymentMode: z.enum([\"Cash\", \"Bank\", \"UPI\", \"Card\"]),\n  bankAccountId: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype ExpenseCategoryFormData = z.infer<typeof expenseCategorySchema>;\ntype ExpenseFormData = z.infer<typeof expenseSchema>;\n\nexport default function ExpenseManagement() {\n  const [expenseDialogOpen, setExpenseDialogOpen] = useState(false);\n  const [categoryDialogOpen, setCategoryDialogOpen] = useState(false);\n  const [editingExpense, setEditingExpense] = useState<any>(null);\n  const [editingCategory, setEditingCategory] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedPaymentMode, setSelectedPaymentMode] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const expenseForm = useForm<ExpenseFormData>({\n    resolver: zodResolver(expenseSchema),\n    defaultValues: {\n      categoryId: \"\",\n      description: \"\",\n      amount: 0,\n      paymentDate: format(new Date(), \"yyyy-MM-dd\"),\n      paymentMode: \"Cash\",\n      bankAccountId: \"\",\n      notes: \"\",\n    },\n  });\n\n  const categoryForm = useForm<ExpenseCategoryFormData>({\n    resolver: zodResolver(expenseCategorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  // Fetch data\n  const { data: expenses = [], isLoading: expensesLoading } = useQuery({\n    queryKey: [\"/api/expenses\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/expenses\");\n      return response.json();\n    },\n  });\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/expense-categories\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/expense-categories\");\n      return response.json();\n    },\n  });\n\n  const { data: bankAccounts = [] } = useQuery({\n    queryKey: [\"/api/bank-accounts\"],\n    queryFn: async () => {\n      const response = await authenticatedApiRequest(\"GET\", \"/api/bank-accounts\");\n      return response.json();\n    },\n  });\n\n  // Expense mutations\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: ExpenseFormData) => {\n      const expenseData = {\n        ...data,\n        amount: data.amount.toFixed(2), // Convert number to string\n        bankAccountId: data.bankAccountId || null,\n      };\n      const response = await authenticatedApiRequest(\"POST\", \"/api/expenses\", expenseData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Expense added\",\n        description: \"New expense has been recorded successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      setExpenseDialogOpen(false);\n      expenseForm.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to add expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Category mutations\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: ExpenseCategoryFormData) => {\n      const response = await authenticatedApiRequest(\"POST\", \"/api/expense-categories\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Category created\",\n        description: \"New expense category has been created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-categories\"] });\n      setCategoryDialogOpen(false);\n      categoryForm.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<ExpenseCategoryFormData> }) => {\n      const response = await authenticatedApiRequest(\"PUT\", `/api/expense-categories/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Category updated\",\n        description: \"Expense category has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-categories\"] });\n      setCategoryDialogOpen(false);\n      setEditingCategory(null);\n      categoryForm.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await authenticatedApiRequest(\"DELETE\", `/api/expense-categories/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Category deleted\",\n        description: \"Expense category has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-categories\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateExpense = () => {\n    setEditingExpense(null);\n    expenseForm.reset({\n      categoryId: \"\",\n      description: \"\",\n      amount: 0,\n      paymentDate: format(new Date(), \"yyyy-MM-dd\"),\n      paymentMode: \"Cash\",\n      bankAccountId: \"\",\n      notes: \"\",\n    });\n    setExpenseDialogOpen(true);\n  };\n\n  const handleCreateCategory = () => {\n    setEditingCategory(null);\n    categoryForm.reset();\n    setCategoryDialogOpen(true);\n  };\n\n  const handleEditCategory = (category: any) => {\n    setEditingCategory(category);\n    categoryForm.reset({\n      name: category.name,\n      description: category.description || \"\",\n    });\n    setCategoryDialogOpen(true);\n  };\n\n  const handleDeleteCategory = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this category? This action cannot be undone.\")) {\n      deleteCategoryMutation.mutate(id);\n    }\n  };\n\n  const onSubmitExpense = (data: ExpenseFormData) => {\n    createExpenseMutation.mutate(data);\n  };\n\n  const onSubmitCategory = (data: ExpenseCategoryFormData) => {\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data });\n    } else {\n      createCategoryMutation.mutate(data);\n    }\n  };\n\n  const getCategoryName = (categoryId: string) => {\n    const category = categories.find((c: any) => c.id === categoryId);\n    return category?.name || \"Unknown Category\";\n  };\n\n  const getPaymentModeColor = (mode: string) => {\n    switch (mode) {\n      case \"Cash\":\n        return \"bg-green-500\";\n      case \"Bank\":\n        return \"bg-blue-500\";\n      case \"UPI\":\n        return \"bg-purple-500\";\n      case \"Card\":\n        return \"bg-orange-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  // Filter expenses\n  const filteredExpenses = expenses.filter((expense: any) => {\n    const matchesSearch = expense.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         getCategoryName(expense.categoryId).toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || expense.categoryId === selectedCategory;\n    const matchesPaymentMode = selectedPaymentMode === \"all\" || expense.paymentMode === selectedPaymentMode;\n    return matchesSearch && matchesCategory && matchesPaymentMode;\n  });\n\n  // Define expense table columns\n  const expenseColumns = [\n    {\n      accessorKey: \"paymentDate\",\n      header: \"Date\",\n      cell: (value: string, row: any) => {\n        try {\n          const dateField = row.expenseDate || row.paymentDate;\n          return format(new Date(dateField), \"dd/MM/yyyy\");\n        } catch {\n          return \"Invalid Date\";\n        }\n      },\n    },\n    {\n      accessorKey: \"description\",\n      header: \"Description\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"categoryId\",\n      header: \"Category\",\n      cell: (value: string) => (\n        <Badge variant=\"outline\">{getCategoryName(value)}</Badge>\n      ),\n    },\n    {\n      accessorKey: \"amount\",\n      header: \"Amount\",\n      cell: (value: string) => (\n        <div className=\"font-medium text-red-600\">\n          ₹{parseFloat(value).toLocaleString(\"en-IN\")}\n        </div>\n      ),\n    },\n    {\n      accessorKey: \"paymentMode\",\n      header: \"Payment Mode\",\n      cell: (value: string) => (\n        <Badge className={getPaymentModeColor(value)}>\n          {value}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"notes\",\n      header: \"Notes\",\n      cell: (value: string) => value || \"-\",\n    },\n  ];\n\n  // Define category table columns  \n  const categoryColumns = [\n    {\n      accessorKey: \"name\",\n      header: \"Name\",\n      cell: (value: string) => <div className=\"font-medium\">{value}</div>,\n    },\n    {\n      accessorKey: \"description\",\n      header: \"Description\",\n      cell: (value: string) => value || \"-\",\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Expenses Count\",\n      cell: (value: string) => {\n        const categoryExpenses = expenses.filter((e: any) => e.categoryId === value);\n        return <Badge variant=\"secondary\">{categoryExpenses.length}</Badge>;\n      },\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Total Amount\",\n      cell: (value: string) => {\n        const categoryExpenses = expenses.filter((e: any) => e.categoryId === value);\n        const categoryTotal = categoryExpenses.reduce((sum: number, exp: any) => \n          sum + parseFloat(exp.amount || \"0\"), 0\n        );\n        return <div className=\"font-medium\">₹{categoryTotal.toLocaleString(\"en-IN\")}</div>;\n      },\n    },\n    {\n      accessorKey: \"id\",\n      header: \"Actions\",\n      cell: (value: string, row: any) => (\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEditCategory(row)}\n            data-testid={`button-edit-category-${value}`}\n            title=\"Edit Category\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleDeleteCategory(value)}\n            data-testid={`button-delete-category-${value}`}\n            title=\"Delete Category\"\n            disabled={deleteCategoryMutation.isPending}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  // Calculate summary stats\n  const totalExpenses = expenses.length;\n  const totalAmount = expenses.reduce((sum: number, expense: any) => \n    sum + parseFloat(expense.amount || \"0\"), 0\n  );\n  const todaysExpenses = expenses.filter((expense: any) => {\n    try {\n      const today = format(new Date(), \"yyyy-MM-dd\");\n      // Handle both expenseDate and paymentDate fields\n      const dateField = expense.expenseDate || expense.paymentDate;\n      if (!dateField) return false;\n      \n      const expenseDate = format(new Date(dateField), \"yyyy-MM-dd\");\n      return expenseDate === today;\n    } catch (error) {\n      // Skip expenses with invalid dates\n      return false;\n    }\n  });\n  const todaysAmount = todaysExpenses.reduce((sum: number, expense: any) => \n    sum + parseFloat(expense.amount || \"0\"), 0\n  );\n  const totalCategories = categories.length;\n\n  if (expensesLoading || categoriesLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Expense Management</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Track business expenses and manage categories\n              </p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" onClick={handleCreateCategory} data-testid=\"button-add-category\">\n                <Tag className=\"h-4 w-4 mr-2\" />\n                Add Category\n              </Button>\n              <Button onClick={handleCreateExpense} data-testid=\"button-add-expense\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Expense\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-8\">\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Expenses</CardTitle>\n                <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{totalExpenses}</div>\n                <p className=\"text-xs text-muted-foreground\">All time</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Amount</CardTitle>\n                <TrendingDown className=\"h-4 w-4 text-red-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  ₹{totalAmount.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total spent</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Today's Expenses</CardTitle>\n                <Calendar className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  ₹{todaysAmount.toLocaleString(\"en-IN\")}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">{todaysExpenses.length} expenses</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Categories</CardTitle>\n                <Tag className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">{totalCategories}</div>\n                <p className=\"text-xs text-muted-foreground\">Expense categories</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content Tabs */}\n          <Tabs defaultValue=\"expenses\" className=\"space-y-6\">\n            <TabsList>\n              <TabsTrigger value=\"expenses\">Expenses</TabsTrigger>\n              <TabsTrigger value=\"categories\">Categories</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"expenses\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <CardTitle>Expenses</CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                        <SelectTrigger className=\"w-40\" data-testid=\"select-category-filter\">\n                          <SelectValue placeholder=\"All Categories\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Categories</SelectItem>\n                          {categories.map((category: any) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <Select value={selectedPaymentMode} onValueChange={setSelectedPaymentMode}>\n                        <SelectTrigger className=\"w-40\" data-testid=\"select-payment-mode-filter\">\n                          <SelectValue placeholder=\"All Payment Modes\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Payment Modes</SelectItem>\n                          <SelectItem value=\"Cash\">Cash</SelectItem>\n                          <SelectItem value=\"Bank\">Bank</SelectItem>\n                          <SelectItem value=\"UPI\">UPI</SelectItem>\n                          <SelectItem value=\"Card\">Card</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <Input\n                        placeholder=\"Search expenses...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"w-64\"\n                        data-testid=\"input-search\"\n                      />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <DataTable\n                    data={filteredExpenses}\n                    columns={expenseColumns}\n                    searchTerm={searchTerm}\n                    searchFields={[\"description\"]}\n                    isLoading={expensesLoading}\n                    enableRowSelection={true}\n                    rowKey=\"id\"\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"categories\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <CardTitle>Expense Categories</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <DataTable\n                    data={categories}\n                    columns={categoryColumns}\n                    searchTerm=\"\"\n                    searchFields={[\"name\", \"description\"]}\n                    isLoading={categoriesLoading}\n                    enableRowSelection={true}\n                    rowKey=\"id\"\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n\n    {/* Add Expense Dialog */}\n      <Dialog open={expenseDialogOpen} onOpenChange={setExpenseDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Add New Expense</DialogTitle>\n          </DialogHeader>\n          \n          <Form {...expenseForm}>\n            <form onSubmit={expenseForm.handleSubmit(onSubmitExpense)} className=\"space-y-4\">\n              <FormField\n                control={expenseForm.control}\n                name=\"categoryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-expense-category\">\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {categories.map((category: any) => (\n                          <SelectItem key={category.id} value={category.id}>\n                            {category.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={expenseForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter expense description\" {...field} data-testid=\"input-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={expenseForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"₹ 0.00\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                          data-testid=\"input-amount\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={expenseForm.control}\n                  name=\"paymentDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-expense-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={expenseForm.control}\n                  name=\"paymentMode\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Mode *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-payment-mode\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Cash\">Cash</SelectItem>\n                          <SelectItem value=\"Bank\">Bank</SelectItem>\n                          <SelectItem value=\"UPI\">UPI</SelectItem>\n                          <SelectItem value=\"Card\">Card</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={expenseForm.control}\n                  name=\"bankAccountId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bank Account (Optional)</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-bank-account\">\n                            <SelectValue placeholder=\"Select bank account\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {bankAccounts.map((account: any) => (\n                            <SelectItem key={account.id} value={account.id}>\n                              {account.bankName} - {account.accountNumber.slice(-4)}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={expenseForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Additional notes...\" {...field} data-testid=\"input-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setExpenseDialogOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createExpenseMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createExpenseMutation.isPending ? \"Adding...\" : \"Add Expense\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add/Edit Category Dialog */}\n      <Dialog open={categoryDialogOpen} onOpenChange={setCategoryDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingCategory ? \"Edit Category\" : \"Add New Category\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <Form {...categoryForm}>\n            <form onSubmit={categoryForm.handleSubmit(onSubmitCategory)} className=\"space-y-4\">\n              <FormField\n                control={categoryForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter category name\" {...field} data-testid=\"input-category-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={categoryForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Category description...\" {...field} data-testid=\"input-category-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setCategoryDialogOpen(false)} data-testid=\"button-category-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createCategoryMutation.isPending || updateCategoryMutation.isPending}\n                  data-testid=\"button-category-submit\"\n                >\n                  {createCategoryMutation.isPending || updateCategoryMutation.isPending\n                    ? \"Saving...\" \n                    : editingCategory \n                    ? \"Update Category\" \n                    : \"Create Category\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n    </>\n  );\n}","size_bytes":30413},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/initializeDatabase.ts":{"content":"import { db } from \"./db\";\nimport bcrypt from \"bcrypt\";\nimport { \n  users, vendors, items, bankAccounts, expenseCategories, retailers,\n  purchaseInvoices, invoiceItems, payments, stock, stockMovements,\n  salesInvoices, salesInvoiceItems, salesPayments, crateTransactions,\n  expenses, cashbook, bankbook\n} from \"@shared/schema\";\nimport { ROLE_PERMISSIONS } from \"@shared/permissions\";\nimport { randomUUID } from \"crypto\";\n\nexport async function initializeDatabase() {\n  try {\n    // Check if users exist\n    const existingUsers = await db.select().from(users).limit(1);\n    if (existingUsers.length > 0) {\n      console.log(\"Database already initialized\");\n      return;\n    }\n\n    console.log(\"Initializing database with default data...\");\n\n    // Create default admin user\n    const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n    await db.insert(users).values({\n      username: \"admin\",\n      password: hashedPassword,\n      role: \"Admin\",\n      name: \"System Administrator\",\n      permissions: [...ROLE_PERMISSIONS.Admin],\n    });\n\n    // Create additional users for testing\n    const operatorPassword = await bcrypt.hash(\"operator123\", 10);\n    await db.insert(users).values({\n      username: \"operator\",\n      password: operatorPassword,\n      role: \"Operator\",\n      name: \"Suresh Patil\",\n      permissions: [...ROLE_PERMISSIONS.Operator],\n    });\n\n    const accountantPassword = await bcrypt.hash(\"accountant123\", 10);\n    await db.insert(users).values({\n      username: \"accountant\",\n      password: accountantPassword,\n      role: \"Accountant\",\n      name: \"Priya Sharma\",\n      permissions: [...ROLE_PERMISSIONS.Accountant],\n    });\n\n    // Create multiple vendors\n    const vendor1Id = randomUUID();\n    await db.insert(vendors).values({\n      id: vendor1Id,\n      name: \"Ramesh Fruit Supplier\",\n      contactPerson: \"Ramesh Kumar\",\n      phone: \"9876543210\",\n      address: \"Market Road, Mumbai\",\n      gstNumber: \"27ABCDE1234F1Z5\",\n      panNumber: \"ABCDE1234F\",\n      balance: \"15000.00\",\n      isActive: true,\n    });\n\n    const vendor2Id = randomUUID();\n    await db.insert(vendors).values({\n      id: vendor2Id,\n      name: \"Krishna Produce Co.\",\n      contactPerson: \"Krishna Rao\",\n      phone: \"9876543220\",\n      address: \"Wholesale Market, Pune\",\n      gstNumber: \"27ABCDE1234H1Z7\",\n      panNumber: \"ABCDE1234H\",\n      balance: \"8500.00\",\n      isActive: true,\n    });\n\n    const vendor3Id = randomUUID();\n    await db.insert(vendors).values({\n      id: vendor3Id,\n      name: \"Mahalakshmi Fruits\",\n      contactPerson: \"Lakshmi Devi\",\n      phone: \"9876543230\",\n      address: \"Fruit Market, Nashik\",\n      gstNumber: \"27ABCDE1234I1Z8\",\n      panNumber: \"ABCDE1234I\",\n      balance: \"22000.00\",\n      isActive: true,\n    });\n\n    // Create multiple items for different vendors\n    await db.insert(items).values([\n      {\n        name: \"Mangoes\",\n        quality: \"A-Grade\",\n        unit: \"crate\",\n        vendorId: vendor1Id,\n        isActive: true,\n      },\n      {\n        name: \"Mangoes\",\n        quality: \"B-Grade\", \n        unit: \"crate\",\n        vendorId: vendor1Id,\n        isActive: true,\n      },\n      {\n        name: \"Apples\",\n        quality: \"Premium\",\n        unit: \"box\",\n        vendorId: vendor2Id,\n        isActive: true,\n      },\n      {\n        name: \"Oranges\",\n        quality: \"A-Grade\",\n        unit: \"kgs\",\n        vendorId: vendor2Id,\n        isActive: true,\n      },\n      {\n        name: \"Grapes\",\n        quality: \"Export Quality\",\n        unit: \"box\",\n        vendorId: vendor3Id,\n        isActive: true,\n      },\n      {\n        name: \"Pomegranates\",\n        quality: \"A-Grade\",\n        unit: \"crate\",\n        vendorId: vendor3Id,\n        isActive: true,\n      }\n    ]);\n\n    // Create multiple bank accounts\n    await db.insert(bankAccounts).values([\n      {\n        name: \"Business Current Account\",\n        accountNumber: \"1234567890\",\n        bankName: \"State Bank of India\",\n        ifscCode: \"SBIN0001234\",\n        balance: \"125000.00\",\n        isActive: true,\n      },\n      {\n        name: \"Savings Account\",\n        accountNumber: \"9876543210\",\n        bankName: \"HDFC Bank\",\n        ifscCode: \"HDFC0001234\",\n        balance: \"85000.00\",\n        isActive: true,\n      }\n    ]);\n\n    // Create multiple retailers\n    await db.insert(retailers).values([\n      {\n        name: \"Raj Retail Store\",\n        contactPerson: \"Raj Patel\",\n        phone: \"9876543211\",\n        address: \"Shop No. 15, Market Complex\",\n        gstNumber: \"27ABCDE1234G1Z6\",\n        panNumber: \"ABCDE1234G\",\n        balance: \"5000.00\",\n        udhaaarBalance: \"12000.00\",\n        shortfallBalance: \"0.00\",\n        crateBalance: 15,\n        isActive: true,\n      },\n      {\n        name: \"Fresh Fruits Mart\",\n        contactPerson: \"Vikram Singh\",\n        phone: \"9876543212\",\n        address: \"Main Road, Sector 7\",\n        gstNumber: \"27ABCDE1234J1Z9\",\n        panNumber: \"ABCDE1234J\",\n        balance: \"8500.00\",\n        udhaaarBalance: \"6000.00\",\n        shortfallBalance: \"1500.00\",\n        crateBalance: 8,\n        isActive: true,\n      },\n      {\n        name: \"City Fruit Center\",\n        contactPerson: \"Amit Joshi\",\n        phone: \"9876543213\",\n        address: \"Commercial Street, Block A\",\n        gstNumber: \"27ABCDE1234K1Z0\",\n        panNumber: \"ABCDE1234K\",\n        balance: \"3200.00\",\n        udhaaarBalance: \"4500.00\",\n        shortfallBalance: \"0.00\",\n        crateBalance: 22,\n        isActive: true,\n      },\n      {\n        name: \"Green Valley Fruits\",\n        contactPerson: \"Sunita Mehta\",\n        phone: \"9876543214\",\n        address: \"Garden Plaza, Shop 8\",\n        gstNumber: \"27ABCDE1234L1Z1\",\n        panNumber: \"ABCDE1234L\",\n        balance: \"0.00\",\n        udhaaarBalance: \"0.00\",\n        shortfallBalance: \"0.00\",\n        crateBalance: 0,\n        isActive: true,\n      }\n    ]);\n\n    // Create sample expense categories\n    await db.insert(expenseCategories).values([\n      { name: \"Transport\", description: \"Transportation and logistics costs\" },\n      { name: \"Labor\", description: \"Labor and workforce expenses\" },\n      { name: \"Market Fee\", description: \"Market and commission fees\" },\n      { name: \"Utilities\", description: \"Electricity, water, and utilities\" },\n      { name: \"Office Expenses\", description: \"Stationary, office supplies\" },\n      { name: \"Rent\", description: \"Shop and storage rent\" },\n      { name: \"Maintenance\", description: \"Equipment and facility maintenance\" },\n    ]);\n\n    // Get the created IDs for reference\n    const allVendors = await db.select().from(vendors);\n    const allItems = await db.select().from(items);\n    const allRetailers = await db.select().from(retailers);\n    const allBankAccounts = await db.select().from(bankAccounts);\n    const allExpenseCategories = await db.select().from(expenseCategories);\n\n    // Create comprehensive purchase invoices with different statuses\n    const [invoice1] = await db.insert(purchaseInvoices).values({\n      invoiceNumber: \"PI000001\",\n      vendorId: allVendors[0].id,\n      invoiceDate: new Date(\"2024-01-15\"),\n      commission: \"1250.00\",\n      labour: \"500.00\",\n      truckFreight: \"800.00\",\n      crateFreight: \"200.00\",\n      postExpenses: \"100.00\",\n      draftExpenses: \"50.00\",\n      vatav: \"0.00\",\n      otherExpenses: \"0.00\",\n      advance: \"0.00\",\n      totalExpense: \"2700.00\",\n      totalSelling: \"25000.00\",\n      totalLessExpenses: \"22300.00\",\n      netAmount: \"22300.00\",\n      status: \"Paid\",\n      paidAmount: \"22300.00\",\n      balanceAmount: \"0.00\"\n    }).returning();\n\n    const [invoice2] = await db.insert(purchaseInvoices).values({\n      invoiceNumber: \"PI000002\",\n      vendorId: allVendors[1].id,\n      invoiceDate: new Date(\"2024-01-18\"),\n      commission: \"900.00\",\n      labour: \"300.00\",\n      truckFreight: \"600.00\",\n      crateFreight: \"150.00\",\n      postExpenses: \"80.00\",\n      draftExpenses: \"30.00\",\n      vatav: \"0.00\",\n      otherExpenses: \"0.00\",\n      advance: \"0.00\",\n      totalExpense: \"2060.00\",\n      totalSelling: \"18000.00\",\n      totalLessExpenses: \"15940.00\",\n      netAmount: \"15940.00\",\n      status: \"Partially Paid\",\n      paidAmount: \"10000.00\",\n      balanceAmount: \"5940.00\"\n    }).returning();\n\n    const [invoice3] = await db.insert(purchaseInvoices).values({\n      invoiceNumber: \"PI000003\",\n      vendorId: allVendors[2].id,\n      invoiceDate: new Date(\"2024-01-20\"),\n      commission: \"1600.00\",\n      labour: \"700.00\",\n      truckFreight: \"1000.00\",\n      crateFreight: \"250.00\",\n      postExpenses: \"120.00\",\n      draftExpenses: \"80.00\",\n      vatav: \"0.00\",\n      otherExpenses: \"50.00\",\n      advance: \"0.00\",\n      totalExpense: \"3800.00\",\n      totalSelling: \"32000.00\",\n      totalLessExpenses: \"28200.00\",\n      netAmount: \"28200.00\",\n      status: \"Unpaid\",\n      paidAmount: \"0.00\",\n      balanceAmount: \"28200.00\"\n    }).returning();\n\n    // Create invoice items for purchase invoices\n    await db.insert(invoiceItems).values([\n      {\n        invoiceId: invoice1.id,\n        itemId: allItems[0].id, // Mangoes A-Grade\n        weight: \"500.0\",\n        crates: \"25\",\n        boxes: \"0\",\n        rate: \"45.00\",\n        amount: \"22500.00\"\n      },\n      {\n        invoiceId: invoice1.id,\n        itemId: allItems[1].id, // Mangoes B-Grade\n        weight: \"100.0\",\n        crates: \"5\",\n        boxes: \"0\",\n        rate: \"25.00\",\n        amount: \"2500.00\"\n      },\n      {\n        invoiceId: invoice2.id,\n        itemId: allItems[2].id, // Apples Premium\n        weight: \"300.0\",\n        crates: \"0\",\n        boxes: \"30\",\n        rate: \"60.00\",\n        amount: \"18000.00\"\n      },\n      {\n        invoiceId: invoice3.id,\n        itemId: allItems[4].id, // Grapes Export Quality\n        weight: \"400.0\",\n        crates: \"0\",\n        boxes: \"40\",\n        rate: \"80.00\",\n        amount: \"32000.00\"\n      }\n    ]);\n\n    // Create payments with different modes\n    await db.insert(payments).values([\n      {\n        vendorId: allVendors[0].id,\n        invoiceId: invoice1.id,\n        amount: \"15000.00\",\n        paymentMode: \"Cash\",\n        paymentDate: new Date(\"2024-01-16\"),\n        notes: \"Partial payment in cash\"\n      },\n      {\n        vendorId: allVendors[0].id,\n        invoiceId: invoice1.id,\n        amount: \"7450.00\",\n        paymentMode: \"Bank\",\n        paymentDate: new Date(\"2024-01-17\"),\n        bankAccountId: allBankAccounts[0].id,\n        notes: \"Final payment via bank transfer\"\n      },\n      {\n        vendorId: allVendors[1].id,\n        invoiceId: invoice2.id,\n        amount: \"5000.00\",\n        paymentMode: \"UPI\",\n        paymentDate: new Date(\"2024-01-19\"),\n        upiReference: \"UPI123456789\",\n        notes: \"UPI payment\"\n      },\n      {\n        vendorId: allVendors[1].id,\n        invoiceId: invoice2.id,\n        amount: \"5000.00\",\n        paymentMode: \"Cheque\",\n        paymentDate: new Date(\"2024-01-22\"),\n        bankAccountId: allBankAccounts[1].id,\n        chequeNumber: \"CHQ001234\",\n        notes: \"Cheque payment\"\n      }\n    ]);\n\n    // Create stock entries for all items\n    await db.insert(stock).values([\n      {\n        itemId: allItems[0].id, // Mangoes A-Grade\n        quantityInCrates: \"15\",\n        quantityInBoxes: \"0\",\n        quantityInKgs: \"300.0\"\n      },\n      {\n        itemId: allItems[1].id, // Mangoes B-Grade\n        quantityInCrates: \"8\",\n        quantityInBoxes: \"0\", \n        quantityInKgs: \"160.0\"\n      },\n      {\n        itemId: allItems[2].id, // Apples Premium\n        quantityInCrates: \"0\",\n        quantityInBoxes: \"12\",\n        quantityInKgs: \"120.0\"\n      },\n      {\n        itemId: allItems[3].id, // Oranges A-Grade\n        quantityInCrates: \"0\",\n        quantityInBoxes: \"0\",\n        quantityInKgs: \"85.0\"\n      },\n      {\n        itemId: allItems[4].id, // Grapes Export Quality\n        quantityInCrates: \"0\",\n        quantityInBoxes: \"18\",\n        quantityInKgs: \"180.0\"\n      },\n      {\n        itemId: allItems[5].id, // Pomegranates A-Grade\n        quantityInCrates: \"6\",\n        quantityInBoxes: \"0\",\n        quantityInKgs: \"120.0\"\n      }\n    ]);\n\n    // Create stock movements (in and out)\n    await db.insert(stockMovements).values([\n      {\n        itemId: allItems[0].id,\n        movementType: \"IN\",\n        quantityInCrates: \"25\",\n        quantityInBoxes: \"0\",\n        quantityInKgs: \"500.0\",\n        referenceType: \"PURCHASE_INVOICE\",\n        referenceId: invoice1.id,\n        movementDate: new Date(\"2024-01-15\"),\n        vendorId: allVendors[0].id,\n        notes: \"Stock received from purchase\"\n      },\n      {\n        itemId: allItems[0].id,\n        movementType: \"OUT\",\n        quantityInCrates: \"10\",\n        quantityInBoxes: \"0\",\n        quantityInKgs: \"200.0\",\n        referenceType: \"SALES_INVOICE\", \n        referenceId: null,\n        movementDate: new Date(\"2024-01-16\"),\n        retailerId: allRetailers[0].id,\n        rate: \"50.00\",\n        notes: \"Stock sold to retailer\"\n      },\n      {\n        itemId: allItems[2].id,\n        movementType: \"IN\",\n        quantityInCrates: \"0\",\n        quantityInBoxes: \"30\",\n        quantityInKgs: \"300.0\",\n        referenceType: \"PURCHASE_INVOICE\",\n        referenceId: invoice2.id,\n        movementDate: new Date(\"2024-01-18\"),\n        vendorId: allVendors[1].id,\n        notes: \"Apple stock received\"\n      },\n      {\n        itemId: allItems[2].id,\n        movementType: \"OUT\",\n        quantityInCrates: \"0\",\n        quantityInBoxes: \"18\",\n        quantityInKgs: \"180.0\",\n        referenceType: \"SALES_INVOICE\",\n        referenceId: null,\n        movementDate: new Date(\"2024-01-18\"),\n        retailerId: allRetailers[1].id,\n        rate: \"70.00\",\n        notes: \"Apple stock sold\"\n      },\n      {\n        itemId: allItems[1].id,\n        movementType: \"OUT\",\n        quantityInCrates: \"2\",\n        quantityInBoxes: \"0\",\n        quantityInKgs: \"40.0\",\n        referenceType: \"ADJUSTMENT\",\n        referenceId: null,\n        movementDate: new Date(\"2024-01-19\"),\n        notes: \"Damaged/overripe mangoes\"\n      }\n    ]);\n\n    // Create sales invoices with different statuses\n    const [salesInvoice1] = await db.insert(salesInvoices).values({\n      retailerId: allRetailers[0].id,\n      invoiceNumber: \"SI000001\",\n      invoiceDate: new Date(\"2024-01-16\"),\n      totalAmount: \"12000.00\",\n      status: \"Paid\",\n      paidAmount: \"12000.00\",\n      balanceAmount: \"0.00\"\n    }).returning();\n\n    const [salesInvoice2] = await db.insert(salesInvoices).values({\n      retailerId: allRetailers[1].id,\n      invoiceNumber: \"SI000002\",\n      invoiceDate: new Date(\"2024-01-18\"),\n      totalAmount: \"8500.00\",\n      status: \"Partially Paid\",\n      paidAmount: \"5000.00\",\n      balanceAmount: \"3500.00\"\n    }).returning();\n\n    const [salesInvoice3] = await db.insert(salesInvoices).values({\n      retailerId: allRetailers[2].id,\n      invoiceNumber: \"SI000003\",\n      invoiceDate: new Date(\"2024-01-20\"),\n      totalAmount: \"15000.00\",\n      status: \"Unpaid\",\n      paidAmount: \"0.00\",\n      balanceAmount: \"15000.00\"\n    }).returning();\n\n    // Create sales invoice items\n    await db.insert(salesInvoiceItems).values([\n      {\n        invoiceId: salesInvoice1.id,\n        itemId: allItems[0].id,\n        weight: \"200.0\",\n        crates: \"10\",\n        boxes: \"0\",\n        rate: \"50.00\",\n        amount: \"10000.00\"\n      },\n      {\n        invoiceId: salesInvoice1.id,\n        itemId: allItems[3].id,\n        weight: \"40.0\",\n        crates: \"0\",\n        boxes: \"0\",\n        rate: \"50.00\",\n        amount: \"2000.00\"\n      },\n      {\n        invoiceId: salesInvoice2.id,\n        itemId: allItems[2].id,\n        weight: \"100.0\",\n        crates: \"0\",\n        boxes: \"10\",\n        rate: \"70.00\",\n        amount: \"7000.00\"\n      },\n      {\n        invoiceId: salesInvoice2.id,\n        itemId: allItems[5].id,\n        weight: \"60.0\",\n        crates: \"3\",\n        boxes: \"0\",\n        rate: \"25.00\",\n        amount: \"1500.00\"\n      },\n      {\n        invoiceId: salesInvoice3.id,\n        itemId: allItems[4].id,\n        weight: \"150.0\",\n        crates: \"0\",\n        boxes: \"15\",\n        rate: \"100.00\",\n        amount: \"15000.00\"\n      }\n    ]);\n\n    // Create sales payments\n    await db.insert(salesPayments).values([\n      {\n        invoiceId: salesInvoice1.id,\n        retailerId: allRetailers[0].id,\n        amount: \"12000.00\",\n        paymentMode: \"Cash\",\n        paymentDate: new Date(\"2024-01-16\"),\n        notes: \"Full payment received in cash\"\n      },\n      {\n        invoiceId: salesInvoice2.id,\n        retailerId: allRetailers[1].id,\n        amount: \"3000.00\",\n        paymentMode: \"UPI\",\n        paymentDate: new Date(\"2024-01-18\"),\n        upiReference: \"UPI987654321\",\n        notes: \"Partial UPI payment\"\n      },\n      {\n        invoiceId: salesInvoice2.id,\n        retailerId: allRetailers[1].id,\n        amount: \"2000.00\",\n        paymentMode: \"Cash\",\n        paymentDate: new Date(\"2024-01-19\"),\n        notes: \"Additional cash payment\"\n      }\n    ]);\n\n    // Create crate transactions\n    await db.insert(crateTransactions).values([\n      {\n        retailerId: allRetailers[0].id,\n        transactionType: \"Issue\",\n        quantity: 20,\n        depositAmount: \"200.00\",\n        transactionDate: new Date(\"2024-01-16\"),\n        notes: \"Crates given with fruits\"\n      },\n      {\n        retailerId: allRetailers[0].id,\n        transactionType: \"Return\",\n        quantity: 5,\n        depositAmount: \"50.00\",\n        transactionDate: new Date(\"2024-01-17\"),\n        notes: \"Empty crates returned\"\n      },\n      {\n        retailerId: allRetailers[1].id,\n        transactionType: \"Issue\",\n        quantity: 15,\n        depositAmount: \"150.00\",\n        transactionDate: new Date(\"2024-01-18\"),\n        notes: \"Crates for apple delivery\"\n      },\n      {\n        retailerId: allRetailers[2].id,\n        transactionType: \"Issue\",\n        quantity: 25,\n        depositAmount: \"250.00\",\n        transactionDate: new Date(\"2024-01-20\"),\n        notes: \"Crates for mixed fruit order\"\n      },\n      {\n        retailerId: allRetailers[2].id,\n        transactionType: \"Return\",\n        quantity: 3,\n        depositAmount: \"30.00\",\n        transactionDate: new Date(\"2024-01-21\"),\n        notes: \"Partial return of crates\"\n      }\n    ]);\n\n    // Create expenses with different categories and payment modes\n    await db.insert(expenses).values([\n      {\n        categoryId: allExpenseCategories[0].id, // Transport\n        amount: \"2500.00\",\n        description: \"Truck rental for fruit delivery\",\n        paymentDate: new Date(\"2024-01-15\"),\n        paymentMode: \"Cash\",\n        notes: \"Daily truck hire charges\"\n      },\n      {\n        categoryId: allExpenseCategories[1].id, // Labor\n        amount: \"1800.00\",\n        description: \"Loading and unloading charges\",\n        paymentDate: new Date(\"2024-01-16\"),\n        paymentMode: \"Cash\",\n        notes: \"Worker payment for 3 days\"\n      },\n      {\n        categoryId: allExpenseCategories[2].id, // Market Fee\n        amount: \"1200.00\",\n        description: \"APMC market fee and commission\",\n        paymentDate: new Date(\"2024-01-17\"),\n        paymentMode: \"Bank\",\n        bankAccountId: allBankAccounts[0].id,\n        notes: \"Weekly market fee payment\"\n      },\n      {\n        categoryId: allExpenseCategories[3].id, // Utilities\n        amount: \"3200.00\",\n        description: \"Electricity bill for cold storage\",\n        paymentDate: new Date(\"2024-01-18\"),\n        paymentMode: \"UPI\",\n        upiReference: \"UPI456789123\",\n        notes: \"Monthly electricity bill\"\n      },\n      {\n        categoryId: allExpenseCategories[5].id, // Rent\n        amount: \"15000.00\",\n        description: \"Shop rent for January\",\n        paymentDate: new Date(\"2024-01-01\"),\n        paymentMode: \"Cheque\",\n        bankAccountId: allBankAccounts[1].id,\n        chequeNumber: \"CHQ005678\",\n        notes: \"Monthly shop rent\"\n      }\n    ]);\n\n    // Create cashbook entries\n    await db.insert(cashbook).values([\n      {\n        date: new Date(\"2024-01-15\"),\n        description: \"Cash sales from Raj Retail Store\",\n        inflow: \"12000.00\",\n        outflow: \"0.00\",\n        balance: \"12000.00\",\n        referenceType: \"Sales Invoice\",\n        referenceId: salesInvoice1.id\n      },\n      {\n        date: new Date(\"2024-01-15\"),\n        description: \"Transport expense payment\",\n        inflow: \"0.00\",\n        outflow: \"2500.00\",\n        balance: \"9500.00\",\n        referenceType: \"Expense\",\n        referenceId: allExpenseCategories[0].id\n      },\n      {\n        date: new Date(\"2024-01-16\"),\n        description: \"Cash payment to Ramesh Supplier\",\n        inflow: \"0.00\",\n        outflow: \"15000.00\",\n        balance: \"-5500.00\",\n        referenceType: \"Payment\",\n        referenceId: invoice1.id\n      },\n      {\n        date: new Date(\"2024-01-18\"),\n        description: \"Cash sales partial payment\",\n        inflow: \"3000.00\",\n        outflow: \"0.00\",\n        balance: \"-2500.00\",\n        referenceType: \"Sales Payment\",\n        referenceId: salesInvoice2.id\n      }\n    ]);\n\n    // Create bankbook entries\n    await db.insert(bankbook).values([\n      {\n        date: new Date(\"2024-01-17\"),\n        description: \"Bank transfer to Ramesh Supplier\",\n        debit: \"0.00\",\n        credit: \"7450.00\",\n        balance: \"117550.00\",\n        bankAccountId: allBankAccounts[0].id,\n        referenceType: \"Payment\",\n        referenceId: invoice1.id\n      },\n      {\n        date: new Date(\"2024-01-17\"),\n        description: \"Market fee payment via bank\",\n        debit: \"0.00\",\n        credit: \"1200.00\",\n        balance: \"116350.00\",\n        bankAccountId: allBankAccounts[0].id,\n        referenceType: \"Expense\",\n        referenceId: allExpenseCategories[2].id\n      },\n      {\n        date: new Date(\"2024-01-22\"),\n        description: \"Cheque payment to Krishna Produce\",\n        debit: \"0.00\",\n        credit: \"5000.00\",\n        balance: \"80000.00\",\n        bankAccountId: allBankAccounts[1].id,\n        referenceType: \"Payment\",\n        referenceId: invoice2.id\n      },\n      {\n        date: new Date(\"2024-01-01\"),\n        description: \"Shop rent payment via cheque\",\n        debit: \"0.00\",\n        credit: \"15000.00\",\n        balance: \"65000.00\",\n        bankAccountId: allBankAccounts[1].id,\n        referenceType: \"Expense\",\n        referenceId: allExpenseCategories[5].id\n      }\n    ]);\n\n    console.log(\"Database initialized successfully with comprehensive dummy data!\");\n    console.log(\"Created:\");\n    console.log(\"- 3 Users (Admin, Operator, Accountant)\");\n    console.log(\"- 3 Vendors with different balances\");\n    console.log(\"- 6 Items across different vendors\");\n    console.log(\"- 4 Retailers with varying balances\");\n    console.log(\"- 2 Bank accounts\");\n    console.log(\"- 7 Expense categories\");\n    console.log(\"- 3 Purchase invoices (Paid, Partially Paid, Unpaid)\");\n    console.log(\"- 4 Invoice items across purchases\");\n    console.log(\"- 4 Payments with different modes\");\n    console.log(\"- 6 Stock entries for all items\");\n    console.log(\"- 5 Stock movements (IN/OUT/Wastage)\");\n    console.log(\"- 3 Sales invoices with different statuses\");\n    console.log(\"- 5 Sales invoice items\");\n    console.log(\"- 3 Sales payments\");\n    console.log(\"- 5 Crate transactions\");\n    console.log(\"- 5 Expenses across categories\");\n    console.log(\"- 4 Cashbook entries\");\n    console.log(\"- 4 Bankbook entries\");\n  } catch (error) {\n    console.error(\"Error initializing database:\", error);\n    throw error;\n  }\n}","size_bytes":23430},"client/src/components/ui/data-table-pagination.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\";\n\ninterface DataTablePaginationProps {\n  currentPage: number;\n  totalPages: number;\n  pageSize: number;\n  totalItems: number;\n  onPageChange: (page: number) => void;\n  onPageSizeChange: (pageSize: number) => void;\n  pageSizeOptions?: number[];\n  selectedRowCount?: number;\n}\n\nexport function DataTablePagination({\n  currentPage,\n  totalPages,\n  pageSize,\n  totalItems,\n  onPageChange,\n  onPageSizeChange,\n  pageSizeOptions = [10, 20, 50, 100],\n  selectedRowCount = 0,\n}: DataTablePaginationProps) {\n  const startItem = totalItems === 0 ? 0 : (currentPage - 1) * pageSize + 1;\n  const endItem = Math.min(currentPage * pageSize, totalItems);\n\n  return (\n    <div className=\"flex items-center justify-between px-2 py-4\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {selectedRowCount > 0 ? (\n          `${selectedRowCount} of ${totalItems} row(s) selected.`\n        ) : (\n          `${totalItems} row(s) total.`\n        )}\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={pageSize.toString()}\n            onValueChange={(value) => onPageSizeChange(Number(value))}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\" data-testid=\"select-page-size\">\n              <SelectValue placeholder={pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {pageSizeOptions.map((option) => (\n                <SelectItem key={option} value={option.toString()}>\n                  {option}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          {totalItems === 0 ? (\n            \"0 of 0\"\n          ) : (\n            `${startItem}-${endItem} of ${totalItems}`\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => onPageChange(1)}\n            disabled={currentPage === 1}\n            data-testid=\"button-first-page\"\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => onPageChange(currentPage - 1)}\n            disabled={currentPage === 1}\n            data-testid=\"button-previous-page\"\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n            Page {currentPage} of {totalPages}\n          </div>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => onPageChange(currentPage + 1)}\n            disabled={currentPage === totalPages}\n            data-testid=\"button-next-page\"\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => onPageChange(totalPages)}\n            disabled={currentPage === totalPages}\n            data-testid=\"button-last-page\"\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4006},"client/src/components/ui/data-table.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DataTablePagination } from \"@/components/ui/data-table-pagination\";\n\ninterface DataTableColumn<T> {\n  accessorKey: string;\n  header: string;\n  cell?: (value: any, item: T) => React.ReactNode;\n  enableSorting?: boolean;\n}\n\ninterface DataTableProps<T> {\n  data: T[];\n  columns: DataTableColumn<T>[];\n  searchTerm?: string;\n  searchFields?: string[];\n  pageSize?: number;\n  pageSizeOptions?: number[];\n  enableRowSelection?: boolean;\n  onRowSelect?: (selectedRows: T[]) => void;\n  rowKey?: string;\n  isLoading?: boolean;\n}\n\nexport function DataTable<T>({\n  data,\n  columns,\n  searchTerm = \"\",\n  searchFields = [],\n  pageSize: initialPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  enableRowSelection = false,\n  onRowSelect,\n  rowKey = \"id\",\n  isLoading = false,\n}: DataTableProps<T>) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(initialPageSize);\n  const [selectedRows, setSelectedRows] = useState<Set<any>>(new Set());\n\n  // Filter data based on search term\n  const filteredData = useMemo(() => {\n    if (!searchTerm || searchFields.length === 0) return data;\n    \n    return data.filter((item) =>\n      searchFields.some((field) => {\n        const value = getNestedValue(item, field);\n        return value?.toString().toLowerCase().includes(searchTerm.toLowerCase());\n      })\n    );\n  }, [data, searchTerm, searchFields]);\n\n  // Paginate filtered data\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return filteredData.slice(startIndex, endIndex);\n  }, [filteredData, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(filteredData.length / pageSize);\n\n  // Helper function to get nested object values\n  function getNestedValue(obj: any, path: string) {\n    return path.split('.').reduce((current, key) => current?.[key], obj);\n  }\n\n  // Handle page size change\n  const handlePageSizeChange = (newPageSize: number) => {\n    setPageSize(newPageSize);\n    setCurrentPage(1); // Reset to first page when changing page size\n  };\n\n  // Handle page change\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  // Handle row selection\n  const handleRowToggle = (rowId: any) => {\n    const newSelectedRows = new Set(selectedRows);\n    if (newSelectedRows.has(rowId)) {\n      newSelectedRows.delete(rowId);\n    } else {\n      newSelectedRows.add(rowId);\n    }\n    setSelectedRows(newSelectedRows);\n    \n    if (onRowSelect) {\n      const selectedItems = data.filter(item => \n        newSelectedRows.has(getNestedValue(item, rowKey))\n      );\n      onRowSelect(selectedItems);\n    }\n  };\n\n  // Handle select all\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      const allRowIds = new Set(\n        paginatedData.map(item => getNestedValue(item, rowKey))\n      );\n      setSelectedRows(allRowIds);\n      if (onRowSelect) {\n        onRowSelect(paginatedData);\n      }\n    } else {\n      setSelectedRows(new Set());\n      if (onRowSelect) {\n        onRowSelect([]);\n      }\n    }\n  };\n\n  const isAllSelected = paginatedData.length > 0 && \n    paginatedData.every(item => selectedRows.has(getNestedValue(item, rowKey)));\n  const isIndeterminate = paginatedData.some(item => \n    selectedRows.has(getNestedValue(item, rowKey))\n  ) && !isAllSelected;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {enableRowSelection && <TableHead className=\"w-12\" />}\n                {columns.map((column) => (\n                  <TableHead key={column.accessorKey}>\n                    {column.header}\n                  </TableHead>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {Array.from({ length: pageSize }).map((_, index) => (\n                <TableRow key={index}>\n                  {enableRowSelection && (\n                    <TableCell>\n                      <div className=\"h-4 w-4 animate-pulse bg-muted rounded\" />\n                    </TableCell>\n                  )}\n                  {columns.map((column) => (\n                    <TableCell key={column.accessorKey}>\n                      <div className=\"h-4 animate-pulse bg-muted rounded w-24\" />\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n        <DataTablePagination\n          currentPage={1}\n          totalPages={1}\n          pageSize={pageSize}\n          totalItems={0}\n          onPageChange={() => {}}\n          onPageSizeChange={() => {}}\n          pageSizeOptions={pageSizeOptions}\n          selectedRowCount={0}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {enableRowSelection && (\n                <TableHead className=\"w-12\">\n                  <Checkbox\n                    checked={isAllSelected}\n                    indeterminate={isIndeterminate}\n                    onCheckedChange={handleSelectAll}\n                    aria-label=\"Select all\"\n                    data-testid=\"checkbox-select-all\"\n                  />\n                </TableHead>\n              )}\n              {columns.map((column) => (\n                <TableHead key={column.accessorKey}>\n                  {column.header}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {paginatedData.length === 0 ? (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length + (enableRowSelection ? 1 : 0)}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            ) : (\n              paginatedData.map((item, index) => {\n                const rowId = getNestedValue(item, rowKey);\n                const isSelected = selectedRows.has(rowId);\n                \n                return (\n                  <TableRow\n                    key={rowId || index}\n                    data-state={isSelected ? \"selected\" : undefined}\n                  >\n                    {enableRowSelection && (\n                      <TableCell>\n                        <Checkbox\n                          checked={isSelected}\n                          onCheckedChange={() => handleRowToggle(rowId)}\n                          aria-label={`Select row ${index + 1}`}\n                          data-testid={`checkbox-row-${index}`}\n                        />\n                      </TableCell>\n                    )}\n                    {columns.map((column) => {\n                      const value = getNestedValue(item, column.accessorKey);\n                      return (\n                        <TableCell key={column.accessorKey}>\n                          {column.cell ? column.cell(value, item) : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination\n        currentPage={currentPage}\n        totalPages={totalPages}\n        pageSize={pageSize}\n        totalItems={filteredData.length}\n        onPageChange={handlePageChange}\n        onPageSizeChange={handlePageSizeChange}\n        pageSizeOptions={pageSizeOptions}\n        selectedRowCount={selectedRows.size}\n      />\n    </div>\n  );\n}","size_bytes":7912}},"version":1}